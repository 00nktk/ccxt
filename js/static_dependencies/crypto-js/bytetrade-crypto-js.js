(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.bytetrade_js = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({"/bytetrade-js/dist/browser.js":[function(require,module,exports){
        "use strict";

        module.exports = {
            PrivateKey: require("./ecc/src/PrivateKey"),
            PublicKey: require("./ecc/src/PublicKey"),
            Signature: require("./ecc/src/signature"),
            key: require("./ecc/src/KeyUtils"),
            hash: require("./ecc/src/hash"),
            ops: require("./serializer/src/operations"),
            // ,
            TransactionBuilder: require("./chain/src/TransactionBuilder")
            // Login: require("./chain/src/AccountLogin"),
            // bitshares_ws: require("bitsharesjs-ws")
        };
    },{"./chain/src/TransactionBuilder":"/bytetrade-js/dist/chain/src/TransactionBuilder.js","./ecc/src/KeyUtils":"/bytetrade-js/dist/ecc/src/KeyUtils.js","./ecc/src/PrivateKey":"/bytetrade-js/dist/ecc/src/PrivateKey.js","./ecc/src/PublicKey":"/bytetrade-js/dist/ecc/src/PublicKey.js","./ecc/src/hash":"/bytetrade-js/dist/ecc/src/hash.js","./ecc/src/signature":"/bytetrade-js/dist/ecc/src/signature.js","./serializer/src/operations":"/bytetrade-js/dist/serializer/src/operations.js"}],"/bytetrade-js/dist/chain/src/ChainTypes.js":[function(require,module,exports){
        "use strict";

        exports.__esModule = true;
        var ChainTypes = {};

        ChainTypes.reserved_spaces = {
            relative_protocol_ids: 0,
            protocol_ids: 1,
            implementation_ids: 2
        };

        ChainTypes.object_type = {
            "null": 0,
            base: 1,
            account: 2,
            asset: 3,
            force_settlement: 4,
            committee_member: 5,
            witness: 6,
            limit_order: 7,
            call_order: 8,
            custom: 9,
            proposal: 10,
            operation_history: 11,
            withdraw_permission: 12,
            vesting_balance: 13,
            worker: 14,
            balance: 15
        };

        ChainTypes.impl_object_type = {
            global_property: 0,
            dynamic_global_property: 1,
            index_meta: 2,
            asset_dynamic_data: 3,
            asset_bitasset_data: 4,
            account_balance: 5,
            account_statistics: 6,
            transaction: 7,
            block_summary: 8,
            account_transaction_history: 9,
            blinded_balance: 10,
            chain_property: 11,
            witness_schedule: 12,
            budget_record: 13
        };

        ChainTypes.vote_type = {
            committee: 0,
            witness: 1,
            worker: 2
        };

        ChainTypes.operations = {
            transfer: 0,
            withdraw: 4,
            proposal: 18,
            withdraw2: 26,
            order_create3: 32,
            order_cancel2: 33,
        };

        exports.default = ChainTypes;
        module.exports = exports["default"];
    },{}],"/bytetrade-js/dist/chain/src/ObjectId.js":[function(require,module,exports){
        'use strict';

        exports.__esModule = true;

        var _bytebuffer = require('bytebuffer');

        var _SerializerValidation = require('../../serializer/src/SerializerValidation');

        var _SerializerValidation2 = _interopRequireDefault(_SerializerValidation);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        var DB_MAX_INSTANCE_ID = _bytebuffer.Long.fromNumber(Math.pow(2, 48) - 1);

        var ObjectId = function () {
            function ObjectId(space, type, instance) {
                _classCallCheck(this, ObjectId);

                this.space = space;
                this.type = type;
                this.instance = instance;
                var instance_string = this.instance.toString();
                var _ObjectId = this.space + '.' + this.type + '.' + instance_string;
                if (!_SerializerValidation2.default.is_digits(instance_string)) {
                    throw new ('Invalid object id ' + _ObjectId)();
                }
            }

            ObjectId.fromString = function fromString(value) {
                if (value.space !== undefined && value.type !== undefined && value.instance !== undefined) {
                    return value;
                }

                var params = _SerializerValidation2.default.require_match(/^([0-9]+)\.([0-9]+)\.([0-9]+)$/, _SerializerValidation2.default.required(value, "ObjectId"), "ObjectId");
                return new ObjectId(parseInt(params[1]), parseInt(params[2]), _bytebuffer.Long.fromString(params[3]));
            };

            ObjectId.fromLong = function fromLong(long) {
                var space = long.shiftRight(56).toInt();
                var type = long.shiftRight(48).toInt() & 0x00ff;
                var instance = long.and(DB_MAX_INSTANCE_ID);
                return new ObjectId(space, type, instance);
            };

            ObjectId.fromByteBuffer = function fromByteBuffer(b) {
                return ObjectId.fromLong(b.readUint64());
            };

            ObjectId.prototype.toLong = function toLong() {
                return _bytebuffer.Long.fromNumber(this.space).shiftLeft(56).or(_bytebuffer.Long.fromNumber(this.type).shiftLeft(48).or(this.instance));
            };

            ObjectId.prototype.appendByteBuffer = function appendByteBuffer(b) {
                return b.writeUint64(this.toLong());
            };

            ObjectId.prototype.toString = function toString() {
                return this.space + '.' + this.type + '.' + this.instance.toString();
            };

            return ObjectId;
        }();

        exports.default = ObjectId;
        module.exports = exports['default'];
    },{"../../serializer/src/SerializerValidation":"/bytetrade-js/dist/serializer/src/SerializerValidation.js","bytebuffer":"/bytetrade-js/node_modules/bytebuffer/dist/bytebuffer.js"}],"/bytetrade-js/dist/chain/src/TransactionBuilder.js":[function(require,module,exports){
        (function (Buffer){
            "use strict";

            exports.__esModule = true;

            var _assert = require("assert");

            var _assert2 = _interopRequireDefault(_assert);

            var _ecc = require("../../ecc");

            var _serializer = require("../../serializer");

            var _bitsharesjsWs = require("bitsharesjs-ws");

            var _ChainTypes = require("./ChainTypes");

            var _ChainTypes2 = _interopRequireDefault(_ChainTypes);

            var _bigi = require("bigi");

            var _bigi2 = _interopRequireDefault(_bigi);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

            var head_block_time_string, committee_min_review;

            var TransactionBuilder = function () {
                function TransactionBuilder() {
                    _classCallCheck(this, TransactionBuilder);

                    this.ref_block_num = 0;
                    this.ref_block_prefix = 0;
                    this.expiration = 0;
                    this.operations = [];
                    this.signatures = [];
                    this.signer_private_keys = [];

                    // semi-private method bindings
                    this._broadcast = _broadcast.bind(this);
                }

                /**
                 @arg {string} name - like "transfer"
                 @arg {object} operation - JSON matchching the operation's format
                 */


                TransactionBuilder.prototype.add_type_operation = function add_type_operation(name, operation) {
                    this.add_operation(this.get_type_operation(name, operation));
                    return;
                };

                /**
                 This does it all: set fees, finalize, sign, and broadcast (if wanted).
                 @arg {Conf
            entialWallet} cwallet - must be unlocked, used to gather signing keys
                 @arg {array<string>} [signer_pubkeys = null] - Optional ["GPHAbc9Def0...", ...].  These are additional signing keys.  Some balance claims require propritary address formats, the witness node can't tell us which ones are needed so they must be passed in.  If the witness node can figure out a signing key (mostly all other transactions), it should not be passed in here.
                 @arg {boolean} [broadcast = false]
                 */


                TransactionBuilder.prototype.process_transaction = function process_transaction(cwallet) {
                    var _this = this;

                    var signer_pubkeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                    var broadcast = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;


                    var wallet_object = cwallet.wallet.wallet_object;
                    if (_bitsharesjsWs.Apis.instance().chain_id !== wallet_object.get("chain_id")) return Promise.reject("Mismatched chain_id; expecting " + wallet_object.get("chain_id") + ", but got " + _bitsharesjsWs.Apis.instance().chain_id);

                    return this.set_required_fees().then(function () {
                        var signer_pubkeys_added = {};
                        if (signer_pubkeys) {

                            // Balance claims are by address, only the private
                            // key holder can know about these additional
                            // potential keys.
                            var pubkeys = cwallet.getPubkeys_having_PrivateKey(signer_pubkeys);
                            if (!pubkeys.length) throw new Error("Missing signing key");

                            for (var _iterator = pubkeys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                                var _ref;

                                if (_isArray) {
                                    if (_i >= _iterator.length) break;
                                    _ref = _iterator[_i++];
                                } else {
                                    _i = _iterator.next();
                                    if (_i.done) break;
                                    _ref = _i.value;
                                }

                                var pubkey_string = _ref;

                                var private_key = cwallet.getPrivateKey(pubkey_string);
                                _this.add_signer(private_key, pubkey_string);
                                signer_pubkeys_added[pubkey_string] = true;
                            }
                        }

                        return _this.get_potential_signatures().then(function (_ref2) {
                            var pubkeys = _ref2.pubkeys,
                                addys = _ref2.addys;

                            var my_pubkeys = cwallet.getPubkeys_having_PrivateKey(pubkeys, addys);

                            //{//Testing only, don't send All public keys!
                            //    var pubkeys_all = PrivateKeyStore.getPubkeys() // All public keys
                            //    this.get_required_signatures(pubkeys_all).then( required_pubkey_strings =>
                            //        console.log('get_required_signatures all\t',required_pubkey_strings.sort(), pubkeys_all))
                            //    this.get_required_signatures(my_pubkeys).then( required_pubkey_strings =>
                            //        console.log('get_required_signatures normal\t',required_pubkey_strings.sort(), pubkeys))
                            //}

                            return _this.get_required_signatures(my_pubkeys).then(function (required_pubkeys) {
                                for (var _iterator2 = required_pubkeys, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                                    var _ref3;

                                    if (_isArray2) {
                                        if (_i2 >= _iterator2.length) break;
                                        _ref3 = _iterator2[_i2++];
                                    } else {
                                        _i2 = _iterator2.next();
                                        if (_i2.done) break;
                                        _ref3 = _i2.value;
                                    }

                                    var _pubkey_string = _ref3;

                                    if (signer_pubkeys_added[_pubkey_string]) continue;
                                    var private_key = cwallet.getPrivateKey(_pubkey_string);
                                    if (!private_key)
                                    // This should not happen, get_required_signatures will only
                                    // returned keys from my_pubkeys
                                        throw new Error("Missing signing key for " + _pubkey_string);
                                    _this.add_signer(private_key, _pubkey_string);
                                }
                            });
                        }).then(function () {
                            return broadcast ? _this.broadcast() : _this.serialize();
                        });
                    });
                };

                /** Typically this is called automatically just prior to signing.  Once finalized this transaction can not be changed. */


                TransactionBuilder.prototype.finalize = function finalize() {
                    var _this2 = this;

                    return new Promise(function (resolve, reject) {

                        if (_this2.tr_buffer) {
                            throw new Error("already finalized");
                        }

                        //resolve(Apis.instance().db_api().exec("get_objects", [["2.1.0"]]).then((r) => {
                        //  head_block_time_string = r[0].time;
                        //   if( this.expiration === 0 )
                        //       this.expiration = base_expiration_sec() + ChainConfig.expire_in_secs
                        // this.ref_block_num = r[0].head_block_number & 0xFFFF;
                        // this.ref_block_prefix =  new Buffer(r[0].head_block_id, 'hex').readUInt32LE(4);
                        //DEBUG console.log("ref_block",@ref_block_num,@ref_block_prefix,r)

                        // console.log("aa");
                        var iterable = _this2.operations;
                        for (var i = 0, op; i < iterable.length; i++) {
                            op = iterable[i];
                            if (op[1]["finalize"]) {
                                op[1].finalize();
                            }
                        }
                        _this2.tr_buffer = _serializer.ops.transaction.toBuffer(_this2);
                        console.log (_this2.tr_buffer.toString ('hex'))
                        //   console.log(hash.sha256(this.tr_buffer).toString('hex'));
                        resolve();

                        //   }));
                    });
                };



                /** @return {string} hex transaction ID */


                TransactionBuilder.prototype.id = function id() {
                    if (!this.tr_buffer) {
                        throw new Error("not finalized");
                    }
                    return _ecc.hash.sha256(this.tr_buffer).toString('hex').substring(0, 40);
                };

                TransactionBuilder.prototype.id_int = function id_int() {
                    if (!this.tr_buffer) {
                        throw new Error("not finalized");
                    }
                    var t = _ecc.hash.sha256(this.tr_buffer).toString('hex').substring(0, 9);
                    var res = 0;
                    for (var i = 0; i < t.length; ++i) {
                        var c = t.charCodeAt(i);
                        //console.log( t[i] + " " + c);
                        res = res * 128 + c;
                    }
                    return res;
                };

                /**
                 Typically one will use {@link this.add_type_operation} instead.
                 @arg {array} operation - [operation_id, operation]
                 */


                TransactionBuilder.prototype.add_operation = function add_operation(operation) {
                    if (this.tr_buffer) {
                        throw new Error("already finalized");
                    }
                    (0, _assert2.default)(operation, "operation");
                    if (!Array.isArray(operation)) {
                        throw new Error("Expecting array [operation_id, operation]");
                    }
                    this.operations.push(operation);
                    return;
                };

                TransactionBuilder.prototype.get_type_operation = function get_type_operation(name, operation) {
                    if (this.tr_buffer) {
                        throw new Error("already finalized");
                    }
                    (0, _assert2.default)(name, "name");
                    (0, _assert2.default)(operation, "operation");
                    var _type = _serializer.ops[name];
                    (0, _assert2.default)(_type, "Unknown operation " + name);
                    var operation_id = _ChainTypes2.default.operations[_type.operation_name];
                    if (operation_id === undefined) {
                        throw new Error("unknown operation: " + _type.operation_name);
                    }
                    if (!operation.fee) {
                        operation.fee = { amount: 0, asset_id: 0 };
                    }
                    if (name === 'proposal_create') {
                        /*
            * Proposals involving the committee account require a review
            * period to be set, look for them here
            */
                        var requiresReview = false,
                            extraReview = 0;
                        operation.proposed_ops.forEach(function (op) {
                            var COMMITTE_ACCOUNT = 0;
                            var key = void 0;

                            switch (op.op[0]) {
                                case 0:
                                    // transfer
                                    key = "from";
                                    break;

                                case 6: //account_update
                                case 17:
                                    // asset_settle
                                    key = "account";
                                    break;

                                case 10: // asset_create
                                case 11: // asset_update
                                case 12: // asset_update_bitasset
                                case 13: // asset_update_feed_producers
                                case 14: // asset_issue
                                case 18: // asset_global_settle
                                case 43:
                                    // asset_claim_fees
                                    key = "issuer";
                                    break;

                                case 15:
                                    // asset_reserve
                                    key = "payer";
                                    break;

                                case 16:
                                    // asset_fund_fee_pool
                                    key = "from_account";
                                    break;

                                case 22: // proposal_create
                                case 23: // proposal_update
                                case 24:
                                    // proposal_delete
                                    key = "fee_paying_account";
                                    break;

                                case 31:
                                    // committee_member_update_global_parameters
                                    requiresReview = true;
                                    extraReview = 60 * 60 * 24 * 13; // Make the review period 2 weeks total
                                    break;
                            }
                            if (key in op.op[1] && op.op[1][key] === COMMITTE_ACCOUNT) {
                                requiresReview = true;
                            }
                        });
                        operation.expiration_time || (operation.expiration_time = base_expiration_sec() + _bitsharesjsWs.ChainConfig.expire_in_secs_proposal);
                        if (requiresReview) {
                            operation.review_period_seconds = extraReview + Math.max(committee_min_review, 24 * 60 * 60 || _bitsharesjsWs.ChainConfig.review_in_secs_committee);
                            /*
                * Expiration time must be at least equal to
                * now + review_period_seconds, so we add one hour to make sure
                */
                            operation.expiration_time += 60 * 60 + extraReview;
                        }
                    }
                    var operation_instance = _type.fromObject(operation);
                    return [operation_id, operation_instance];
                };

                /* optional: fetch the current head block */

                TransactionBuilder.prototype.update_head_block = function update_head_block() {
                    return Promise.all([_bitsharesjsWs.Apis.instance().db_api().exec("get_objects", [["2.0.0"]]), _bitsharesjsWs.Apis.instance().db_api().exec("get_objects", [["2.1.0"]])]).then(function (res) {
                        var g = res[0],
                            r = res[1];

                        head_block_time_string = r[0].time;
                        committee_min_review = g[0].parameters.committee_proposal_review_period;
                    });
                };

                /** optional: there is a deafult expiration */


                TransactionBuilder.prototype.set_expire_seconds = function set_expire_seconds(sec) {
                    if (this.tr_buffer) {
                        throw new Error("already finalized");
                    }
                    return this.expiration = base_expiration_sec() + sec;
                };

                /* Wraps this transaction in a proposal_create transaction */


                TransactionBuilder.prototype.propose = function propose(proposal) {
                    if (this.tr_buffer) {
                        throw new Error("already finalized");
                    }
                    if (!this.operations.length) {
                        throw new Error("add operation first");
                    }

                    (0, _assert2.default)(proposal, "proposal");
                    //assert(proposal_create_options.fee_paying_account, "proposal_create_options.fee_paying_account");

                    var proposed_ops = this.operations.map(function (op) {
                        return { op: op };
                    });

                    this.operations = [];
                    this.signatures = [];
                    this.signer_private_keys = [];
                    proposal.proposed_ops = proposed_ops;
                    this.add_type_operation("proposal", proposal);
                    return this;
                };

                TransactionBuilder.prototype.has_proposed_operation = function has_proposed_operation() {
                    var hasProposed = false;
                    for (var i = 0; i < this.operations.length; i++) {
                        if ("proposed_ops" in this.operations[i][1]) {
                            hasProposed = true;
                            break;
                        }
                    }

                    return hasProposed;
                };

                /** optional: the fees can be obtained from the witness node */


                TransactionBuilder.prototype.set_required_fees = function set_required_fees(asset_id) {
                    var _this3 = this;

                    var fee_pool = void 0;
                    if (this.tr_buffer) {
                        throw new Error("already finalized");
                    }
                    if (!this.operations.length) {
                        throw new Error("add operations first");
                    }
                    var operations = [];
                    for (var i = 0, op; i < this.operations.length; i++) {
                        op = this.operations[i];
                        operations.push(_serializer.ops.operation.toObject(op));
                    }

                    if (!asset_id) {
                        var op1_fee = operations[0][1].fee;
                        if (op1_fee && op1_fee.asset_id !== null) {
                            asset_id = op1_fee.asset_id;
                        } else {
                            asset_id = "1.3.0";
                        }
                    }

                    var promises = [_bitsharesjsWs.Apis.instance().db_api().exec("get_required_fees", [operations, asset_id])];

                    if (asset_id !== "1.3.0") {
                        // This handles the fallback to paying fees in BTS if the fee pool is empty.
                        promises.push(_bitsharesjsWs.Apis.instance().db_api().exec("get_required_fees", [operations, "1.3.0"]));
                        promises.push(_bitsharesjsWs.Apis.instance().db_api().exec("get_objects", [[asset_id]]));
                    }

                    var fees = void 0,
                        coreFees = void 0,
                        asset = void 0;
                    return Promise.all(promises).then(function (results) {
                        fees = results[0];
                        coreFees = results[1];
                        asset = results[2];

                        asset = asset ? asset[0] : null;

                        var dynamicPromise = asset_id !== "1.3.0" && asset ? _bitsharesjsWs.Apis.instance().db_api().exec("get_objects", [[asset.dynamic_asset_data_id]]) : new Promise(function (resolve) {
                            return resolve();
                        });
                        return dynamicPromise;
                    }).then(function (dynamicObject) {
                        if (asset_id !== "1.3.0") {
                            fee_pool = dynamicObject ? dynamicObject[0].fee_pool : 0;
                            var totalFees = 0;
                            for (var j = 0, fee; j < coreFees.length; j++) {
                                fee = coreFees[j];
                                totalFees += fee.amount;
                            }

                            if (totalFees > parseInt(fee_pool, 10)) {
                                fees = coreFees;
                                asset_id = "1.3.0";
                            }
                        }

                        // Proposed transactions need to be flattened
                        var flat_assets = [];
                        var flatten = function flatten(obj) {
                            if (Array.isArray(obj)) {
                                for (var k = 0, item; k < obj.length; k++) {
                                    item = obj[k];
                                    flatten(item);
                                }
                            } else {
                                flat_assets.push(obj);
                            }
                            return;
                        };
                        flatten(fees);

                        var asset_index = 0;

                        var set_fee = function set_fee(operation) {
                            if (!operation.fee || operation.fee.amount === 0 || operation.fee.amount.toString && operation.fee.amount.toString() === "0" // Long
                            ) {
                                operation.fee = flat_assets[asset_index];
                                // console.log("new operation.fee", operation.fee)
                            } else {
                                // console.log("old operation.fee", operation.fee)
                            }
                            asset_index++;
                            if (operation.proposed_ops) {
                                var result = [];
                                for (var y = 0; y < operation.proposed_ops.length; y++) {
                                    result.push(set_fee(operation.proposed_ops[y].op[1]));
                                }return result;
                            }
                        };
                        for (var _i3 = 0; _i3 < _this3.operations.length; _i3++) {
                            set_fee(_this3.operations[_i3][1]);
                        }
                    });
                    //DEBUG console.log('... get_required_fees',operations,asset_id,flat_assets)
                };

                TransactionBuilder.prototype.get_potential_signatures = function get_potential_signatures() {
                    var tr_object = _serializer.ops.signed_transaction.toObject(this);
                    return Promise.all([_bitsharesjsWs.Apis.instance().db_api().exec("get_potential_signatures", [tr_object]), _bitsharesjsWs.Apis.instance().db_api().exec("get_potential_address_signatures", [tr_object])]).then(function (results) {
                        return { pubkeys: results[0], addys: results[1] };
                    });
                };

                TransactionBuilder.prototype.get_required_signatures = function get_required_signatures(available_keys) {
                    if (!available_keys.length) {
                        return Promise.resolve([]);
                    }
                    var tr_object = _serializer.ops.signed_transaction.toObject(this);
                    //DEBUG console.log('... tr_object',tr_object)
                    return _bitsharesjsWs.Apis.instance().db_api().exec("get_required_signatures", [tr_object, available_keys]).then(function (required_public_keys) {
                        //DEBUG console.log('... get_required_signatures',required_public_keys)
                        return required_public_keys;
                    });
                };

                TransactionBuilder.prototype.add_signer = function add_signer(private_key) {
                    var public_key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : private_key.toPublicKey();


                    (0, _assert2.default)(private_key.d, "required PrivateKey object");

                    if (this.signed) {
                        throw new Error("already signed");
                    }
                    if (!public_key.Q) {
                        public_key = _ecc.PublicKey.fromPublicKeyString(public_key);
                    }
                    // prevent duplicates
                    var spHex = private_key.toHex();
                    for (var _iterator3 = this.signer_private_keys, _isArray3 = Array.isArray(_iterator3), _i4 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
                        var _ref4;

                        if (_isArray3) {
                            if (_i4 >= _iterator3.length) break;
                            _ref4 = _iterator3[_i4++];
                        } else {
                            _i4 = _iterator3.next();
                            if (_i4.done) break;
                            _ref4 = _i4.value;
                        }

                        var sp = _ref4;

                        if (sp[0].toHex() === spHex) return;
                    }
                    this.signer_private_keys.push([private_key, public_key]);
                };

                //sign(chain_id = "b6af4302a4650500000000000000000000000000000000000000000000000000"){


                TransactionBuilder.prototype.sign = function sign() {
                    var chain_id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "0000000000000000000000000000000000000000000000000000000000000001";

                    if (!this.tr_buffer) {
                        throw new Error("not finalized");
                    }
                    if (this.signed) {
                        throw new Error("already signed");
                    }
                    if (!this.signer_private_keys.length) {
                        throw new Error("Transaction was not signed. Do you have a private key? [no_signers]");
                    }
                    var end = this.signer_private_keys.length;
                    for (var i = 0; 0 < end ? i < end : i > end; 0 < end ? i++ : i++) {
                        var _signer_private_keys$ = this.signer_private_keys[i],
                            private_key = _signer_private_keys$[0],
                            public_key = _signer_private_keys$[1];
                        //var sig = Signature.signBuffer(

                        var sig = _ecc.Signature.signBufferSha256(
                            /*
            Buffer.concat([new Buffer(chain_id, 'hex'), this.tr_buffer]),*/
                            _ecc.hash.sha256(Buffer.concat([new Buffer(chain_id, 'hex'), this.tr_buffer])), private_key);
                        //   console.log(hash.sha256(Buffer.concat([new Buffer(chain_id, 'hex'), this.tr_buffer])).toString('hex'));
                        //   console.log(private_key.toPublicKey().toAddressString());
                        //   console.log(sig.toBuffer().toString('hex'));

                        this.signatures.push(sig.toBuffer());
                    }
                    this.signer_private_keys = [];
                    this.signed = true;
                    return;
                };

                TransactionBuilder.prototype.serialize = function serialize() {
                    return _serializer.ops.signed_transaction.toObject(this);
                };

                TransactionBuilder.prototype.toObject = function toObject() {
                    return _serializer.ops.signed_transaction.toObject(this);
                };

                TransactionBuilder.prototype.broadcast = function broadcast(was_broadcast_callback) {
                    var _this4 = this;

                    if (this.tr_buffer) {
                        return this._broadcast(was_broadcast_callback);
                    } else {
                        return this.finalize().then(function () {
                            return _this4._broadcast(was_broadcast_callback);
                        });
                    }
                };

                return TransactionBuilder;
            }();

            var base_expiration_sec = function base_expiration_sec() {
                var head_block_sec = Math.ceil(getHeadBlockDate().getTime() / 1000);
                var now_sec = Math.ceil(Date.now() / 1000);
                // The head block time should be updated every 3 seconds.  If it isn't
                // then help the transaction to expire (use head_block_sec)
                if (now_sec - head_block_sec > 30) {
                    return head_block_sec;
                }
                // If the user's clock is very far behind, use the head block time.
                return Math.max(now_sec, head_block_sec);
            };

            function _broadcast(was_broadcast_callback) {
                //  return new Promise((resolve, reject)=> {

                if (!this.signed) {
                    this.sign();
                }
                if (!this.tr_buffer) {
                    throw new Error("not finalized");
                }
                if (!this.signatures.length) {
                    throw new Error("not signed");
                }
                if (!this.operations.length) {
                    throw new Error("no operations");
                }

                var tr_object = _serializer.ops.signed_transaction.toObject(this);
                console.log('bitshares-crypto ' + ' digest ' + _ecc.hash.sha256(this.tr_buffer).toString('hex') + ' transaction ' + this.tr_buffer.toString('hex') + ' ' + JSON.stringify(tr_object));

                // console.log('... broadcast_transaction_with_callback !!!')
                /*Apis.instance().network_api().exec( "broadcast_transaction_with_callback", [ function(res) { return resolve(res); } ,tr_object]).then(function(){
        //console.log('... broadcast success, waiting for callback')
        if(was_broadcast_callback) was_broadcast_callback();
        return;
    }
    ).catch( (error)=> {
        // console.log may be redundant for network errors, other errors could occur
        console.log(error);
        var message = error.message;
        if (!message) { message = ""; }
        reject( new Error((
            message + "\n" +
            'bitshares-crypto ' +
            ' digest ' + hash.sha256(this.tr_buffer).toString('hex') +
            ' transaction ' + this.tr_buffer.toString('hex') +
            ' ' + JSON.stringify(tr_object) ))
        );
        return;
    }
    );*/
                return;
                //  });
            }

            function getHeadBlockDate() {
                return timeStringToDate(head_block_time_string);
            }

            function timeStringToDate(time_string) {
                if (!time_string) return new Date("1970-01-01T00:00:00.000Z");
                if (!/Z$/.test(time_string)) //does not end in Z
                // https://github.com/cryptonomex/graphene/issues/368
                    time_string = time_string + "Z";
                return new Date(time_string);
            }

            exports.default = TransactionBuilder;
            module.exports = exports["default"];
        }).call(this,require("buffer").Buffer)

    },{"../../ecc":"/bytetrade-js/dist/ecc/index.js","../../serializer":"/bytetrade-js/dist/serializer/index.js","./ChainTypes":"/bytetrade-js/dist/chain/src/ChainTypes.js","assert":"/bytetrade-js/node_modules/assert/assert.js","bigi":"/bytetrade-js/node_modules/bigi/lib/index.js","bitsharesjs-ws":"/bytetrade-js/node_modules/bitsharesjs-ws/cjs/index.js","buffer":"/bytetrade-js/node_modules/buffer/index.js"}],"/bytetrade-js/dist/ecc/index.js":[function(require,module,exports){
        "use strict";

        exports.__esModule = true;
        exports.key = exports.hash = exports.brainKey = exports.Signature = exports.PublicKey = exports.PrivateKey = exports.Aes = exports.Address = undefined;

        var _address = require("./src/address");

        var _address2 = _interopRequireDefault(_address);

        var _aes = require("./src/aes");

        var _aes2 = _interopRequireDefault(_aes);

        var _PrivateKey = require("./src/PrivateKey");

        var _PrivateKey2 = _interopRequireDefault(_PrivateKey);

        var _PublicKey = require("./src/PublicKey");

        var _PublicKey2 = _interopRequireDefault(_PublicKey);

        var _signature = require("./src/signature");

        var _signature2 = _interopRequireDefault(_signature);

        var _BrainKey = require("./src/BrainKey");

        var _BrainKey2 = _interopRequireDefault(_BrainKey);

        var _hash = require("./src/hash");

        var hash = _interopRequireWildcard(_hash);

        var _KeyUtils = require("./src/KeyUtils");

        var _KeyUtils2 = _interopRequireDefault(_KeyUtils);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        exports.Address = _address2.default;
        exports.Aes = _aes2.default;
        exports.PrivateKey = _PrivateKey2.default;
        exports.PublicKey = _PublicKey2.default;
        exports.Signature = _signature2.default;
        exports.brainKey = _BrainKey2.default;
        exports.hash = hash;
        exports.key = _KeyUtils2.default;
    },{"./src/BrainKey":"/bytetrade-js/dist/ecc/src/BrainKey.js","./src/KeyUtils":"/bytetrade-js/dist/ecc/src/KeyUtils.js","./src/PrivateKey":"/bytetrade-js/dist/ecc/src/PrivateKey.js","./src/PublicKey":"/bytetrade-js/dist/ecc/src/PublicKey.js","./src/address":"/bytetrade-js/dist/ecc/src/address.js","./src/aes":"/bytetrade-js/dist/ecc/src/aes.js","./src/hash":"/bytetrade-js/dist/ecc/src/hash.js","./src/signature":"/bytetrade-js/dist/ecc/src/signature.js"}],"/bytetrade-js/dist/ecc/src/BrainKey.js":[function(require,module,exports){
        'use strict';

        exports.__esModule = true;
        exports.default = normalize;
        function normalize(brainKey) {
            if (typeof brainKey !== 'string') {
                throw new Error("string required for brainKey");
            }
            brainKey = brainKey.trim();
            return brainKey.split(/[\t\n\v\f\r ]+/).join(' ');
        }
        module.exports = exports['default'];
    },{}],"/bytetrade-js/dist/ecc/src/KeyUtils.js":[function(require,module,exports){
        (function (Buffer){
            'use strict';

            exports.__esModule = true;

            var _PrivateKey = require('./PrivateKey');

            var _PrivateKey2 = _interopRequireDefault(_PrivateKey);

            var _PublicKey = require('./PublicKey');

            var _PublicKey2 = _interopRequireDefault(_PublicKey);

            var _address = require('./address');

            var _address2 = _interopRequireDefault(_address);

            var _aes = require('./aes');

            var _aes2 = _interopRequireDefault(_aes);

            var _hash = require('./hash');

            var _secureRandom = require('secure-random');

            var _secureRandom2 = _interopRequireDefault(_secureRandom);

            var _uuid = require('uuid');

            var _uuid2 = _interopRequireDefault(_uuid);

            var _bip = require('bip39');

            var _bip2 = _interopRequireDefault(_bip);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//import NodeRSA     from "node-rsa"

// hash for .25 second

//import {ChainConfig} from 'bitsharesjs-ws';
            var HASH_POWER_MILLS = 250;
// import dictionary from './dictionary_en';


            var key = {

                /** Uses 1 second of hashing power to create a key/password checksum.  An
                 implementation can re-call this method with the same password to re-match
                 the strength of the CPU (either after moving from a desktop to a mobile,
                 mobile to desktop, or N years from now when CPUs are presumably stronger).
                 A salt is used for all the normal reasons...
                 @return object {
        aes_private: Aes,
        checksum: "{hash_iteration_count},{salt},{checksum}"
    }
                 */

                generateMnemonic: function generateMnemonic() {
                    return _bip2.default.generateMnemonic();
                },
                mnemonicToSeed: function mnemonicToSeed(mnemonic) {
                    return _bip2.default.mnemonicToSeed(mnemonic);
                },
                mnemonicToSeedHex: function mnemonicToSeedHex(mnemonic) {
                    return _bip2.default.mnemonicToSeedHex(mnemonic);
                },
                encrypt_mnemonic: function encrypt_mnemonic(mnemonic, account_name, password) {
                    // const key = new NodeRSA([account_name+password]);

                    // const publicDer = key.exportKey('pkcs8-public-der');
                    // console.log(publicDer);

                    // var en = key.encrypt (new Buffer(mnemonic), 'base64');
                    // console.log(en);

                    // return en;
                    var akey = _aes2.default.fromSeed(account_name + password);
                    var en = akey.encryptToHex(mnemonic);
                    // console.log("en " + en);

                    return en;
                },
                decrypt_mnemonic: function decrypt_mnemonic(mnemonic_cliper, account_name, password) {
                    // const key = new NodeRSA([account_name+password]);

                    // const publicDer = key.exportKey('pkcs8-public-der');
                    // console.log(publicDer);

                    // return key.decrypt (new Buffer(mnemonic_cliper));

                    var akey = _aes2.default.fromSeed(account_name + password);
                    var dn = akey.decryptHexToText(mnemonic_cliper);
                    //console.log("dn " + dn);

                    return dn;
                },
                gen_privateKey: function gen_privateKey() {
                    var seed = _uuid2.default.v4() + _uuid2.default.v1();
                    return _PrivateKey2.default.fromSeed(this.normalize_brainKey(seed));
                },
                aes_checksum: function aes_checksum(password) {
                    if (!(typeof password === "string")) {
                        throw new "password string required"();
                    }
                    var salt = _secureRandom2.default.randomBuffer(4).toString('hex');
                    var iterations = 0;
                    var secret = salt + password;
                    // hash for .1 second
                    var start_t = Date.now();
                    while (Date.now() - start_t < HASH_POWER_MILLS) {
                        secret = (0, _hash.sha256)(secret);
                        iterations += 1;
                    }

                    var checksum = (0, _hash.sha256)(secret);
                    var checksum_string = [iterations, salt.toString('hex'), checksum.slice(0, 4).toString('hex')].join(',');

                    return { aes_private: _aes2.default.fromSeed(secret),
                        checksum: checksum_string
                    };
                },


                /** Provide a matching password and key_checksum.  A "wrong password"
                 error is thrown if the password does not match.  If this method takes
                 much more or less than 1 second to return, one should consider updating
                 all encyrpted fields using a new key.key_checksum.
                 */
                aes_private: function aes_private(password, key_checksum) {
                    var _key_checksum$split = key_checksum.split(','),
                        iterations = _key_checksum$split[0],
                        salt = _key_checksum$split[1],
                        checksum = _key_checksum$split[2];

                    var secret = salt + password;
                    for (var i = 0; 0 < iterations ? i < iterations : i > iterations; 0 < iterations ? i++ : i++) {
                        secret = (0, _hash.sha256)(secret);
                    }
                    var new_checksum = (0, _hash.sha256)(secret);
                    if (!(new_checksum.slice(0, 4).toString('hex') === checksum)) {
                        throw new Error("wrong password");
                    }
                    return _aes2.default.fromSeed(secret);
                },


                /**
                 A week random number generator can run out of entropy.  This should ensure even the worst random number implementation will be reasonably safe.
                 @param1 string entropy of at least 32 bytes
                 */
                random32ByteBuffer: function random32ByteBuffer() {
                    var entropy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.browserEntropy();


                    if (!(typeof entropy === 'string')) {
                        throw new Error("string required for entropy");
                    }

                    if (entropy.length < 32) {
                        throw new Error("expecting at least 32 bytes of entropy");
                    }

                    var start_t = Date.now();

                    while (Date.now() - start_t < HASH_POWER_MILLS) {
                        entropy = (0, _hash.sha256)(entropy);
                    }var hash_array = [];
                    hash_array.push(entropy);

                    // Hashing for 1 second may helps the computer is not low on entropy (this method may be called back-to-back).
                    hash_array.push(_secureRandom2.default.randomBuffer(32));

                    return (0, _hash.sha256)(Buffer.concat(hash_array));
                },


                suggest_brain_key: function suggest_brain_key() {
                    var dictionary = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ",";
                    var entropy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.browserEntropy();


                    var randomBuffer = this.random32ByteBuffer(entropy);

                    var word_count = 16;
                    var dictionary_lines = dictionary.split(',');

                    if (!(dictionary_lines.length === 49744)) {
                        throw new Error('expecting ' + 49744 + ' but got ' + dictionary_lines.length + ' dictionary words');
                    }

                    var brainkey = [];
                    var end = word_count * 2;

                    for (var i = 0; i < end; i += 2) {

                        // randomBuffer has 256 bits / 16 bits per word == 16 words
                        var num = (randomBuffer[i] << 8) + randomBuffer[i + 1];

                        // convert into a number between 0 and 1 (inclusive)
                        var rndMultiplier = num / Math.pow(2, 16);
                        var wordIndex = Math.round(dictionary_lines.length * rndMultiplier);

                        brainkey.push(dictionary_lines[wordIndex]);
                    }
                    return this.normalize_brainKey(brainkey.join(' '));
                },

                get_random_key: function get_random_key(entropy) {
                    return _PrivateKey2.default.fromBuffer(this.random32ByteBuffer(entropy));
                },
                get_brainPrivateKey: function get_brainPrivateKey(brainKey) {
                    var sequence = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

                    if (sequence < 0) {
                        throw new Error("invalid sequence");
                    }
                    brainKey = key.normalize_brainKey(brainKey);
                    return _PrivateKey2.default.fromBuffer((0, _hash.sha256)((0, _hash.sha512)(brainKey + " " + sequence)));
                },


                // Turn invisible space like characters into a single space
                normalize_brainKey: function normalize_brainKey(brainKey) {
                    if (!(typeof brainKey === 'string')) {
                        throw new Error("string required for brainKey");
                    }

                    brainKey = brainKey.trim();
                    return brainKey.split(/[\t\n\v\f\r ]+/).join(' ');
                },
                browserEntropy: function browserEntropy() {

                    var entropyStr = "";
                    try {
                        entropyStr = new Date().toString() + " " + window.screen.height + " " + window.screen.width + " " + window.screen.colorDepth + " " + " " + window.screen.availHeight + " " + window.screen.availWidth + " " + window.screen.pixelDepth + navigator.language + " " + window.location + " " + window.history.length;

                        for (var i = 0, mimeType; i < navigator.mimeTypes.length; i++) {
                            mimeType = navigator.mimeTypes[i];
                            entropyStr += mimeType.description + " " + mimeType.type + " " + mimeType.suffixes + " ";
                        }
                        console.log("INFO\tbrowserEntropy gathered");
                    } catch (error) {
                        //nodejs:ReferenceError: window is not defined
                        entropyStr = (0, _hash.sha256)(new Date().toString());
                    }

                    var b = new Buffer(entropyStr);
                    entropyStr += b.toString('binary') + " " + new Date().toString();
                    return entropyStr;
                },


                // @return array of 5 legacy addresses for a pubkey string parameter.
                addresses: function addresses(pubkey) {
                    var address_prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "BTT";

                    var public_key = _PublicKey2.default.fromPublicKeyString(pubkey, address_prefix);
                    // S L O W
                    var address_string = [_address2.default.fromPublic(public_key, false, 0).toString(address_prefix), // btc_uncompressed
                        _address2.default.fromPublic(public_key, true, 0).toString(address_prefix), // btc_compressed
                        _address2.default.fromPublic(public_key, false, 56).toString(address_prefix), // pts_uncompressed
                        _address2.default.fromPublic(public_key, true, 56).toString(address_prefix), // pts_compressed
                        public_key.toAddressString(address_prefix) // bts_short, most recent format
                    ];
                    return address_string;
                }
            };

            exports.default = key;
            module.exports = exports['default'];
        }).call(this,require("buffer").Buffer)

    },{"./PrivateKey":"/bytetrade-js/dist/ecc/src/PrivateKey.js","./PublicKey":"/bytetrade-js/dist/ecc/src/PublicKey.js","./address":"/bytetrade-js/dist/ecc/src/address.js","./aes":"/bytetrade-js/dist/ecc/src/aes.js","./hash":"/bytetrade-js/dist/ecc/src/hash.js","bip39":"/bytetrade-js/node_modules/bip39/index.js","buffer":"/bytetrade-js/node_modules/buffer/index.js","secure-random":"/bytetrade-js/node_modules/secure-random/lib/secure-random.js","uuid":"/bytetrade-js/node_modules/uuid/index.js"}],"/bytetrade-js/dist/ecc/src/PrivateKey.js":[function(require,module,exports){
        (function (Buffer){
            'use strict';

            exports.__esModule = true;

            var _ecurve = require('ecurve');

            var _ecurve2 = _interopRequireDefault(_ecurve);

            var _bigi = require('bigi');

            var _bigi2 = _interopRequireDefault(_bigi);

            var _bs = require('bs58');

            var _hash = require('./hash');

            var _PublicKey = require('./PublicKey');

            var _PublicKey2 = _interopRequireDefault(_PublicKey);

            var _deepEqual = require('deep-equal');

            var _deepEqual2 = _interopRequireDefault(_deepEqual);

            var _assert = require('assert');

            var _assert2 = _interopRequireDefault(_assert);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

            var secp256k1 = (0, _ecurve.getCurveByName)('secp256k1');
            var G = secp256k1.G,
                n = secp256k1.n;

            var PrivateKey = function () {

                /**
                 @private see static functions
                 @param {BigInteger}
                 */
                function PrivateKey(d) {
                    _classCallCheck(this, PrivateKey);

                    this.d = d;
                }

                PrivateKey.fromBuffer = function fromBuffer(buf) {
                    if (!Buffer.isBuffer(buf)) {
                        throw new Error("Expecting paramter to be a Buffer type");
                    }
                    if (32 !== buf.length) {
                        console.log('WARN: Expecting 32 bytes, instead got ' + buf.length + ', stack trace:', new Error().stack);
                    }
                    if (buf.length === 0) {
                        throw new Error("Empty buffer");
                    }
                    return new PrivateKey(_bigi2.default.fromBuffer(buf));
                };

                /** @arg {string} seed - any length string.  This is private, the same seed produces the same private key every time.  */


                PrivateKey.fromSeed = function fromSeed(seed) {
                    // generate_private_key
                    if (!(typeof seed === 'string')) {
                        throw new Error('seed must be of type string');
                    }
                    return PrivateKey.fromBuffer((0, _hash.sha256)(seed));
                };

                /** @return {string} Wallet Import Format (still a secret, Not encrypted) */


                PrivateKey.fromWif = function fromWif(_private_wif) {
                    var private_wif = new Buffer((0, _bs.decode)(_private_wif));
                    var version = private_wif.readUInt8(0);
                    _assert2.default.equal(0x80, version, 'Expected version ' + 0x80 + ', instead got ' + version);
                    // checksum includes the version
                    var private_key = private_wif.slice(0, -4);
                    var checksum = private_wif.slice(-4);
                    var new_checksum = (0, _hash.sha256)(private_key);
                    new_checksum = (0, _hash.sha256)(new_checksum);
                    new_checksum = new_checksum.slice(0, 4);
                    var isEqual = (0, _deepEqual2.default)(checksum, new_checksum); //, 'Invalid checksum'
                    if (!isEqual) {
                        throw new Error("Checksum did not match");
                    }
                    private_key = private_key.slice(1);
                    return PrivateKey.fromBuffer(private_key);
                };

                PrivateKey.prototype.toWif = function toWif() {
                    var private_key = this.toBuffer();
                    // checksum includes the version
                    private_key = Buffer.concat([new Buffer([0x80]), private_key]);
                    var checksum = (0, _hash.sha256)(private_key);
                    checksum = (0, _hash.sha256)(checksum);
                    checksum = checksum.slice(0, 4);
                    var private_wif = Buffer.concat([private_key, checksum]);
                    return (0, _bs.encode)(private_wif);
                };

                /**
                 @return {Point}
                 */


                PrivateKey.prototype.toPublicKeyPoint = function toPublicKeyPoint() {
                    var Q;
                    return Q = secp256k1.G.multiply(this.d);
                };

                PrivateKey.prototype.toPublicKey = function toPublicKey() {
                    if (this.public_key) {
                        return this.public_key;
                    }
                    return this.public_key = _PublicKey2.default.fromPoint(this.toPublicKeyPoint());
                };

                PrivateKey.prototype.toBuffer = function toBuffer() {
                    return this.d.toBuffer(32);
                };

                /** ECIES */


                PrivateKey.prototype.get_shared_secret = function get_shared_secret(public_key) {
                    var legacy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

                    public_key = toPublic(public_key);
                    var KB = public_key.toUncompressed().toBuffer();
                    var KBP = _ecurve.Point.fromAffine(secp256k1, _bigi2.default.fromBuffer(KB.slice(1, 33)), // x
                        _bigi2.default.fromBuffer(KB.slice(33, 65)) // y
                    );
                    var r = this.toBuffer();
                    var P = KBP.multiply(_bigi2.default.fromBuffer(r));
                    var S = P.affineX.toBuffer({ size: 32 });
                    /*
        the input to sha512 must be exactly 32-bytes, to match the c++ implementation
        of get_shared_secret.  Right now S will be shorter if the most significant
        byte(s) is zero.  Pad it back to the full 32-bytes
        */
                    if (!legacy && S.length < 32) {
                        var pad = new Buffer(32 - S.length).fill(0);
                        S = Buffer.concat([pad, S]);
                    }

                    // SHA512 used in ECIES
                    return (0, _hash.sha512)(S);
                };

                // /** ECIES (does not always match the Point.fromAffine version above) */
                // get_shared_secret(public_key){
                //     public_key = toPublic(public_key)
                //     var P = public_key.Q.multiply( this.d );
                //     var S = P.affineX.toBuffer({size: 32});
                //     // ECIES, adds an extra sha512
                //     return sha512(S);
                // }

                /** @throws {Error} - overflow of the key could not be derived */


                PrivateKey.prototype.child = function child(offset) {
                    offset = Buffer.concat([this.toPublicKey().toBuffer(), offset]);
                    offset = (0, _hash.sha256)(offset);
                    var c = _bigi2.default.fromBuffer(offset);

                    if (c.compareTo(n) >= 0) throw new Error("Child offset went out of bounds, try again");

                    var derived = this.d.add(c); //.mod(n)

                    if (derived.signum() === 0) throw new Error("Child offset derived to an invalid key, try again");

                    return new PrivateKey(derived);
                };

                /* <helper_functions> */

                PrivateKey.prototype.toByteBuffer = function toByteBuffer() {
                    var b = new ByteBuffer(ByteBuffer.DEFAULT_CAPACITY, ByteBuffer.LITTLE_ENDIAN);
                    this.appendByteBuffer(b);
                    return b.copy(0, b.offset);
                };

                PrivateKey.fromHex = function fromHex(hex) {
                    return PrivateKey.fromBuffer(new Buffer(hex, 'hex'));
                };

                PrivateKey.prototype.toHex = function toHex() {
                    return this.toBuffer().toString('hex');
                };

                /* </helper_functions> */


                return PrivateKey;
            }();

            exports.default = PrivateKey;


            var toPublic = function toPublic(data) {
                return data == null ? data : data.Q ? data : _PublicKey2.default.fromStringOrThrow(data);
            };
            module.exports = exports['default'];
        }).call(this,require("buffer").Buffer)

    },{"./PublicKey":"/bytetrade-js/dist/ecc/src/PublicKey.js","./hash":"/bytetrade-js/dist/ecc/src/hash.js","assert":"/bytetrade-js/node_modules/assert/assert.js","bigi":"/bytetrade-js/node_modules/bigi/lib/index.js","bs58":"/bytetrade-js/node_modules/bs58/index.js","buffer":"/bytetrade-js/node_modules/buffer/index.js","deep-equal":"/bytetrade-js/node_modules/deep-equal/index.js","ecurve":"/bytetrade-js/node_modules/ecurve/lib/index.js"}],"/bytetrade-js/dist/ecc/src/PublicKey.js":[function(require,module,exports){
        (function (Buffer){
            'use strict';

            exports.__esModule = true;

            var _bigi = require('bigi');

            var _bigi2 = _interopRequireDefault(_bigi);

            var _ecurve = require('ecurve');

            var _bs = require('bs58');

            var _hash = require('./hash');

            var _assert = require('assert');

            var _assert2 = _interopRequireDefault(_assert);

            var _deepEqual = require('deep-equal');

            var _deepEqual2 = _interopRequireDefault(_deepEqual);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

            var secp256k1 = (0, _ecurve.getCurveByName)('secp256k1');
//import {ChainConfig} from 'bitsharesjs-ws';
            var G = secp256k1.G,
                n = secp256k1.n;

            var PublicKey = function () {

                /** @param {Point} public key */
                function PublicKey(Q) {
                    _classCallCheck(this, PublicKey);

                    this.Q = Q;
                }

                PublicKey.fromBinary = function fromBinary(bin) {
                    return PublicKey.fromBuffer(new Buffer(bin, 'binary'));
                };

                PublicKey.fromBuffer = function fromBuffer(buffer) {
                    if (buffer.toString('hex') === '000000000000000000000000000000000000000000000000000000000000000000') return new PublicKey(null);
                    return new PublicKey(_ecurve.Point.decodeFrom(secp256k1, buffer));
                };

                PublicKey.prototype.toBuffer = function toBuffer() {
                    var compressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.Q ? this.Q.compressed : null;

                    if (this.Q === null) return new Buffer('000000000000000000000000000000000000000000000000000000000000000000', 'hex');
                    return this.Q.getEncoded(compressed);
                };

                PublicKey.fromPoint = function fromPoint(point) {
                    return new PublicKey(point);
                };

                PublicKey.prototype.toUncompressed = function toUncompressed() {
                    var buf = this.Q.getEncoded(false);
                    var point = _ecurve.Point.decodeFrom(secp256k1, buf);
                    return PublicKey.fromPoint(point);
                };

                /** bts::blockchain::address (unique but not a full public key) */


                PublicKey.prototype.toBlockchainAddress = function toBlockchainAddress() {
                    var pub_buf = this.toBuffer();
                    var pub_sha = (0, _hash.sha512)(pub_buf);
                    return (0, _hash.ripemd160)(pub_sha);
                };

                /** Alias for {@link toPublicKeyString} */


                PublicKey.prototype.toString = function toString() {
                    var address_prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "BTT";

                    return this.toPublicKeyString(address_prefix);
                };

                /**
                 Full public key
                 {return} string
                 */


                PublicKey.prototype.toPublicKeyString = function toPublicKeyString() {
                    var address_prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "BTT";

                    var pub_buf = this.toBuffer();
                    var checksum = (0, _hash.ripemd160)(pub_buf);
                    var addy = Buffer.concat([pub_buf, checksum.slice(0, 4)]);
                    return address_prefix + (0, _bs.encode)(addy);
                    // return encode(addy);
                };

                /**
                 @arg {string} public_key - like GPHXyz...
                 @arg {string} address_prefix - like GPH
                 @return PublicKey or `null` (if the public_key string is invalid)
                 */


                PublicKey.fromPublicKeyString = function fromPublicKeyString(public_key) {
                    var address_prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "BTT";

                    try {
                        return PublicKey.fromStringOrThrow(public_key, address_prefix);
                    } catch (e) {
                        return null;
                    }
                };

                /**
                 @arg {string} public_key - like GPHXyz...
                 @arg {string} address_prefix - like GPH
                 @throws {Error} if public key is invalid
                 @return PublicKey
                 */


                PublicKey.fromStringOrThrow = function fromStringOrThrow(public_key) {
                    var address_prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "BTT";

                    var prefix = public_key.slice(0, address_prefix.length);
                    _assert2.default.equal(address_prefix, prefix, 'Expecting key to begin with ' + address_prefix + ', instead got ' + prefix);
                    public_key = public_key.slice(address_prefix.length);

                    public_key = new Buffer((0, _bs.decode)(public_key), 'binary');
                    var checksum = public_key.slice(-4);
                    public_key = public_key.slice(0, -4);
                    var new_checksum = (0, _hash.ripemd160)(public_key);
                    new_checksum = new_checksum.slice(0, 4);
                    var isEqual = (0, _deepEqual2.default)(checksum, new_checksum); //, 'Invalid checksum'
                    if (!isEqual) {
                        throw new Error("Checksum did not match");
                    }
                    return PublicKey.fromBuffer(public_key);
                };

                PublicKey.prototype.toAddressString = function toAddressString() {
                    var address_prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "BTT";

                    var pub_buf = this.toBuffer();
                    var pub_sha = (0, _hash.sha512)(pub_buf);
                    var addy = (0, _hash.ripemd160)(pub_sha);
                    var checksum = (0, _hash.ripemd160)(addy);
                    addy = Buffer.concat([addy, checksum.slice(0, 4)]);
                    return address_prefix + (0, _bs.encode)(addy);
                };

                PublicKey.prototype.child = function child(offset) {

                    (0, _assert2.default)(Buffer.isBuffer(offset), "Buffer required: offset");
                    _assert2.default.equal(offset.length, 32, "offset length");

                    offset = Buffer.concat([this.toBuffer(), offset]);
                    offset = (0, _hash.sha256)(offset);

                    var c = _bigi2.default.fromBuffer(offset);

                    if (c.compareTo(n) >= 0) throw new Error("Child offset went out of bounds, try again");

                    var cG = G.multiply(c);
                    var Qprime = this.Q.add(cG);

                    if (secp256k1.isInfinity(Qprime)) throw new Error("Child offset derived to an invalid key, try again");

                    return PublicKey.fromPoint(Qprime);
                };

                /* <HEX> */

                PublicKey.prototype.toByteBuffer = function toByteBuffer() {
                    var b = new ByteBuffer(ByteBuffer.DEFAULT_CAPACITY, ByteBuffer.LITTLE_ENDIAN);
                    this.appendByteBuffer(b);
                    return b.copy(0, b.offset);
                };

                PublicKey.fromHex = function fromHex(hex) {
                    return PublicKey.fromBuffer(new Buffer(hex, 'hex'));
                };

                PublicKey.prototype.toHex = function toHex() {
                    return this.toBuffer().toString('hex');
                };

                PublicKey.fromPublicKeyStringHex = function fromPublicKeyStringHex(hex) {
                    return PublicKey.fromPublicKeyString(new Buffer(hex, 'hex'));
                };

                /* </HEX> */


                return PublicKey;
            }();

            exports.default = PublicKey;
            module.exports = exports['default'];
        }).call(this,require("buffer").Buffer)

    },{"./hash":"/bytetrade-js/dist/ecc/src/hash.js","assert":"/bytetrade-js/node_modules/assert/assert.js","bigi":"/bytetrade-js/node_modules/bigi/lib/index.js","bs58":"/bytetrade-js/node_modules/bs58/index.js","buffer":"/bytetrade-js/node_modules/buffer/index.js","deep-equal":"/bytetrade-js/node_modules/deep-equal/index.js","ecurve":"/bytetrade-js/node_modules/ecurve/lib/index.js"}],"/bytetrade-js/dist/ecc/src/address.js":[function(require,module,exports){
        (function (Buffer){
            'use strict';

            exports.__esModule = true;

            var _assert = require('assert');

            var _assert2 = _interopRequireDefault(_assert);

            var _hash2 = require('./hash');

            var _bs = require('bs58');

            var _deepEqual = require('deep-equal');

            var _deepEqual2 = _interopRequireDefault(_deepEqual);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
//import {ChainConfig} from 'bitsharesjs-ws';


            /** Addresses are shortened non-reversable hashes of a public key.  The full PublicKey is preferred.
             @deprecated
             */
            var Address = function () {
                function Address(addy) {
                    _classCallCheck(this, Address);

                    this.addy = addy;
                }

                Address.fromBuffer = function fromBuffer(buffer) {
                    var _hash = (0, _hash2.sha512)(buffer);
                    var addy = (0, _hash2.ripemd160)(_hash);
                    return new Address(addy);
                };

                Address.fromString = function fromString(string) {
                    var address_prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "BTT";

                    var prefix = string.slice(0, address_prefix.length);
                    _assert2.default.equal(address_prefix, prefix, 'Expecting key to begin with ' + address_prefix + ', instead got ' + prefix);
                    var addy = string.slice(address_prefix.length);
                    addy = new Buffer((0, _bs.decode)(addy), 'binary');
                    var checksum = addy.slice(-4);
                    addy = addy.slice(0, -4);
                    var new_checksum = (0, _hash2.ripemd160)(addy);
                    new_checksum = new_checksum.slice(0, 4);
                    var isEqual = (0, _deepEqual2.default)(checksum, new_checksum); //, 'Invalid checksum'
                    if (!isEqual) {
                        throw new Error("Checksum did not match");
                    }
                    return new Address(addy);
                };

                /** @return Address - Compressed PTS format (by default) */
                Address.fromPublic = function fromPublic(public_key) {
                    var compressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
                    var version = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 56;

                    var sha2 = (0, _hash2.sha256)(public_key.toBuffer(compressed));
                    var rep = (0, _hash2.ripemd160)(sha2);
                    var versionBuffer = new Buffer(1);
                    versionBuffer.writeUInt8(0xFF & version, 0);
                    var addr = Buffer.concat([versionBuffer, rep]);
                    var check = (0, _hash2.sha256)(addr);
                    check = (0, _hash2.sha256)(check);
                    var buffer = Buffer.concat([addr, check.slice(0, 4)]);
                    return new Address((0, _hash2.ripemd160)(buffer));
                };

                Address.prototype.toBuffer = function toBuffer() {
                    return this.addy;
                };

                Address.prototype.toString = function toString() {
                    var address_prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "BTT";

                    var checksum = (0, _hash2.ripemd160)(this.addy);
                    var addy = Buffer.concat([this.addy, checksum.slice(0, 4)]);
                    return address_prefix + (0, _bs.encode)(addy);
                };

                return Address;
            }();

            exports.default = Address;
            module.exports = exports['default'];
        }).call(this,require("buffer").Buffer)

    },{"./hash":"/bytetrade-js/dist/ecc/src/hash.js","assert":"/bytetrade-js/node_modules/assert/assert.js","bs58":"/bytetrade-js/node_modules/bs58/index.js","buffer":"/bytetrade-js/node_modules/buffer/index.js","deep-equal":"/bytetrade-js/node_modules/deep-equal/index.js"}],"/bytetrade-js/dist/ecc/src/aes.js":[function(require,module,exports){
        (function (Buffer){
            "use strict";

            exports.__esModule = true;

            var _aes = require("crypto-js/aes");

            var _aes2 = _interopRequireDefault(_aes);

            var _encHex = require("crypto-js/enc-hex");

            var _encHex2 = _interopRequireDefault(_encHex);

            var _encBase = require("crypto-js/enc-base64");

            var _encBase2 = _interopRequireDefault(_encBase);

            var _assert = require("assert");

            var _assert2 = _interopRequireDefault(_assert);

            var _bytebuffer = require("bytebuffer");

            var _hash2 = require("./hash");

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // https://code.google.com/p/crypto-js


            /** Provides symetric encrypt and decrypt via AES. */
            var Aes = function () {

                /** @private */
                function Aes(iv, key) {
                    _classCallCheck(this, Aes);

                    this.iv = iv, this.key = key;
                }

                /** This is an excellent way to ensure that all references to Aes can not operate anymore (example: a wallet becomes locked).  An application should ensure there is only one Aes object instance for a given secret `seed`. */


                Aes.prototype.clear = function clear() {
                    return this.iv = this.key = undefined;
                };

                /** @arg {string} seed - secret seed may be used to encrypt or decrypt. */


                Aes.fromSeed = function fromSeed(seed) {
                    if (seed === undefined) {
                        throw new Error("seed is required");
                    }
                    var _hash = (0, _hash2.sha512)(seed);
                    _hash = _hash.toString('hex');
                    // DEBUG console.log('... fromSeed _hash',_hash)
                    return Aes.fromSha512(_hash);
                };

                /** @arg {string} hash - A 128 byte hex string, typically one would call {@link fromSeed} instead. */
                Aes.fromSha512 = function fromSha512(hash) {
                    _assert2.default.equal(hash.length, 128, "A Sha512 in HEX should be 128 characters long, instead got " + hash.length);
                    var iv = _encHex2.default.parse(hash.substring(64, 96));
                    var key = _encHex2.default.parse(hash.substring(0, 64));
                    return new Aes(iv, key);
                };

                Aes.fromBuffer = function fromBuffer(buf) {
                    (0, _assert2.default)(Buffer.isBuffer(buf), "Expecting Buffer");
                    _assert2.default.equal(buf.length, 64, "A Sha512 Buffer should be 64 characters long, instead got " + buf.length);
                    return Aes.fromSha512(buf.toString("hex"));
                };
                /**
                 @throws {Error} - "Invalid Key, ..."
                 @arg {PrivateKey} private_key - required and used for decryption
                 @arg {PublicKey} public_key - required and used to calcualte the shared secret
                 @arg {string} [nonce = ""] optional but should always be provided and be unique when re-using the same private/public keys more than once.  This nonce is not a secret.
                 @arg {string|Buffer} message - Encrypted message containing a checksum
                 @return {Buffer}
                 */


                Aes.decrypt_with_checksum = function decrypt_with_checksum(private_key, public_key, nonce, message) {
                    var legacy = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;


                    // Warning: Do not put `nonce = ""` in the arguments, in es6 this will not convert "null" into an emtpy string
                    if (nonce == null) // null or undefined
                        nonce = "";

                    if (!Buffer.isBuffer(message)) {
                        message = new Buffer(message, 'hex');
                    }

                    var S = private_key.get_shared_secret(public_key, legacy);
                    // D E B U G
                    // console.log('decrypt_with_checksum', {
                    //     priv_to_pub: private_key.toPublicKey().toString(),
                    //     pub: public_key.toPublicKeyString(),
                    //     nonce: nonce,
                    //     message: message.length,
                    //     S: S.toString('hex')
                    // })

                    var aes = Aes.fromSeed(Buffer.concat([
                        // A null or empty string nonce will not effect the hash
                        new Buffer("" + nonce), new Buffer(S.toString('hex'))]));

                    var planebuffer = aes.decrypt(message);
                    if (!(planebuffer.length >= 4)) {
                        throw new Error("Invalid key, could not decrypt message(1)");
                    }

                    // DEBUG console.log('... planebuffer',planebuffer)
                    var checksum = planebuffer.slice(0, 4);
                    var plaintext = planebuffer.slice(4);

                    // console.log('... checksum',checksum.toString('hex'))
                    // console.log('... plaintext',plaintext.toString())

                    var new_checksum = (0, _hash2.sha256)(plaintext);
                    new_checksum = new_checksum.slice(0, 4);
                    new_checksum = new_checksum.toString('hex');

                    if (!(checksum.toString('hex') === new_checksum)) {
                        throw new Error("Invalid key, could not decrypt message(2)");
                    }

                    return plaintext;
                };

                /** Identical to {@link decrypt_with_checksum} but used to encrypt.  Should not throw an error.
                 @return {Buffer} message - Encrypted message which includes a checksum
                 */
                Aes.encrypt_with_checksum = function encrypt_with_checksum(private_key, public_key, nonce, message) {

                    // Warning: Do not put `nonce = ""` in the arguments, in es6 this will not convert "null" into an emtpy string

                    if (nonce == null) // null or undefined
                        nonce = "";

                    if (!Buffer.isBuffer(message)) {
                        message = new Buffer(message, 'binary');
                    }

                    var S = private_key.get_shared_secret(public_key);

                    // D E B U G
                    // console.log('encrypt_with_checksum', {
                    //     priv_to_pub: private_key.toPublicKey().toString()
                    //     pub: public_key.toPublicKeyString()
                    //     nonce: nonce
                    //     message: message.length
                    //     S: S.toString('hex')
                    // })

                    var aes = Aes.fromSeed(Buffer.concat([
                        // A null or empty string nonce will not effect the hash
                        new Buffer("" + nonce), new Buffer(S.toString('hex'))]));
                    // DEBUG console.log('... S',S.toString('hex'))
                    var checksum = (0, _hash2.sha256)(message).slice(0, 4);
                    var payload = Buffer.concat([checksum, message]);
                    // DEBUG console.log('... payload',payload.toString())
                    return aes.encrypt(payload);
                };

                /** @private */
                Aes.prototype._decrypt_word_array = function _decrypt_word_array(cipher) {
                    // https://code.google.com/p/crypto-js/#Custom_Key_and_IV
                    // see wallet_records.cpp master_key::decrypt_key
                    return _aes2.default.decrypt({ ciphertext: cipher, salt: null }, this.key, { iv: this.iv });
                };

                /** @private */


                Aes.prototype._encrypt_word_array = function _encrypt_word_array(plaintext) {
                    //https://code.google.com/p/crypto-js/issues/detail?id=85
                    var cipher = _aes2.default.encrypt(plaintext, this.key, { iv: this.iv });
                    return _encBase2.default.parse(cipher.toString());
                };

                /** This method does not use a checksum, the returned data must be validated some other way.
                 @arg {string} ciphertext
                 @return {Buffer} binary
                 */


                Aes.prototype.decrypt = function decrypt(ciphertext) {
                    if (typeof ciphertext === "string") {
                        ciphertext = new Buffer(ciphertext, 'binary');
                    }
                    if (!Buffer.isBuffer(ciphertext)) {
                        throw new Error("buffer required");
                    }
                    (0, _assert2.default)(ciphertext, "Missing cipher text");
                    // hex is the only common format
                    var hex = this.decryptHex(ciphertext.toString('hex'));
                    return new Buffer(hex, 'hex');
                };

                /** This method does not use a checksum, the returned data must be validated some other way.
                 @arg {string} plaintext
                 @return {Buffer} binary
                 */


                Aes.prototype.encrypt = function encrypt(plaintext) {
                    if (typeof plaintext === "string") {
                        plaintext = new Buffer(plaintext, 'binary');
                    }
                    if (!Buffer.isBuffer(plaintext)) {
                        throw new Error("buffer required");
                    }
                    //assert plaintext, "Missing plain text"
                    // hex is the only common format
                    var hex = this.encryptHex(plaintext.toString('hex'));
                    return new Buffer(hex, 'hex');
                };

                /** This method does not use a checksum, the returned data must be validated some other way.
                 @arg {string|Buffer} plaintext
                 @return {string} hex
                 */


                Aes.prototype.encryptToHex = function encryptToHex(plaintext) {
                    if (typeof plaintext === "string") {
                        plaintext = new Buffer(plaintext, 'binary');
                    }
                    if (!Buffer.isBuffer(plaintext)) {
                        throw new Error("buffer required");
                    }
                    //assert plaintext, "Missing plain text"
                    // hex is the only common format
                    return this.encryptHex(plaintext.toString('hex'));
                };

                /** This method does not use a checksum, the returned data must be validated some other way.
                 @arg {string} cipher - hex
                 @return {string} binary (could easily be readable text)
                 */


                Aes.prototype.decryptHex = function decryptHex(cipher) {
                    (0, _assert2.default)(cipher, "Missing cipher text");
                    // Convert data into word arrays (used by Crypto)
                    var cipher_array = _encHex2.default.parse(cipher);
                    var plainwords = this._decrypt_word_array(cipher_array);
                    return _encHex2.default.stringify(plainwords);
                };

                /** This method does not use a checksum, the returned data must be validated some other way.
                 @arg {string} cipher - hex
                 @return {Buffer} encoded as specified by the parameter
                 */


                Aes.prototype.decryptHexToBuffer = function decryptHexToBuffer(cipher) {
                    (0, _assert2.default)(cipher, "Missing cipher text");
                    // Convert data into word arrays (used by Crypto)
                    var cipher_array = _encHex2.default.parse(cipher);
                    var plainwords = this._decrypt_word_array(cipher_array);
                    var plainhex = _encHex2.default.stringify(plainwords);
                    return new Buffer(plainhex, 'hex');
                };

                /** This method does not use a checksum, the returned data must be validated some other way.
                 @arg {string} cipher - hex
                 @arg {string} [encoding = 'binary'] - a valid Buffer encoding
                 @return {String} encoded as specified by the parameter
                 */


                Aes.prototype.decryptHexToText = function decryptHexToText(cipher) {
                    var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'binary';

                    return this.decryptHexToBuffer(cipher).toString(encoding);
                };

                /** This method does not use a checksum, the returned data must be validated some other way.
                 @arg {string} plainhex - hex format
                 @return {String} hex
                 */


                Aes.prototype.encryptHex = function encryptHex(plainhex) {
                    var plain_array = _encHex2.default.parse(plainhex);
                    var cipher_array = this._encrypt_word_array(plain_array);
                    return _encHex2.default.stringify(cipher_array);
                };

                return Aes;
            }();

            exports.default = Aes;
            module.exports = exports["default"];
        }).call(this,require("buffer").Buffer)

    },{"./hash":"/bytetrade-js/dist/ecc/src/hash.js","assert":"/bytetrade-js/node_modules/assert/assert.js","buffer":"/bytetrade-js/node_modules/buffer/index.js","bytebuffer":"/bytetrade-js/node_modules/bytebuffer/dist/bytebuffer.js","crypto-js/aes":"/bytetrade-js/node_modules/crypto-js/aes.js","crypto-js/enc-base64":"/bytetrade-js/node_modules/crypto-js/enc-base64.js","crypto-js/enc-hex":"/bytetrade-js/node_modules/crypto-js/enc-hex.js"}],"/bytetrade-js/dist/ecc/src/ecdsa.js":[function(require,module,exports){
        (function (Buffer){
            'use strict';

            exports.__esModule = true;
            exports.verifyRaw = exports.verify = exports.sign = exports.recoverPubKey = exports.deterministicGenerateK = exports.calcPubKeyRecoveryParam = undefined;

            var _assert = require('assert');

            var _assert2 = _interopRequireDefault(_assert);

            var _hash = require('./hash');

            var _enforce_types = require('./enforce_types');

            var _enforce_types2 = _interopRequireDefault(_enforce_types);

            var _bigi = require('bigi');

            var _bigi2 = _interopRequireDefault(_bigi);

            var _ecsignature = require('./ecsignature');

            var _ecsignature2 = _interopRequireDefault(_ecsignature);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// https://tools.ietf.org/html/rfc6979#section-3.2
// from github.com/bitcoinjs/bitcoinjs-lib from github.com/cryptocoinjs/ecdsa
            function deterministicGenerateK(curve, hash, d, checkSig, nonce) {

                (0, _enforce_types2.default)('Buffer', hash);
                (0, _enforce_types2.default)(_bigi2.default, d);

                if (nonce) {
                    hash = (0, _hash.sha256)(Buffer.concat([hash, new Buffer(nonce)]));
                }

                // sanity check
                _assert2.default.equal(hash.length, 32, 'Hash must be 256 bit');

                var x = d.toBuffer(32);
                var k = new Buffer(32);
                var v = new Buffer(32);

                // Step B
                v.fill(1);

                // Step C
                k.fill(0);

                // Step D
                k = (0, _hash.HmacSHA256)(Buffer.concat([v, new Buffer([0]), x, hash]), k);

                // Step E
                v = (0, _hash.HmacSHA256)(v, k);

                // Step F
                k = (0, _hash.HmacSHA256)(Buffer.concat([v, new Buffer([1]), x, hash]), k);

                // Step G
                v = (0, _hash.HmacSHA256)(v, k);

                // Step H1/H2a, ignored as tlen === qlen (256 bit)
                // Step H2b
                v = (0, _hash.HmacSHA256)(v, k);

                var T = _bigi2.default.fromBuffer(v);

                // Step H3, repeat until T is within the interval [1, n - 1]
                while (T.signum() <= 0 || T.compareTo(curve.n) >= 0 || !checkSig(T)) {
                    k = (0, _hash.HmacSHA256)(Buffer.concat([v, new Buffer([0])]), k);
                    v = (0, _hash.HmacSHA256)(v, k);

                    // Step H1/H2a, again, ignored as tlen === qlen (256 bit)
                    // Step H2b again
                    v = (0, _hash.HmacSHA256)(v, k);

                    T = _bigi2.default.fromBuffer(v);
                }

                return T;
            }

            function sign(curve, hash, d, nonce) {

                var e = _bigi2.default.fromBuffer(hash);
                var n = curve.n;
                var G = curve.G;

                var r, s;
                var k = deterministicGenerateK(curve, hash, d, function (k) {
                    // find canonically valid signature
                    var Q = G.multiply(k);

                    if (curve.isInfinity(Q)) return false;

                    r = Q.affineX.mod(n);
                    if (r.signum() === 0) return false;

                    s = k.modInverse(n).multiply(e.add(d.multiply(r))).mod(n);
                    if (s.signum() === 0) return false;

                    return true;
                }, nonce);

                var N_OVER_TWO = n.shiftRight(1);

                // enforce low S values, see bip62: 'low s values in signatures'
                if (s.compareTo(N_OVER_TWO) > 0) {
                    s = n.subtract(s);
                }

                return new _ecsignature2.default(r, s);
            }

            function verifyRaw(curve, e, signature, Q) {
                var n = curve.n;
                var G = curve.G;

                var r = signature.r;
                var s = signature.s;

                // 1.4.1 Enforce r and s are both integers in the interval [1, n − 1]
                if (r.signum() <= 0 || r.compareTo(n) >= 0) return false;
                if (s.signum() <= 0 || s.compareTo(n) >= 0) return false;

                // c = s^-1 mod n
                var c = s.modInverse(n);

                // 1.4.4 Compute u1 = es^−1 mod n
                //               u2 = rs^−1 mod n
                var u1 = e.multiply(c).mod(n);
                var u2 = r.multiply(c).mod(n);

                // 1.4.5 Compute R = (xR, yR) = u1G + u2Q
                var R = G.multiplyTwo(u1, Q, u2);

                // 1.4.5 (cont.) Enforce R is not at infinity
                if (curve.isInfinity(R)) return false;

                // 1.4.6 Convert the field element R.x to an integer
                var xR = R.affineX;

                // 1.4.7 Set v = xR mod n
                var v = xR.mod(n);

                // 1.4.8 If v = r, output "valid", and if v != r, output "invalid"
                return v.equals(r);
            }

            function verify(curve, hash, signature, Q) {
                // 1.4.2 H = Hash(M), already done by the user
                // 1.4.3 e = H
                var e = _bigi2.default.fromBuffer(hash);
                return verifyRaw(curve, e, signature, Q);
            }

            /**
             * Recover a public key from a signature.
             *
             * See SEC 1: Elliptic Curve Cryptography, section 4.1.6, "Public
             * Key Recovery Operation".
             *
             * http://www.secg.org/download/aid-780/sec1-v2.pdf
             */
            function recoverPubKey(curve, e, signature, i) {
                _assert2.default.strictEqual(i & 3, i, 'Recovery param is more than two bits');

                var n = curve.n;
                var G = curve.G;

                var r = signature.r;
                var s = signature.s;

                (0, _assert2.default)(r.signum() > 0 && r.compareTo(n) < 0, 'Invalid r value');
                (0, _assert2.default)(s.signum() > 0 && s.compareTo(n) < 0, 'Invalid s value');

                // A set LSB signifies that the y-coordinate is odd
                var isYOdd = i & 1;

                // The more significant bit specifies whether we should use the
                // first or second candidate key.
                var isSecondKey = i >> 1;

                // 1.1 Let x = r + jn
                var x = isSecondKey ? r.add(n) : r;
                var R = curve.pointFromX(isYOdd, x);

                // 1.4 Check that nR is at infinity
                var nR = R.multiply(n);
                (0, _assert2.default)(curve.isInfinity(nR), 'nR is not a valid curve point');

                // Compute -e from e
                var eNeg = e.negate().mod(n);

                // 1.6.1 Compute Q = r^-1 (sR -  eG)
                //               Q = r^-1 (sR + -eG)
                var rInv = r.modInverse(n);

                var Q = R.multiplyTwo(s, G, eNeg).multiply(rInv);
                curve.validate(Q);

                return Q;
            }

            /**
             * Calculate pubkey extraction parameter.
             *
             * When extracting a pubkey from a signature, we have to
             * distinguish four different cases. Rather than putting this
             * burden on the verifier, Bitcoin includes a 2-bit value with the
             * signature.
             *
             * This function simply tries all four cases and returns the value
             * that resulted in a successful pubkey recovery.
             */
            function calcPubKeyRecoveryParam(curve, e, signature, Q) {
                for (var i = 0; i < 4; i++) {
                    var Qprime = recoverPubKey(curve, e, signature, i);

                    // 1.6.2 Verify Q
                    if (Qprime.equals(Q)) {
                        return i;
                    }
                }

                throw new Error('Unable to find valid recovery factor');
            }

            exports.calcPubKeyRecoveryParam = calcPubKeyRecoveryParam;
            exports.deterministicGenerateK = deterministicGenerateK;
            exports.recoverPubKey = recoverPubKey;
            exports.sign = sign;
            exports.verify = verify;
            exports.verifyRaw = verifyRaw;
        }).call(this,require("buffer").Buffer)

    },{"./ecsignature":"/bytetrade-js/dist/ecc/src/ecsignature.js","./enforce_types":"/bytetrade-js/dist/ecc/src/enforce_types.js","./hash":"/bytetrade-js/dist/ecc/src/hash.js","assert":"/bytetrade-js/node_modules/assert/assert.js","bigi":"/bytetrade-js/node_modules/bigi/lib/index.js","buffer":"/bytetrade-js/node_modules/buffer/index.js"}],"/bytetrade-js/dist/ecc/src/ecsignature.js":[function(require,module,exports){
        (function (Buffer){
            'use strict';

            exports.__esModule = true;

            var _assert = require('assert');

            var _assert2 = _interopRequireDefault(_assert);

            var _enforce_types = require('./enforce_types');

            var _enforce_types2 = _interopRequireDefault(_enforce_types);

            var _bigi = require('bigi');

            var _bigi2 = _interopRequireDefault(_bigi);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// from https://github.com/bitcoinjs/bitcoinjs-lib
            function ECSignature(r, s) {
                (0, _enforce_types2.default)(_bigi2.default, r);
                (0, _enforce_types2.default)(_bigi2.default, s);

                this.r = r;
                this.s = s;
            }

// Import operations
            ECSignature.parseCompact = function (buffer) {
                _assert2.default.equal(buffer.length, 65, 'Invalid signature length');
                var i = buffer.readUInt8(0) - 27;

                // At most 3 bits
                _assert2.default.equal(i, i & 7, 'Invalid signature parameter');
                var compressed = !!(i & 4);

                // Recovery param only
                i = i & 3;

                var r = _bigi2.default.fromBuffer(buffer.slice(1, 33));
                var s = _bigi2.default.fromBuffer(buffer.slice(33));

                return {
                    compressed: compressed,
                    i: i,
                    signature: new ECSignature(r, s)
                };
            };

            ECSignature.fromDER = function (buffer) {
                _assert2.default.equal(buffer.readUInt8(0), 0x30, 'Not a DER sequence');
                _assert2.default.equal(buffer.readUInt8(1), buffer.length - 2, 'Invalid sequence length');
                _assert2.default.equal(buffer.readUInt8(2), 0x02, 'Expected a DER integer');

                var rLen = buffer.readUInt8(3);
                (0, _assert2.default)(rLen > 0, 'R length is zero');

                var offset = 4 + rLen;
                _assert2.default.equal(buffer.readUInt8(offset), 0x02, 'Expected a DER integer (2)');

                var sLen = buffer.readUInt8(offset + 1);
                (0, _assert2.default)(sLen > 0, 'S length is zero');

                var rB = buffer.slice(4, offset);
                var sB = buffer.slice(offset + 2);
                offset += 2 + sLen;

                if (rLen > 1 && rB.readUInt8(0) === 0x00) {
                    (0, _assert2.default)(rB.readUInt8(1) & 0x80, 'R value excessively padded');
                }

                if (sLen > 1 && sB.readUInt8(0) === 0x00) {
                    (0, _assert2.default)(sB.readUInt8(1) & 0x80, 'S value excessively padded');
                }

                _assert2.default.equal(offset, buffer.length, 'Invalid DER encoding');
                var r = _bigi2.default.fromDERInteger(rB);
                var s = _bigi2.default.fromDERInteger(sB);

                (0, _assert2.default)(r.signum() >= 0, 'R value is negative');
                (0, _assert2.default)(s.signum() >= 0, 'S value is negative');

                return new ECSignature(r, s);
            };

// FIXME: 0x00, 0x04, 0x80 are SIGHASH_* boundary constants, importing Transaction causes a circular dependency
            ECSignature.parseScriptSignature = function (buffer) {
                var hashType = buffer.readUInt8(buffer.length - 1);
                var hashTypeMod = hashType & ~0x80;

                (0, _assert2.default)(hashTypeMod > 0x00 && hashTypeMod < 0x04, 'Invalid hashType');

                return {
                    signature: ECSignature.fromDER(buffer.slice(0, -1)),
                    hashType: hashType
                };
            };

// Export operations
            ECSignature.prototype.toCompact = function (i, compressed) {
                if (compressed) i += 4;
                i += 27;

                var buffer = new Buffer(65);
                buffer.writeUInt8(i, 0);

                this.r.toBuffer(32).copy(buffer, 1);
                this.s.toBuffer(32).copy(buffer, 33);

                return buffer;
            };

            ECSignature.prototype.toDER = function () {
                var rBa = this.r.toDERInteger();
                var sBa = this.s.toDERInteger();

                var sequence = [];

                // INTEGER
                sequence.push(0x02, rBa.length);
                sequence = sequence.concat(rBa);

                // INTEGER
                sequence.push(0x02, sBa.length);
                sequence = sequence.concat(sBa);

                // SEQUENCE
                sequence.unshift(0x30, sequence.length);

                return new Buffer(sequence);
            };

            ECSignature.prototype.toScriptSignature = function (hashType) {
                var hashTypeBuffer = new Buffer(1);
                hashTypeBuffer.writeUInt8(hashType, 0);

                return Buffer.concat([this.toDER(), hashTypeBuffer]);
            };

            exports.default = ECSignature;
            module.exports = exports['default'];
        }).call(this,require("buffer").Buffer)

    },{"./enforce_types":"/bytetrade-js/dist/ecc/src/enforce_types.js","assert":"/bytetrade-js/node_modules/assert/assert.js","bigi":"/bytetrade-js/node_modules/bigi/lib/index.js","buffer":"/bytetrade-js/node_modules/buffer/index.js"}],"/bytetrade-js/dist/ecc/src/enforce_types.js":[function(require,module,exports){
        (function (Buffer){
            'use strict';

            exports.__esModule = true;
            exports.default = enforce;
            function enforce(type, value) {
                // Copied from https://github.com/bitcoinjs/bitcoinjs-lib
                switch (type) {
                    case 'Array':
                    {
                        if (Array.isArray(value)) return;
                        break;
                    }

                    case 'Boolean':
                    {
                        if (typeof value === 'boolean') return;
                        break;
                    }

                    case 'Buffer':
                    {
                        if (Buffer.isBuffer(value)) return;
                        break;
                    }

                    case 'Number':
                    {
                        if (typeof value === 'number') return;
                        break;
                    }

                    case 'String':
                    {
                        if (typeof value === 'string') return;
                        break;
                    }

                    default:
                    {
                        if (getName(value.constructor) === getName(type)) return;
                    }
                }

                throw new TypeError('Expected ' + (getName(type) || type) + ', got ' + value);
            }

            function getName(fn) {
                // Why not fn.name: https://kangax.github.io/compat-table/es6/#function_name_property
                var match = fn.toString().match(/function (.*?)\(/);
                return match ? match[1] : null;
            }
            module.exports = exports['default'];
        }).call(this,{"isBuffer":require("../../../node_modules/is-buffer/index.js")})

    },{"../../../node_modules/is-buffer/index.js":"/bytetrade-js/node_modules/is-buffer/index.js"}],"/bytetrade-js/dist/ecc/src/hash.js":[function(require,module,exports){
        "use strict";

        exports.__esModule = true;
        exports.ripemd160 = exports.HmacSHA256 = exports.sha512 = exports.sha256 = exports.sha1 = undefined;

        var _createHash = require("create-hash");

        var _createHash2 = _interopRequireDefault(_createHash);

        var _createHmac = require("create-hmac");

        var _createHmac2 = _interopRequireDefault(_createHmac);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        /** @arg {string|Buffer} data
         @arg {string} [digest = null] - 'hex', 'binary' or 'base64'
         @return {string|Buffer} - Buffer when digest is null, or string
         */
        function sha1(data, encoding) {
            return (0, _createHash2.default)('sha1').update(data).digest(encoding);
        }

        /** @arg {string|Buffer} data
         @arg {string} [digest = null] - 'hex', 'binary' or 'base64'
         @return {string|Buffer} - Buffer when digest is null, or string
         */
        function sha256(data, encoding) {
            return (0, _createHash2.default)('sha256').update(data).digest(encoding);
        }

        /** @arg {string|Buffer} data
         @arg {string} [digest = null] - 'hex', 'binary' or 'base64'
         @return {string|Buffer} - Buffer when digest is null, or string
         */
        function sha512(data, encoding) {
            return (0, _createHash2.default)('sha512').update(data).digest(encoding);
        }

        function HmacSHA256(buffer, secret) {
            return (0, _createHmac2.default)('sha256', secret).update(buffer).digest();
        }

        function ripemd160(data) {
            return (0, _createHash2.default)('rmd160').update(data).digest();
        }

// function hash160(buffer) {
//   return ripemd160(sha256(buffer))
// }
//
// function hash256(buffer) {
//   return sha256(sha256(buffer))
// }

//
// function HmacSHA512(buffer, secret) {
//   return crypto.createHmac('sha512', secret).update(buffer).digest()
// }

        exports.sha1 = sha1;
        exports.sha256 = sha256;
        exports.sha512 = sha512;
        exports.HmacSHA256 = HmacSHA256;
        exports.ripemd160 = ripemd160;
    },{"create-hash":"/bytetrade-js/node_modules/create-hash/browser.js","create-hmac":"/bytetrade-js/node_modules/create-hmac/browser.js"}],"/bytetrade-js/dist/ecc/src/signature.js":[function(require,module,exports){
        (function (Buffer){
            'use strict';

            exports.__esModule = true;

            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

            var _ecdsa = require('./ecdsa');

            var _hash2 = require('./hash');

            var _ecurve = require('ecurve');

            var _assert = require('assert');

            var _assert2 = _interopRequireDefault(_assert);

            var _bigi = require('bigi');

            var _bigi2 = _interopRequireDefault(_bigi);

            var _PublicKey = require('./PublicKey');

            var _PublicKey2 = _interopRequireDefault(_PublicKey);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

            var secp256k1 = (0, _ecurve.getCurveByName)('secp256k1');

            var Signature = function () {
                function Signature(r1, s1, i1) {
                    _classCallCheck(this, Signature);

                    this.r = r1;
                    this.s = s1;
                    this.i = i1;
                    _assert2.default.equal(this.r != null, true, 'Missing parameter');
                    _assert2.default.equal(this.s != null, true, 'Missing parameter');
                    _assert2.default.equal(this.i != null, true, 'Missing parameter');
                }

                Signature.fromBuffer = function fromBuffer(buf) {
                    var i, r, s;
                    _assert2.default.equal(buf.length, 65, 'Invalid signature length');
                    i = buf.readUInt8(0);
                    _assert2.default.equal(i - 27, i - 27 & 7, 'Invalid signature parameter');
                    r = _bigi2.default.fromBuffer(buf.slice(1, 33));
                    s = _bigi2.default.fromBuffer(buf.slice(33));
                    return new Signature(r, s, i);
                };

                Signature.prototype.toBuffer = function toBuffer() {
                    var buf;
                    buf = new Buffer(65);
                    buf.writeUInt8(this.i, 0);
                    this.r.toBuffer(32).copy(buf, 1);
                    this.s.toBuffer(32).copy(buf, 33);
                    return buf;
                };

                Signature.prototype.recoverPublicKeyFromBuffer = function recoverPublicKeyFromBuffer(buffer) {
                    return this.recoverPublicKey((0, _hash2.sha256)(buffer));
                };

                /**
                 @return {PublicKey}
                 */
                Signature.prototype.recoverPublicKey = function recoverPublicKey(sha256_buffer) {
                    var Q = void 0,
                        e = void 0,
                        i = void 0;
                    e = _bigi2.default.fromBuffer(sha256_buffer);
                    i = this.i;
                    i -= 27;
                    i = i & 3;
                    Q = (0, _ecdsa.recoverPubKey)(secp256k1, e, this, i);
                    return _PublicKey2.default.fromPoint(Q);
                };

                /**
                 @param {Buffer} buf
                 @param {PrivateKey} private_key
                 @return {Signature}
                 */
                Signature.signBuffer = function signBuffer(buf, private_key) {
                    var _hash = (0, _hash2.sha256)(buf);
                    return Signature.signBufferSha256(_hash, private_key);
                };

                /** Sign a buffer of exactally 32 bytes in size (sha256(text))
                 @param {Buffer} buf - 32 bytes binary
                 @param {PrivateKey} private_key
                 @return {Signature}
                 */


                Signature.signBufferSha256 = function signBufferSha256(buf_sha256, private_key) {
                    if (buf_sha256.length !== 32 || !Buffer.isBuffer(buf_sha256)) throw new Error("buf_sha256: 32 byte buffer requred");
                    var der, e, ecsignature, i, lenR, lenS, nonce;
                    i = null;
                    nonce = 0;
                    e = _bigi2.default.fromBuffer(buf_sha256);
                    while (true) {
                        ecsignature = (0, _ecdsa.sign)(secp256k1, buf_sha256, private_key.d, nonce++);
                        der = ecsignature.toDER();
                        lenR = der[3];
                        lenS = der[5 + lenR];
                        if (lenR === 32 && lenS === 32) {
                            i = (0, _ecdsa.calcPubKeyRecoveryParam)(secp256k1, e, ecsignature, private_key.toPublicKey().Q);
                            i += 4; // compressed
                            i += 27; // compact  //  24 or 27 :( forcing odd-y 2nd key candidate)
                            break;
                        }
                        if (nonce % 10 === 0) {
                            console.log("WARN: " + nonce + " attempts to find canonical signature");
                        }
                    }
                    return new Signature(ecsignature.r, ecsignature.s, i);
                };

                Signature.sign = function sign(string, private_key) {
                    return Signature.signBuffer(new Buffer(string), private_key);
                };

                Signature.createSign = function createSign(object, private_key) {
                    if (!object || (typeof object === 'undefined' ? 'undefined' : _typeof(object)) != 'object') {
                        return "";
                    }
                    var querystring = Object.keys(object).filter(function (key) {
                        return object[key];
                    }).sort().map(function (key) {
                        return key + '=' + object[key];
                    }).join("&");
                    return this.sign(querystring, private_key).toHex();
                };

                /**
                 @param {Buffer} un-hashed
                 @param {./PublicKey}
                 @return {boolean}
                 */


                Signature.prototype.verifyBuffer = function verifyBuffer(buf, public_key) {
                    var _hash = (0, _hash2.sha256)(buf);
                    return this.verifyHash(_hash, public_key);
                };

                Signature.prototype.verifyHash = function verifyHash(hash, public_key) {
                    _assert2.default.equal(hash.length, 32, "A SHA 256 should be 32 bytes long, instead got " + hash.length);
                    return (0, _ecdsa.verify)(secp256k1, hash, {
                        r: this.r,
                        s: this.s
                    }, public_key.Q);
                };

                /* <HEX> */

                Signature.prototype.toByteBuffer = function toByteBuffer() {
                    var b;
                    b = new ByteBuffer(ByteBuffer.DEFAULT_CAPACITY, ByteBuffer.LITTLE_ENDIAN);
                    this.appendByteBuffer(b);
                    return b.copy(0, b.offset);
                };

                Signature.fromHex = function fromHex(hex) {
                    return Signature.fromBuffer(new Buffer(hex, "hex"));
                };

                Signature.prototype.toHex = function toHex() {
                    return this.toBuffer().toString("hex");
                };

                Signature.signHex = function signHex(hex, private_key) {
                    var buf;
                    buf = new Buffer(hex, 'hex');
                    return Signature.signBuffer(buf, private_key);
                };

                Signature.prototype.verifyHex = function verifyHex(hex, public_key) {
                    var buf;
                    buf = new Buffer(hex, 'hex');
                    return this.verifyBuffer(buf, public_key);
                };

                return Signature;
            }();

            exports.default = Signature;
            module.exports = exports['default'];
        }).call(this,require("buffer").Buffer)

    },{"./PublicKey":"/bytetrade-js/dist/ecc/src/PublicKey.js","./ecdsa":"/bytetrade-js/dist/ecc/src/ecdsa.js","./hash":"/bytetrade-js/dist/ecc/src/hash.js","assert":"/bytetrade-js/node_modules/assert/assert.js","bigi":"/bytetrade-js/node_modules/bigi/lib/index.js","buffer":"/bytetrade-js/node_modules/buffer/index.js","ecurve":"/bytetrade-js/node_modules/ecurve/lib/index.js"}],"/bytetrade-js/dist/serializer/index.js":[function(require,module,exports){
        "use strict";

        exports.__esModule = true;
        exports.SerializerValidation = exports.template = exports.ops = exports.types = exports.fp = exports.Serializer = undefined;

        var _serializer = require("./src/serializer");

        var _serializer2 = _interopRequireDefault(_serializer);

        var _FastParser = require("./src/FastParser");

        var _FastParser2 = _interopRequireDefault(_FastParser);

        var _types = require("./src/types");

        var _types2 = _interopRequireDefault(_types);

        var _operations = require("./src/operations");

        var ops = _interopRequireWildcard(_operations);

        var _template = require("./src/template");

        var _template2 = _interopRequireDefault(_template);

        var _SerializerValidation = require("./src/SerializerValidation");

        var _SerializerValidation2 = _interopRequireDefault(_SerializerValidation);

        function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        exports.Serializer = _serializer2.default;
        exports.fp = _FastParser2.default;
        exports.types = _types2.default;
        exports.ops = ops;
        exports.template = _template2.default;
        exports.SerializerValidation = _SerializerValidation2.default;
    },{"./src/FastParser":"/bytetrade-js/dist/serializer/src/FastParser.js","./src/SerializerValidation":"/bytetrade-js/dist/serializer/src/SerializerValidation.js","./src/operations":"/bytetrade-js/dist/serializer/src/operations.js","./src/serializer":"/bytetrade-js/dist/serializer/src/serializer.js","./src/template":"/bytetrade-js/dist/serializer/src/template.js","./src/types":"/bytetrade-js/dist/serializer/src/types.js"}],"/bytetrade-js/dist/serializer/src/FastParser.js":[function(require,module,exports){
        (function (Buffer){
            'use strict';

            exports.__esModule = true;

            var _PublicKey = require('../../ecc/src/PublicKey');

            var _PublicKey2 = _interopRequireDefault(_PublicKey);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

            var FastParser = function () {
                function FastParser() {
                    _classCallCheck(this, FastParser);
                }

                FastParser.fixed_data = function fixed_data(b, len, buffer) {
                    if (!b) {
                        return;
                    }
                    if (buffer) {
                        var data = buffer.slice(0, len).toString('binary');
                        b.append(data, 'binary');
                        while (len-- > data.length) {
                            b.writeUint8(0);
                        }
                    } else {
                        var b_copy = b.copy(b.offset, b.offset + len);
                        b.skip(len);
                        return new Buffer(b_copy.toBinary(), 'binary');
                    }
                };

                FastParser.public_key = function public_key(b, _public_key) {
                    if (!b) {
                        return;
                    }
                    if (_public_key) {
                        var buffer = _public_key.toBuffer();
                        b.append(buffer.toString('binary'), 'binary');
                        return;
                    } else {
                        buffer = FastParser.fixed_data(b, 33);
                        return _PublicKey2.default.fromBuffer(buffer);
                    }
                };

                FastParser.ripemd160 = function ripemd160(b, _ripemd) {
                    if (!b) {
                        return;
                    }
                    if (_ripemd) {
                        FastParser.fixed_data(b, 20, _ripemd);
                        return;
                    } else {
                        return FastParser.fixed_data(b, 20);
                    }
                };

                FastParser.time_point_sec = function time_point_sec(b, epoch) {
                    if (epoch) {
                        epoch = Math.ceil(epoch / 1000);
                        b.writeInt32(epoch);
                        return;
                    } else {
                        epoch = b.readInt32(); // fc::time_point_sec
                        return new Date(epoch * 1000);
                    }
                };

                return FastParser;
            }();

            exports.default = FastParser;
            module.exports = exports['default'];
        }).call(this,require("buffer").Buffer)

    },{"../../ecc/src/PublicKey":"/bytetrade-js/dist/ecc/src/PublicKey.js","buffer":"/bytetrade-js/node_modules/buffer/index.js"}],"/bytetrade-js/dist/serializer/src/SerializerValidation.js":[function(require,module,exports){
        'use strict';

        exports.__esModule = true;

        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

        var _bytebuffer = require('bytebuffer');

        var _ChainTypes = require('../../chain/src/ChainTypes');

        var _ChainTypes2 = _interopRequireDefault(_ChainTypes);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        var MAX_SAFE_INT = 9007199254740991;
        var MIN_SAFE_INT = -9007199254740991;
        var MAX_SAFE_LONG = 18446744073709551616;
        var MAX_SAFE_LONG = -18446744073709551616;
        /**
         Most validations are skipped and the value returned unchanged when an empty string, null, or undefined is encountered (except "required").

         Validations support a string format for dealing with large numbers.
         */
        var _my = {

            is_empty: function is_empty(value) {
                return value === null || value === undefined;
            },

            required: function required(value) {
                var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                if (this.is_empty(value)) {
                    throw new Error('value required ' + field_name + ' ' + value);
                }
                return value;
            },
            require_long: function require_long(value) {
                var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                if (!_bytebuffer.Long.isLong(value)) {
                    throw new Error('Long value required ' + field_name + ' ' + value);
                }
                return value;
            },
            string: function string(value) {
                if (this.is_empty(value)) {
                    return value;
                }
                if (typeof value !== "string") {
                    throw new Error('string required: ' + value);
                }
                return value;
            },
            number: function number(value) {
                if (this.is_empty(value)) {
                    return value;
                }
                if (typeof value !== "number") {
                    throw new Error('number required: ' + value);
                }
                return value;
            },
            whole_number: function whole_number(value) {
                var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                if (this.is_empty(value)) {
                    return value;
                }
                if (/\./.test(value)) {
                    throw new Error('whole number required ' + field_name + ' ' + value);
                }
                return value;
            },
            unsigned: function unsigned(value) {
                var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                if (this.is_empty(value)) {
                    return value;
                }
                if (/-/.test(value)) {
                    throw new Error('unsigned required ' + field_name + ' ' + value);
                }
                return value;
            },


            is_digits: function is_digits(value) {
                if (typeof value === "numeric") {
                    return true;
                }
                return (/^[0-9]+$/.test(value)
                );
            },

            to_number: function to_number(value) {
                var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                if (this.is_empty(value)) {
                    return value;
                }
                this.no_overflow53(value, field_name);
                var int_value = function () {
                    if (typeof value === "number") {
                        return value;
                    } else {
                        return parseInt(value);
                    }
                }();
                return int_value;
            },

            to_long: function to_long(value) {
                var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                if (this.is_empty(value)) {
                    return value;
                }
                if (_bytebuffer.Long.isLong(value)) {
                    return value;
                }

                // this.no_overflow64(value, field_name);
                if (typeof value === "number") {
                    value = "" + value;
                }
                return _bytebuffer.Long.fromString(value);
            },
            to_string: function to_string(value) {
                var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                if (this.is_empty(value)) {
                    return value;
                }
                if (typeof value === "string") {
                    return value;
                }
                if (typeof value === "number") {
                    this.no_overflow53(value, field_name);
                    return "" + value;
                }
                if (_bytebuffer.Long.isLong(value)) {
                    return value.toString();
                }
                throw 'unsupported type ' + field_name + ': (' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)) + ') ' + value;
            },
            require_test: function require_test(regex, value) {
                var field_name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";

                if (this.is_empty(value)) {
                    return value;
                }
                if (!regex.test(value)) {
                    throw new Error('unmatched ' + regex + ' ' + field_name + ' ' + value);
                }
                return value;
            },


            require_match: function require_match(regex, value) {
                var field_name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";

                if (this.is_empty(value)) {
                    return value;
                }
                var match = value.match(regex);
                if (match === null) {
                    throw new Error('unmatched ' + regex + ' ' + field_name + ' ' + value);
                }
                return match;
            },

            require_object_id: function require_object_id(value, field_name) {
                return require_match(/^([0-9]+)\.([0-9]+)\.([0-9]+)$/, value, field_name);
            },

            // Does not support over 53 bits
            require_range: function require_range(min, max, value) {
                var field_name = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";

                if (this.is_empty(value)) {
                    return value;
                }
                var number = this.to_number(value);
                if (value < min || value > max) {
                    throw new Error('out of range ' + value + ' ' + field_name + ' ' + value);
                }
                return value;
            },


            require_object_type: function require_object_type() {
                var reserved_spaces = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
                var type = arguments[1];
                var value = arguments[2];
                var field_name = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";

                if (this.is_empty(value)) {
                    return value;
                }
                var object_type = _ChainTypes2.default.object_type[type];
                if (!object_type) {
                    throw new Error('Unknown object type ' + type + ' ' + field_name + ' ' + value);
                }
                var re = new RegExp(reserved_spaces + '.' + object_type + '.[0-9]+$');
                if (!re.test(value)) {
                    throw new Error('Expecting ' + type + ' in format ' + (reserved_spaces + '.' + object_type + '.[0-9]+ ') + ('instead of ' + value + ' ' + field_name + ' ' + value));
                }
                return value;
            },

            get_instance: function get_instance(reserve_spaces, type, value, field_name) {
                if (this.is_empty(value)) {
                    return value;
                }
                this.require_object_type(reserve_spaces, type, value, field_name);
                return this.to_number(value.split('.')[2]);
            },

            require_relative_type: function require_relative_type(type, value, field_name) {
                this.require_object_type(0, type, value, field_name);
                return value;
            },

            get_relative_instance: function get_relative_instance(type, value, field_name) {
                if (this.is_empty(value)) {
                    return value;
                }
                this.require_object_type(0, type, value, field_name);
                return this.to_number(value.split('.')[2]);
            },

            require_protocol_type: function require_protocol_type(type, value, field_name) {
                this.require_object_type(1, type, value, field_name);
                return value;
            },

            get_protocol_instance: function get_protocol_instance(type, value, field_name) {
                if (this.is_empty(value)) {
                    return value;
                }
                this.require_object_type(1, type, value, field_name);
                return this.to_number(value.split('.')[2]);
            },

            get_protocol_type: function get_protocol_type(value, field_name) {
                if (this.is_empty(value)) {
                    return value;
                }
                this.require_object_id(value, field_name);
                var values = value.split('.');
                return this.to_number(values[1]);
            },

            get_protocol_type_name: function get_protocol_type_name(value, field_name) {
                if (this.is_empty(value)) {
                    return value;
                }
                var type_id = this.get_protocol_type(value, field_name);
                return Object.keys(_ChainTypes2.default.object_type)[type_id];
            },


            require_implementation_type: function require_implementation_type(type, value, field_name) {
                this.require_object_type(2, type, value, field_name);
                return value;
            },

            get_implementation_instance: function get_implementation_instance(type, value, field_name) {
                if (this.is_empty(value)) {
                    return value;
                }
                this.require_object_type(2, type, value, field_name);
                return this.to_number(value.split('.')[2]);
            },

            // signed / unsigned decimal
            no_overflow53: function no_overflow53(value) {
                var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                if (typeof value === "number") {
                    if (value > MAX_SAFE_INT || value < MIN_SAFE_INT) {
                        throw new Error('overflow ' + field_name + ' ' + value);
                    }
                    return;
                }
                if (typeof value === "string") {
                    var int = parseInt(value);
                    if (value > MAX_SAFE_INT || value < MIN_SAFE_INT) {
                        throw new Error('overflow ' + field_name + ' ' + value);
                    }
                    return;
                }
                if (_bytebuffer.Long.isLong(value)) {
                    // typeof value.toInt() is 'number'
                    this.no_overflow53(value.toInt(), field_name);
                    return;
                }
                throw 'unsupported type ' + field_name + ': (' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)) + ') ' + value;
            },


            // signed / unsigned whole numbers only
            no_overflow64: function no_overflow64(value) {
                var field_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                // https://github.com/dcodeIO/Long.js/issues/20
                if (_bytebuffer.Long.isLong(value)) {
                    return;
                }

                // BigInteger#isBigInteger https://github.com/cryptocoinjs/bigi/issues/20
                if (value.t !== undefined && value.s !== undefined) {
                    this.no_overflow64(value.toString(), field_name);
                    return;
                }

                if (typeof value === "string") {
                    // remove leading zeros, will cause a false positive
                    value = value.replace(/^0+/, '');
                    // remove trailing zeros
                    while (/0$/.test(value)) {
                        value = value.substring(0, value.length - 1);
                    }
                    if (/\.$/.test(value)) {
                        // remove trailing dot
                        value = value.substring(0, value.length - 1);
                    }
                    if (value === "") {
                        value = "0";
                    }
                    var long_string = _bytebuffer.Long.fromString(value).toString();
                    if (long_string !== value.trim()) {
                        throw new Error('overflow ' + field_name + ' ' + value);
                    }
                    return;
                }
                if (typeof value === "number") {
                    if (value > MAX_SAFE_LONG || value < MIN_SAFE_LONG) {
                        throw new Error('overflow ' + field_name + ' ' + value);
                    }
                    return;
                }

                throw 'unsupported type ' + field_name + ': (' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)) + ') ' + value;
            }
        };

        exports.default = _my;
        module.exports = exports['default'];
    },{"../../chain/src/ChainTypes":"/bytetrade-js/dist/chain/src/ChainTypes.js","bytebuffer":"/bytetrade-js/node_modules/bytebuffer/dist/bytebuffer.js"}],"/bytetrade-js/dist/serializer/src/error_with_cause.js":[function(require,module,exports){
        "use strict";

        exports.__esModule = true;

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        /** Exception nesting.  */
        var ErrorWithCause = function () {
            function ErrorWithCause(message, cause) {
                _classCallCheck(this, ErrorWithCause);

                this.message = message;
                if (typeof cause !== "undefined" && cause !== null ? cause.message : undefined) {
                    this.message = "cause\t" + cause.message + "\t" + this.message;
                }

                var stack = ""; //(new Error).stack
                if (typeof cause !== "undefined" && cause !== null ? cause.stack : undefined) {
                    stack = "caused by\n\t" + cause.stack + "\t" + stack;
                }

                this.stack = this.message + "\n" + stack;
            }

            ErrorWithCause.throw = function _throw(message, cause) {
                var msg = message;
                if (typeof cause !== "undefined" && cause !== null ? cause.message : undefined) {
                    msg += "\t cause: " + cause.message + " ";
                }
                if (typeof cause !== "undefined" && cause !== null ? cause.stack : undefined) {
                    msg += "\n stack: " + cause.stack + " ";
                }
                throw new Error(msg);
            };

            return ErrorWithCause;
        }();

        exports.default = ErrorWithCause;
        module.exports = exports["default"];
    },{}],"/bytetrade-js/dist/serializer/src/operations.js":[function(require,module,exports){
        "use strict";

        exports.__esModule = true;
        exports.signed_transaction = exports.transaction = exports.redeem_settlement = exports.redeem = exports.pledge = exports.create_pledge_contract = exports.delayed = exports.withdraw_settlement2 = exports.vote2 = exports.deposit2 = exports.transfer2 = exports.order_cancel2 = exports.order_create3 = exports.order_create2 = exports.withdraw2 = exports.btc_withdraw = exports.account_reset = exports.account_update = exports.account_create = exports.account_object = exports.authority = exports.order_freeze_btt_fee_settlement = exports.super_deposit = exports.withdraw_settlement = exports.proposal = exports.op_wrapper = exports.execute = exports.vote = exports.set_balance = exports.redeem_asset_settlement = exports.redeem_asset = exports.pledge_asset = exports.witness_minning_rewards = exports.order_cancel_settlement = exports.deal = exports.witness_update = exports.witness_create = exports.create_market = exports.create_asset = exports.asset = exports.withdraw = exports.deposit = exports.order_cancel = exports.order_create = exports.transfer = exports.memo_data = exports.signed_block_header = exports.block_header = exports.signed_block = exports.processed_transaction = exports.void_result = exports.fee_schedule = exports.asset_claim_fees_operation_fee_parameters = exports.asset_settle_cancel_operation_fee_parameters = exports.transfer_from_blind_operation_fee_parameters = exports.blind_transfer_operation_fee_parameters = exports.transfer_to_blind_operation_fee_parameters = exports.override_transfer_operation_fee_parameters = exports.balance_claim_operation_fee_parameters = exports.assert_operation_fee_parameters = exports.custom_operation_fee_parameters = exports.worker_create_operation_fee_parameters = exports.vesting_balance_withdraw_operation_fee_parameters = exports.vesting_balance_create_operation_fee_parameters = exports.committee_member_update_global_parameters_operation_fee_parameters = exports.committee_member_update_operation_fee_parameters = exports.committee_member_create_operation_fee_parameters = exports.withdraw_permission_delete_operation_fee_parameters = exports.withdraw_permission_claim_operation_fee_parameters = exports.withdraw_permission_update_operation_fee_parameters = exports.withdraw_permission_create_operation_fee_parameters = exports.proposal_delete_operation_fee_parameters = exports.proposal_update_operation_fee_parameters = exports.proposal_create_operation_fee_parameters = exports.witness_update_operation_fee_parameters = exports.witness_create_operation_fee_parameters = exports.asset_publish_feed_operation_fee_parameters = exports.asset_global_settle_operation_fee_parameters = exports.asset_settle_operation_fee_parameters = exports.asset_fund_fee_pool_operation_fee_parameters = exports.asset_reserve_operation_fee_parameters = exports.asset_issue_operation_fee_parameters = exports.asset_update_feed_producers_operation_fee_parameters = exports.asset_update_bitasset_operation_fee_parameters = exports.asset_update_operation_fee_parameters = exports.asset_create_operation_fee_parameters = exports.account_transfer_operation_fee_parameters = exports.account_upgrade_operation_fee_parameters = exports.account_whitelist_operation_fee_parameters = exports.account_update_operation_fee_parameters = exports.account_create_operation_fee_parameters = exports.fill_order_operation_fee_parameters = exports.call_order_update_operation_fee_parameters = exports.limit_order_cancel_operation_fee_parameters = exports.limit_order_create_operation_fee_parameters = exports.transfer_operation_fee_parameters = exports.operation = undefined;

        var _types = require("./types");

        var _types2 = _interopRequireDefault(_types);

        var _serializer = require("./serializer");

        var _serializer2 = _interopRequireDefault(_serializer);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        var uint8 = _types2.default.uint8,
            uint16 = _types2.default.uint16,
            uint32 = _types2.default.uint32,
            int64 = _types2.default.int64,
            uint64 = _types2.default.uint64,
            string = _types2.default.string,
            bytes = _types2.default.bytes,
            bool = _types2.default.bool,
            array = _types2.default.array,
            fixed_array = _types2.default.fixed_array,
            protocol_id_type = _types2.default.protocol_id_type,
            object_id_type = _types2.default.object_id_type,
            vote_id = _types2.default.vote_id,
            future_extensions = _types2.default.future_extensions,
            static_variant = _types2.default.static_variant,
            map = _types2.default.map,
            set = _types2.default.set,
            public_key = _types2.default.public_key,
            address = _types2.default.address,
            time_point_sec = _types2.default.time_point_sec,
            optional = _types2.default.optional,
            uint128 = _types2.default.uint128;


        future_extensions = _types2.default.void;

        /*
When updating generated code
Replace:  operation = static_variant [
with:     operation.st_operations = [

Delete:
public_key = new Serializer(
    "public_key"
    key_data: bytes 33
)

*/
// Place-holder, their are dependencies on "operation" .. The final list of
// operations is not avialble until the very end of the generated code.
// See: operation.st_operations = ...
        var operation = static_variant();
// module.exports["operation"] = operation;

        exports.operation = operation;
// For module.exports

        var Serializer = function Serializer(operation_name, serilization_types_object) {
            return new _serializer2.default(operation_name, serilization_types_object);
            // return module.exports[operation_name] = s;
        };

// Custom-types follow Generated code:

// ##  Generated code follows
// # programs/js_operation_serializer > npm i -g decaffeinate
// ## -------------------------------


        var void_result = exports.void_result = new Serializer("void_result");

        var operation_result = static_variant([void_result, object_id_type]);

        var processed_transaction = exports.processed_transaction = new Serializer("processed_transaction", { ref_block_num: uint16,
            ref_block_prefix: uint32,
            expiration: time_point_sec,
            operations: array(operation),
            extensions: set(future_extensions),
            signatures: array(bytes(65)),
            operation_results: array(operation_result) });

        var signed_block = exports.signed_block = new Serializer("signed_block", { previous: bytes(20),
            timestamp: time_point_sec,
            witness: protocol_id_type("witness"),
            transaction_merkle_root: bytes(20),
            extensions: set(future_extensions),
            witness_signature: bytes(65),
            transactions: array(processed_transaction) });

        var block_header = exports.block_header = new Serializer("block_header", { previous: bytes(20),
            timestamp: time_point_sec,
            witness: protocol_id_type("witness"),
            transaction_merkle_root: bytes(20),
            extensions: set(future_extensions) });

        var signed_block_header = exports.signed_block_header = new Serializer("signed_block_header", { previous: bytes(20),
            timestamp: time_point_sec,
            witness: protocol_id_type("witness"),
            transaction_merkle_root: bytes(20),
            extensions: set(future_extensions),
            witness_signature: bytes(65) });

        var memo_data = exports.memo_data = new Serializer("memo_data", { from: public_key,
            to: public_key,
            nonce: uint64,
            message: bytes() });

        var transfer = exports.transfer = new Serializer("transfer", {
            fee: uint128,
            from: string,
            to: string,
            asset_type: uint32,
            amount: uint128
        });

        var order_create = exports.order_create = new Serializer("order_create", {
            fee: uint128,
            creator: string,
            side: uint8,
            order_type: uint8,
            market_name: string,
            amount: uint128,
            price: uint128,
            use_btt_as_fee: bool,
            freeze_btt_fee: optional(uint128),
            now: time_point_sec,
            expiration: time_point_sec
        });

        var order_cancel = exports.order_cancel = new Serializer("order_cancel", {
            fee: uint128,
            creator: string,
            market_name: string,
            order_id: bytes(20)
        });

        var deposit = exports.deposit = new Serializer("deposit", {
            fee: uint128,
            sign: string,
            to: string,
            from_external_address: string,
            external_transaction_id: string,
            chain_contract_address: string,
            chain_type: uint32,
            amount: string
        });

        var withdraw = exports.withdraw = new Serializer("withdraw", {
            fee: uint128,
            from: string,
            to_external_address: string,
            asset_type: uint32,
            amount: uint128
        });

        var asset = exports.asset = new Serializer("asset", {
            id: uint32,
            symbol: string,
            name: string,
            show_precision: uint8,
            save_precision: uint8,
            base_precision: uint64,
            creator: string,
            is_native: bool,
            chain_type: optional(uint32),
            chain_contract_address: optional(string),
            min_trade_amount: optional(uint64),
            min_transfer_amount: optional(uint64),
            total_supply: optional(uint128),
            init_account: array(string),
            init_amount: array(uint128),
            init_balance_type: array(uint8),
            external_precision: optional(uint64)
        });

        var create_asset = exports.create_asset = new Serializer("create_asset", {
            fee: uint128,
            creator: string,
            create_asset: asset,
            signature: bytes(65)
        });

        var create_market = exports.create_market = new Serializer("create_market", {
            fee: uint128,
            creator: string,
            name: string,
            stock: uint32,
            money: uint32,
            stock_precision: uint8,
            money_precision: uint8,
            fee_precision: uint8
        });

        var witness_create = exports.witness_create = new Serializer("witness_create", {
            fee: uint128,
            witness_account: string,
            url: string,
            block_signing_key: public_key
        });

        var witness_update = exports.witness_update = new Serializer("witness_update", {
            fee: uint128,
            witness_account: string,
            new_url: optional(string)
        });

        var deal = exports.deal = new Serializer("deal", {
            fee: uint128
        });

        var order_cancel_settlement = exports.order_cancel_settlement = new Serializer("order_cancel_settlement", {
            fee: uint128
        });

        var witness_minning_rewards = exports.witness_minning_rewards = new Serializer("witness_minning_rewards", {
            fee: uint128
        });

        var pledge_asset = exports.pledge_asset = new Serializer("pledge_asset", {
            fee: uint128
        });

        var redeem_asset = exports.redeem_asset = new Serializer("redeem_asset", {
            fee: uint128
        });

        var redeem_asset_settlement = exports.redeem_asset_settlement = new Serializer("redeem_asset_settlement", {
            fee: uint128
        });

        var set_balance = exports.set_balance = new Serializer("set_balance", {
            fee: uint128
        });

        var vote = exports.vote = new Serializer("vote", {
            fee: uint128
        });

        var execute = exports.execute = new Serializer("execute", {
            fee: uint128
        });

        var op_wrapper = exports.op_wrapper = new Serializer("op_wrapper", { op: operation });

        var proposal = exports.proposal = new Serializer("proposal", {
            fee: uint128,
            proposaler: string,
            expiration_time: time_point_sec,
            proposed_ops: array(op_wrapper)
        });

        var withdraw_settlement = exports.withdraw_settlement = new Serializer("withdraw_settlement", {
            fee: uint128,
            sign: string,
            withdraw_transaction_id: bytes(20),
            chain_contract_address: string,
            chain_type: uint32,
            to_external_address: string,
            amount: string,
            external_transaction_id: string
        });

        var super_deposit = exports.super_deposit = new Serializer("super_deposit", {
            fee: uint128
        });

        var order_freeze_btt_fee_settlement = exports.order_freeze_btt_fee_settlement = new Serializer("order_freeze_btt_fee_settlement", {
            fee: uint128
        });

        var authority = exports.authority = new Serializer("authority", {
            weight_threshold: uint32,
            account_auths: map(string, uint16),
            key_auths: map(public_key, uint16),
            address_auths: map(address, uint16)
        });

        var account_object = exports.account_object = new Serializer("account_object", {
            id: string,
            owner: authority,
            active: authority

        });

        var account_create = exports.account_create = new Serializer("account_create", {
            fee: uint128,
            account: account_object,
            registrar: string
        });

        var account_update = exports.account_update = new Serializer("account_update", {});

        var account_reset = exports.account_reset = new Serializer("account_reset", {});

        var btc_withdraw = exports.btc_withdraw = new Serializer("btc_withdraw", {});

        var withdraw2 = exports.withdraw2 = new Serializer("withdraw2", {
            fee: uint128,
            from: string,
            to_external_address: string,
            asset_type: uint32,
            amount: uint128,
            asset_fee: optional(uint128)
        });

        var order_create2 = exports.order_create2 = new Serializer("order_create2", {
            fee: uint128,
            creator: string,
            side: uint8,
            order_type: uint8,
            market_name: string,
            amount: uint128,
            price: uint128,
            use_btt_as_fee: bool,
            freeze_btt_fee: optional(uint128),
            now: time_point_sec,
            expiration: time_point_sec,
            custom_btt_fee_rate: optional(uint16),
            custom_no_btt_fee_rate: optional(uint16)
        });

        var order_create3 = exports.order_create3 = new Serializer("order_create3", {
            fee: uint128,
            creator: string,
            side: uint8,
            order_type: uint8,
            market_name: string,
            amount: uint128,
            price: uint128,
            use_btt_as_fee: bool,
            freeze_btt_fee: optional(uint128),
            now: time_point_sec,
            expiration: time_point_sec,
            custom_btt_fee_rate: optional(uint16),
            custom_no_btt_fee_rate: optional(uint16),
            money_id: uint32,
            stock_id: uint32
        });

        var order_cancel2 = exports.order_cancel2 = new Serializer("order_cancel2", {
            fee: uint128,
            creator: string,
            market_name: string,
            order_id: bytes(20),
            money_id: uint32,
            stock_id: uint32
        });

        var transfer2 = exports.transfer2 = new Serializer("transfer2", {
            fee: uint128,
            from: string,
            to: string,
            asset_type: uint32,
            amount: uint128,
            message: optional(string)
        });

        var deposit2 = exports.deposit2 = new Serializer("deposit2", {
            fee: uint128,
            sign: string,
            to: string,
            from_external_address: string,
            external_transaction_id: string,
            chain_contract_address: string,
            chain_type: uint32,
            amount: string,
            omni_amount: string,
            utxos: array(string)
        });

        var vote2 = exports.vote2 = new Serializer("vote2", {});

        var withdraw_settlement2 = exports.withdraw_settlement2 = new Serializer("withdraw_settlement2", {
            fee: uint128,
            sign: string,
            withdraw_transaction_id: bytes(20),
            chain_contract_address: string,
            chain_type: uint32,
            to_external_address: string,
            amount: string,
            external_transaction_id: string,
            utxos: array(string)
        });

        var delayed = exports.delayed = new Serializer("delayed", {});

        var create_pledge_contract = exports.create_pledge_contract = new Serializer("create_pledge_contract", {
            fee: uint128,
            creator: string,
            contract_version: uint32,
            contract: string
        });

        var pledge = exports.pledge = new Serializer("pledge", {
            fee: uint128,
            pledger: string,
            contract_id: bytes(20),
            amount: uint128,
            asset_type: uint32
        });

        var redeem = exports.redeem = new Serializer("redeem", {
            fee: uint128,
            pledger: string,
            contract_id: bytes(20),
            amount: uint128,
            asset_type: uint32
        });

        var redeem_settlement = exports.redeem_settlement = new Serializer("redeem_settlement", {
            fee: uint128,
            pledger: string,
            contract_id: bytes(20),
            amount: uint128,
            asset_type: uint32
        });

        operation.st_operations = [transfer, order_create, order_cancel, deposit, withdraw, create_asset, create_market, witness_create, witness_update, deal, order_cancel_settlement, witness_minning_rewards, pledge_asset, redeem_asset, redeem_asset_settlement, set_balance, vote, execute, proposal, withdraw_settlement, super_deposit, order_freeze_btt_fee_settlement, account_create, account_update, account_reset, btc_withdraw, withdraw2, order_create2, transfer2, deposit2, vote2, withdraw_settlement2, order_create3, order_cancel2, delayed, create_pledge_contract, pledge, redeem, redeem_settlement];

        var transaction = exports.transaction = new Serializer("transaction", {
            timestamp: time_point_sec,
            expiration: optional(time_point_sec),
            operations: array(operation),
            validate_type: uint8,
            dapp: optional(string),
            proposal_transaction_id: optional(bytes(20))
        });

        var signed_transaction = exports.signed_transaction = new Serializer("signed_transaction", {
            timestamp: time_point_sec,
            expiration: optional(time_point_sec),
            operations: array(operation),
            validate_type: uint8,
            dapp: optional(string),
            proposal_transaction_id: optional(bytes(20)),
            signatures: array(bytes(65)) });
    },{"./serializer":"/bytetrade-js/dist/serializer/src/serializer.js","./types":"/bytetrade-js/dist/serializer/src/types.js"}],"/bytetrade-js/dist/serializer/src/serializer.js":[function(require,module,exports){
        (function (process,Buffer){
            'use strict';

            exports.__esModule = true;

            var _bytebuffer = require('bytebuffer');

            var _bytebuffer2 = _interopRequireDefault(_bytebuffer);

            var _error_with_cause = require('./error_with_cause');

            var _error_with_cause2 = _interopRequireDefault(_error_with_cause);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

            var HEX_DUMP = process.env.npm_config__graphene_serializer_hex_dump;

            var Serializer = function () {
                function Serializer(operation_name, types) {
                    _classCallCheck(this, Serializer);

                    this.operation_name = operation_name;
                    this.types = types;
                    if (this.types) this.keys = Object.keys(this.types);

                    Serializer.printDebug = true;
                }

                Serializer.prototype.fromByteBuffer = function fromByteBuffer(b) {
                    var object = {};
                    var field = null;
                    try {
                        var iterable = this.keys;
                        for (var i = 0, field; i < iterable.length; i++) {
                            field = iterable[i];
                            var type = this.types[field];
                            try {
                                if (HEX_DUMP) {
                                    if (type.operation_name) {
                                        console.error(type.operation_name);
                                    } else {
                                        var o1 = b.offset;
                                        type.fromByteBuffer(b);
                                        var o2 = b.offset;
                                        b.offset = o1;
                                        //b.reset()
                                        var _b = b.copy(o1, o2);
                                        console.error(this.operation_name + '.' + field + '\t', _b.toHex());
                                    }
                                }
                                object[field] = type.fromByteBuffer(b);
                            } catch (e) {
                                if (Serializer.printDebug) {
                                    console.error('Error reading ' + this.operation_name + '.' + field + ' in data:');
                                    b.printDebug();
                                }
                                throw e;
                            }
                        }
                    } catch (error) {
                        _error_with_cause2.default.throw(this.operation_name + '.' + field, error);
                    }

                    return object;
                };

                Serializer.prototype.appendByteBuffer = function appendByteBuffer(b, object) {
                    var field = null;
                    try {
                        var iterable = this.keys;
                        for (var i = 0, field; i < iterable.length; i++) {
                            field = iterable[i];
                            var type = this.types[field];
                            type.appendByteBuffer(b, object[field]);
                        }
                    } catch (error) {
                        try {
                            _error_with_cause2.default.throw(this.operation_name + '.' + field + " = " + JSON.stringify(object[field]), error);
                        } catch (e) {
                            // circular ref
                            _error_with_cause2.default.throw(this.operation_name + '.' + field + " = " + object[field], error);
                        }
                    }
                    return;
                };

                Serializer.prototype.fromObject = function fromObject(serialized_object) {
                    var result = {};
                    var field = null;
                    try {
                        var iterable = this.keys;
                        for (var i = 0, field; i < iterable.length; i++) {
                            field = iterable[i];
                            var type = this.types[field];
                            var value = serialized_object[field];
                            //DEBUG value = value.resolve if value.resolve
                            //DEBUG console.log('... value',field,value)
                            var object = type.fromObject(value);
                            result[field] = object;
                        }
                    } catch (error) {
                        _error_with_cause2.default.throw(this.operation_name + '.' + field, error);
                    }

                    return result;
                };

                /**
                 @arg {boolean} [debug.use_default = false] - more template friendly
                 @arg {boolean} [debug.annotate = false] - add user-friendly information
                 */


                Serializer.prototype.toObject = function toObject() {
                    var serialized_object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                    var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { use_default: false, annotate: false };

                    var result = {};
                    var field = null;
                    try {
                        if (!this.types) return result;

                        var iterable = this.keys;
                        for (var i = 0, field; i < iterable.length; i++) {
                            field = iterable[i];
                            var type = this.types[field];
                            var object = type.toObject(typeof serialized_object !== "undefined" && serialized_object !== null ? serialized_object[field] : undefined, debug);
                            result[field] = object;
                            if (HEX_DUMP) {
                                var b = new _bytebuffer2.default(_bytebuffer2.default.DEFAULT_CAPACITY, _bytebuffer2.default.LITTLE_ENDIAN);
                                type.appendByteBuffer(b, typeof serialized_object !== "undefined" && serialized_object !== null ? serialized_object[field] : undefined);
                                b = b.copy(0, b.offset);
                                console.error(this.operation_name + '.' + field, b.toHex());
                            }
                        }
                    } catch (error) {
                        _error_with_cause2.default.throw(this.operation_name + '.' + field, error);
                    }

                    return result;
                };

                /** Sort by the first element in a operation */


                Serializer.prototype.compare = function compare(a, b) {

                    var first_key = this.keys[0];
                    var first_type = this.types[first_key];

                    var valA = a[first_key];
                    var valB = b[first_key];

                    if (first_type.compare) return first_type.compare(valA, valB);

                    if (typeof valA === "number" && typeof valB === "number") return valA - valB;

                    var encoding = void 0;
                    if (Buffer.isBuffer(valA) && Buffer.isBuffer(valB)) {
                        // A binary string compare does not work.  If localeCompare is well supported that could replace HEX.  Performanance is very good so comparing HEX works.
                        encoding = "hex";
                    }

                    var strA = valA.toString(encoding);
                    var strB = valB.toString(encoding);
                    return strA > strB ? 1 : strA < strB ? -1 : 0;
                };

                // <helper_functions>

                Serializer.prototype.fromHex = function fromHex(hex) {
                    var b = _bytebuffer2.default.fromHex(hex, _bytebuffer2.default.LITTLE_ENDIAN);
                    return this.fromByteBuffer(b);
                };

                Serializer.prototype.fromBuffer = function fromBuffer(buffer) {
                    var b = _bytebuffer2.default.fromBinary(buffer.toString("binary"), _bytebuffer2.default.LITTLE_ENDIAN);
                    return this.fromByteBuffer(b);
                };

                Serializer.prototype.toHex = function toHex(object) {
                    // return this.toBuffer(object).toString("hex")
                    var b = this.toByteBuffer(object);
                    return b.toHex();
                };

                Serializer.prototype.toByteBuffer = function toByteBuffer(object) {
                    var b = new _bytebuffer2.default(_bytebuffer2.default.DEFAULT_CAPACITY, _bytebuffer2.default.LITTLE_ENDIAN);
                    this.appendByteBuffer(b, object);
                    return b.copy(0, b.offset);
                };

                Serializer.prototype.toBuffer = function toBuffer(object) {
                    return new Buffer(this.toByteBuffer(object).toBinary(), 'binary');
                };

                return Serializer;
            }();

            exports.default = Serializer;
            module.exports = exports['default'];
        }).call(this,require('_process'),require("buffer").Buffer)

    },{"./error_with_cause":"/bytetrade-js/dist/serializer/src/error_with_cause.js","_process":"/bytetrade-js/node_modules/process/browser.js","buffer":"/bytetrade-js/node_modules/buffer/index.js","bytebuffer":"/bytetrade-js/node_modules/bytebuffer/dist/bytebuffer.js"}],"/bytetrade-js/dist/serializer/src/template.js":[function(require,module,exports){
        "use strict";

        exports.__esModule = true;
        exports.default = template;

        /** Console print any transaction object with zero default values. */
        function template(op) {

            var object = op.toObject(void 0, { use_default: true, annotate: true });

            // visual (with descriptions)
            console.error(JSON.stringify(object, null, 4));

            // usable in a copy-paste

            object = op.toObject(void 0, { use_default: true, annotate: false });

            // copy-paste one-lineer
            console.error(JSON.stringify(object));
        }
        module.exports = exports["default"];
    },{}],"/bytetrade-js/dist/serializer/src/types.js":[function(require,module,exports){
        (function (process,Buffer){
            'use strict';

            exports.__esModule = true;

            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// Low-level types that make up operations

            var _SerializerValidation = require('./SerializerValidation');

            var _SerializerValidation2 = _interopRequireDefault(_SerializerValidation);

            var _FastParser = require('./FastParser');

            var _FastParser2 = _interopRequireDefault(_FastParser);

            var _ChainTypes = require('../../chain/src/ChainTypes');

            var _ChainTypes2 = _interopRequireDefault(_ChainTypes);

            var _ObjectId = require('../../chain/src/ObjectId');

            var _ObjectId2 = _interopRequireDefault(_ObjectId);

            var _ecc = require('../../ecc');

            var _bitsharesjsWs = require('bitsharesjs-ws');

            var _bignumber = require('bignumber.js');

            var _bignumber2 = _interopRequireDefault(_bignumber);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            var Types = {};

            var HEX_DUMP = process.env.npm_config__graphene_serializer_hex_dump;

            Types.uint8 = {
                fromByteBuffer: function fromByteBuffer(b) {
                    return b.readUint8();
                },
                appendByteBuffer: function appendByteBuffer(b, object) {
                    _SerializerValidation2.default.require_range(0, 0xFF, object, 'uint8 ' + object);
                    b.writeUint8(object);
                    return;
                },
                fromObject: function fromObject(object) {
                    _SerializerValidation2.default.require_range(0, 0xFF, object, 'uint8 ' + object);
                    return object;
                },
                toObject: function toObject(object) {
                    var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                    if (debug.use_default && object === undefined) {
                        return 0;
                    }
                    _SerializerValidation2.default.require_range(0, 0xFF, object, 'uint8 ' + object);
                    return parseInt(object);
                }
            };

            Types.uint16 = {
                fromByteBuffer: function fromByteBuffer(b) {
                    return b.readUint16();
                },
                appendByteBuffer: function appendByteBuffer(b, object) {
                    _SerializerValidation2.default.require_range(0, 0xFFFF, object, 'uint16 ' + object);
                    b.writeUint16(object);
                    return;
                },
                fromObject: function fromObject(object) {
                    _SerializerValidation2.default.require_range(0, 0xFFFF, object, 'uint16 ' + object);
                    return object;
                },
                toObject: function toObject(object) {
                    var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                    if (debug.use_default && object === undefined) {
                        return 0;
                    }
                    _SerializerValidation2.default.require_range(0, 0xFFFF, object, 'uint16 ' + object);
                    return parseInt(object);
                }
            };

            Types.uint32 = {
                fromByteBuffer: function fromByteBuffer(b) {
                    return b.readUint32();
                },
                appendByteBuffer: function appendByteBuffer(b, object) {
                    _SerializerValidation2.default.require_range(0, 0xFFFFFFFF, object, 'uint32 ' + object);
                    b.writeUint32(object);
                    return;
                },
                fromObject: function fromObject(object) {
                    _SerializerValidation2.default.require_range(0, 0xFFFFFFFF, object, 'uint32 ' + object);
                    return object;
                },
                toObject: function toObject(object) {
                    var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                    if (debug.use_default && object === undefined) {
                        return 0;
                    }
                    _SerializerValidation2.default.require_range(0, 0xFFFFFFFF, object, 'uint32 ' + object);
                    return parseInt(object);
                }
            };

            var MIN_SIGNED_32 = -1 * Math.pow(2, 31);
            var MAX_SIGNED_32 = Math.pow(2, 31) - 1;

            Types.varint32 = {
                fromByteBuffer: function fromByteBuffer(b) {
                    return b.readVarint32();
                },
                appendByteBuffer: function appendByteBuffer(b, object) {
                    _SerializerValidation2.default.require_range(MIN_SIGNED_32, MAX_SIGNED_32, object, 'uint32 ' + object);
                    b.writeVarint32(object);
                    return;
                },
                fromObject: function fromObject(object) {
                    _SerializerValidation2.default.require_range(MIN_SIGNED_32, MAX_SIGNED_32, object, 'uint32 ' + object);
                    return object;
                },
                toObject: function toObject(object) {
                    var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                    if (debug.use_default && object === undefined) {
                        return 0;
                    }
                    _SerializerValidation2.default.require_range(MIN_SIGNED_32, MAX_SIGNED_32, object, 'uint32 ' + object);
                    return parseInt(object);
                }
            };

            Types.int64 = {
                fromByteBuffer: function fromByteBuffer(b) {
                    return b.readInt64();
                },
                appendByteBuffer: function appendByteBuffer(b, object) {
                    _SerializerValidation2.default.required(object);
                    b.writeInt64(_SerializerValidation2.default.to_long(object));
                    return;
                },
                fromObject: function fromObject(object) {
                    _SerializerValidation2.default.required(object);
                    return _SerializerValidation2.default.to_long(object);
                },
                toObject: function toObject(object) {
                    var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                    //if (debug.use_default && object === undefined) { return "0"; }
                    if (debug.use_default && object === undefined) {
                        return 0;
                    }
                    _SerializerValidation2.default.required(object);
                    //return v.to_long(object).toString();
                    return parseInt(_SerializerValidation2.default.to_long(object).toString());
                }
            };

            Types.uint64 = {
                fromByteBuffer: function fromByteBuffer(b) {
                    return b.readUint64();
                },
                appendByteBuffer: function appendByteBuffer(b, object) {
                    b.writeUint64(_SerializerValidation2.default.to_long(_SerializerValidation2.default.unsigned(object)));
                    return;
                },
                fromObject: function fromObject(object) {
                    return _SerializerValidation2.default.to_long(_SerializerValidation2.default.unsigned(object));
                },
                toObject: function toObject(object) {
                    var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                    if (debug.use_default && object === undefined) {
                        return "0";
                    }
                    // if (debug.use_default && object === undefined) { return 0; }
                    //return parseInt(v.to_long(object).toString());
                    return _SerializerValidation2.default.to_long(object).toString();
                }
            };

            Types.uint128 = {
                fromByteBuffer: function fromByteBuffer(b) {
                    return b.readUint64();
                },
                appendByteBuffer: function appendByteBuffer(b, object) {
                    //  console.log(object.toString());
                    var x = new _bignumber2.default(object.toString());
                    //  console.log("x " + x);
                    var base = new _bignumber2.default(1);
                    for (var i = 0; i < 64; ++i) {
                        base = base.times(2);
                    }
                    // console.log("base " + base);
                    var a1 = x.idiv(base);
                    var a2 = x.mod(base);

                    //   console.log("a1 " + a1.toString());
                    //   console.log("a2 " + a2.toString());

                    b.writeUint64(_SerializerValidation2.default.to_long(_SerializerValidation2.default.unsigned(a1.toString())));
                    b.writeUint64(_SerializerValidation2.default.to_long(_SerializerValidation2.default.unsigned(a2.toString())));

                    //b.writeUint64(0);
                    //b.writeUint64(v.to_long(v.unsigned(object)));
                    return;
                },
                fromObject: function fromObject(object) {
                    //return v.to_long(v.unsigned(object));
                    return object.toString();
                },
                toObject: function toObject(object) {
                    var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                    if (debug.use_default && object === undefined) {
                        return "0";
                    }
                    // if (debug.use_default && object === undefined) { return 0; }
                    //return parseInt(v.to_long(object).toString());
                    // return v.to_long(object).toString();
                    return object.toString();
                }
            };

            /*
Types.uint64 =
    {fromByteBuffer(b){
        return b.readUint64();
    },
    appendByteBuffer(b, object){
        v.require_range(0,0xFFFFFFFFFFFFFFFF,object, `uint64 ${object}`);
        b.writeUint32(object);
        return;
    },
    fromObject(object){
        v.require_range(0,0xFFFFFFFFFFFFFFFF,object, `uint64 ${object}`);
        return object;
    },
    toObject(object, debug = {}){
        if (debug.use_default && object === undefined) { return 0; }
        v.require_range(0,0xFFFFFFFF,object, `uint64 ${object}`);
        return parseInt(object);
    }
    };
*/
            Types.string = {
                fromByteBuffer: function fromByteBuffer(b) {
                    var b_copy;
                    var len = b.readVarint32();
                    b_copy = b.copy(b.offset, b.offset + len), b.skip(len);
                    return new Buffer(b_copy.toBinary(), 'binary');
                },
                appendByteBuffer: function appendByteBuffer(b, object) {
                    _SerializerValidation2.default.required(object);
                    b.writeVarint32(object.length);
                    b.append(object.toString('binary'), 'binary');
                    return;
                },
                fromObject: function fromObject(object) {
                    _SerializerValidation2.default.required(object);
                    return new Buffer(object);
                },
                toObject: function toObject(object) {
                    var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                    if (debug.use_default && object === undefined) {
                        return "";
                    }
                    return object.toString();
                }
            };

            Types.bytes = function (size) {
                return {
                    fromByteBuffer: function fromByteBuffer(b) {
                        if (size === undefined) {
                            var b_copy;
                            var len = b.readVarint32();
                            b_copy = b.copy(b.offset, b.offset + len), b.skip(len);
                            return new Buffer(b_copy.toBinary(), 'binary');
                        } else {
                            b_copy = b.copy(b.offset, b.offset + size), b.skip(size);
                            return new Buffer(b_copy.toBinary(), 'binary');
                        }
                    },
                    appendByteBuffer: function appendByteBuffer(b, object) {
                        _SerializerValidation2.default.required(object);
                        if (typeof object === "string") object = new Buffer(object, "hex");

                        if (size === undefined) {
                            b.writeVarint32(object.length);
                        }
                        b.append(object.toString('binary'), 'binary');
                        return;
                    },
                    fromObject: function fromObject(object) {
                        _SerializerValidation2.default.required(object);
                        if (Buffer.isBuffer(object)) return object;

                        return new Buffer(object, 'hex');
                    },
                    toObject: function toObject(object) {
                        var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                        if (debug.use_default && object === undefined) {
                            var zeros = function zeros(num) {
                                return new Array(num).join("00");
                            };
                            return zeros(size);
                        }
                        _SerializerValidation2.default.required(object);
                        return object.toString('hex');
                    }
                };
            };

            Types.bool = {
                fromByteBuffer: function fromByteBuffer(b) {
                    return b.readUint8() === 1;
                },
                appendByteBuffer: function appendByteBuffer(b, object) {
                    // supports boolean or integer
                    b.writeUint8(JSON.parse(object) ? 1 : 0);
                    return;
                },
                fromObject: function fromObject(object) {
                    return JSON.parse(object) ? true : false;
                },
                toObject: function toObject(object) {
                    var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                    if (debug.use_default && object === undefined) {
                        return false;
                    }
                    return JSON.parse(object) ? true : false;
                }
            };

            Types.void = {
                fromByteBuffer: function fromByteBuffer(b) {
                    throw new Error("(void) undefined type");
                },
                appendByteBuffer: function appendByteBuffer(b, object) {
                    throw new Error("(void) undefined type");
                },
                fromObject: function fromObject(object) {
                    throw new Error("(void) undefined type");
                },
                toObject: function toObject(object) {
                    var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                    if (debug.use_default && object === undefined) {
                        return undefined;
                    }
                    throw new Error("(void) undefined type");
                }
            };

            Types.array = function (st_operation) {
                return {
                    fromByteBuffer: function fromByteBuffer(b) {
                        var size = b.readVarint32();
                        if (HEX_DUMP) {
                            console.log("varint32 size = " + size.toString(16));
                        }
                        var result = [];
                        for (var i = 0; 0 < size ? i < size : i > size; 0 < size ? i++ : i++) {
                            result.push(st_operation.fromByteBuffer(b));
                        }
                        return sortOperation(result, st_operation);
                    },
                    appendByteBuffer: function appendByteBuffer(b, object) {
                        _SerializerValidation2.default.required(object);
                        object = sortOperation(object, st_operation);
                        b.writeVarint32(object.length);
                        for (var i = 0, o; i < object.length; i++) {
                            o = object[i];
                            st_operation.appendByteBuffer(b, o);
                        }
                    },
                    fromObject: function fromObject(object) {
                        _SerializerValidation2.default.required(object);
                        object = sortOperation(object, st_operation);
                        var result = [];
                        for (var i = 0, o; i < object.length; i++) {
                            o = object[i];
                            result.push(st_operation.fromObject(o));
                        }
                        return result;
                    },
                    toObject: function toObject(object) {
                        var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                        if (debug.use_default && object === undefined) {
                            return [st_operation.toObject(object, debug)];
                        }
                        _SerializerValidation2.default.required(object);
                        object = sortOperation(object, st_operation);

                        var result = [];
                        for (var i = 0, o; i < object.length; i++) {
                            o = object[i];
                            result.push(st_operation.toObject(o, debug));
                        }
                        return result;
                    }
                };
            };

            Types.time_point_sec = {
                fromByteBuffer: function fromByteBuffer(b) {
                    return b.readUint32();
                },
                appendByteBuffer: function appendByteBuffer(b, object) {
                    if (typeof object !== "number") object = Types.time_point_sec.fromObject(object);

                    b.writeUint32(object);
                    return;
                },
                fromObject: function fromObject(object) {
                    _SerializerValidation2.default.required(object);

                    if (typeof object === "number") return object;

                    if (object.getTime) return Math.floor(object.getTime() / 1000);

                    if (typeof object !== "string") throw new Error("Unknown date type: " + object);

                    // if(typeof object === "string" && !/Z$/.test(object))
                    //     object = object + "Z"

                    return Math.floor(new Date(object).getTime() / 1000);
                },
                toObject: function toObject(object) {
                    var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                    if (debug.use_default && object === undefined) return new Date(0).toISOString().split('.')[0];

                    _SerializerValidation2.default.required(object);

                    if (typeof object === "string") return object;

                    if (object.getTime) return object.toISOString().split('.')[0];

                    var int = parseInt(object);
                    _SerializerValidation2.default.require_range(0, 0xFFFFFFFF, int, 'uint32 ' + object);
                    return new Date(int * 1000).toISOString().split('.')[0];
                }
            };

            Types.set = function (st_operation) {
                return {
                    validate: function validate(array) {
                        var dup_map = {};
                        for (var i = 0, o; i < array.length; i++) {
                            o = array[i];
                            var ref;
                            if (ref = typeof o === 'undefined' ? 'undefined' : _typeof(o), ['string', 'number'].indexOf(ref) >= 0) {
                                if (dup_map[o] !== undefined) {
                                    throw new Error("duplicate (set)");
                                }
                                dup_map[o] = true;
                            }
                        }
                        return sortOperation(array, st_operation);
                    },
                    fromByteBuffer: function fromByteBuffer(b) {
                        var size = b.readVarint32();
                        if (HEX_DUMP) {
                            console.log("varint32 size = " + size.toString(16));
                        }
                        return this.validate(function () {
                            var result = [];
                            for (var i = 0; 0 < size ? i < size : i > size; 0 < size ? i++ : i++) {
                                result.push(st_operation.fromByteBuffer(b));
                            }
                            return result;
                        }());
                    },
                    appendByteBuffer: function appendByteBuffer(b, object) {
                        if (!object) {
                            object = [];
                        }
                        b.writeVarint32(object.length);
                        var iterable = this.validate(object);
                        for (var i = 0, o; i < iterable.length; i++) {
                            o = iterable[i];
                            st_operation.appendByteBuffer(b, o);
                        }
                        return;
                    },
                    fromObject: function fromObject(object) {
                        if (!object) {
                            object = [];
                        }
                        return this.validate(function () {
                            var result = [];
                            for (var i = 0, o; i < object.length; i++) {
                                o = object[i];
                                result.push(st_operation.fromObject(o));
                            }
                            return result;
                        }());
                    },
                    toObject: function toObject(object) {
                        var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                        if (debug.use_default && object === undefined) {
                            return [st_operation.toObject(object, debug)];
                        }
                        if (!object) {
                            object = [];
                        }
                        return this.validate(function () {
                            var result = [];
                            for (var i = 0, o; i < object.length; i++) {
                                o = object[i];
                                result.push(st_operation.toObject(o, debug));
                            }
                            return result;
                        }());
                    }
                };
            };

// global_parameters_update_operation current_fees
            Types.fixed_array = function (count, st_operation) {
                return {
                    fromByteBuffer: function fromByteBuffer(b) {
                        var i, j, ref, results;
                        results = [];
                        for (i = j = 0, ref = count; j < ref; i = j += 1) {
                            results.push(st_operation.fromByteBuffer(b));
                        }
                        return sortOperation(results, st_operation);
                    },
                    appendByteBuffer: function appendByteBuffer(b, object) {
                        var i, j, ref;
                        if (count !== 0) {
                            _SerializerValidation2.default.required(object);
                            object = sortOperation(object, st_operation);
                        }
                        for (i = j = 0, ref = count; j < ref; i = j += 1) {
                            st_operation.appendByteBuffer(b, object[i]);
                        }
                    },
                    fromObject: function fromObject(object) {
                        var i, j, ref, results;
                        if (count !== 0) {
                            _SerializerValidation2.default.required(object);
                        }
                        results = [];
                        for (i = j = 0, ref = count; j < ref; i = j += 1) {
                            results.push(st_operation.fromObject(object[i]));
                        }
                        return results;
                    },
                    toObject: function toObject(object, debug) {
                        var i, j, k, ref, ref1, results, results1;
                        if (debug == null) {
                            debug = {};
                        }
                        if (debug.use_default && object === void 0) {
                            results = [];
                            for (i = j = 0, ref = count; j < ref; i = j += 1) {
                                results.push(st_operation.toObject(void 0, debug));
                            }
                            return results;
                        }
                        if (count !== 0) {
                            _SerializerValidation2.default.required(object);
                        }
                        results1 = [];
                        for (i = k = 0, ref1 = count; k < ref1; i = k += 1) {
                            results1.push(st_operation.toObject(object[i], debug));
                        }
                        return results1;
                    }
                };
            };

            /* Supports instance numbers (11) or object types (1.2.11).  Object type
Validation is enforced when an object type is used. */
            var id_type = function id_type(reserved_spaces, object_type) {
                _SerializerValidation2.default.required(reserved_spaces, "reserved_spaces");
                _SerializerValidation2.default.required(object_type, "object_type");
                return {
                    fromByteBuffer: function fromByteBuffer(b) {
                        return b.readVarint32();
                    },
                    appendByteBuffer: function appendByteBuffer(b, object) {
                        _SerializerValidation2.default.required(object);
                        if (object.resolve !== undefined) {
                            object = object.resolve;
                        }
                        // convert 1.2.n into just n
                        if (/^[0-9]+\.[0-9]+\.[0-9]+$/.test(object)) {
                            object = _SerializerValidation2.default.get_instance(reserved_spaces, object_type, object);
                        }
                        b.writeVarint32(_SerializerValidation2.default.to_number(object));
                        return;
                    },
                    fromObject: function fromObject(object) {
                        _SerializerValidation2.default.required(object);
                        if (object.resolve !== undefined) {
                            object = object.resolve;
                        }
                        if (_SerializerValidation2.default.is_digits(object)) {
                            return _SerializerValidation2.default.to_number(object);
                        }
                        return _SerializerValidation2.default.get_instance(reserved_spaces, object_type, object);
                    },
                    toObject: function toObject(object) {
                        var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                        var object_type_id = _ChainTypes2.default.object_type[object_type];
                        if (debug.use_default && object === undefined) {
                            return reserved_spaces + '.' + object_type_id + '.0';
                        }
                        _SerializerValidation2.default.required(object);
                        if (object.resolve !== undefined) {
                            object = object.resolve;
                        }
                        if (/^[0-9]+\.[0-9]+\.[0-9]+$/.test(object)) {
                            object = _SerializerValidation2.default.get_instance(reserved_spaces, object_type, object);
                        }

                        return reserved_spaces + '.' + object_type_id + '.' + object;
                    }
                };
            };

            Types.protocol_id_type = function (name) {
                _SerializerValidation2.default.required(name, "name");
                return id_type(_ChainTypes2.default.reserved_spaces.protocol_ids, name);
            };

            Types.object_id_type = {
                fromByteBuffer: function fromByteBuffer(b) {
                    return _ObjectId2.default.fromByteBuffer(b);
                },
                appendByteBuffer: function appendByteBuffer(b, object) {
                    _SerializerValidation2.default.required(object);
                    if (object.resolve !== undefined) {
                        object = object.resolve;
                    }
                    object = _ObjectId2.default.fromString(object);
                    object.appendByteBuffer(b);
                    return;
                },
                fromObject: function fromObject(object) {
                    _SerializerValidation2.default.required(object);
                    if (object.resolve !== undefined) {
                        object = object.resolve;
                    }
                    return _ObjectId2.default.fromString(object);
                },
                toObject: function toObject(object) {
                    var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                    if (debug.use_default && object === undefined) {
                        return "0.0.0";
                    }
                    _SerializerValidation2.default.required(object);
                    if (object.resolve !== undefined) {
                        object = object.resolve;
                    }
                    object = _ObjectId2.default.fromString(object);
                    return object.toString();
                }
            };

            Types.vote_id = { TYPE: 0x000000FF,
                ID: 0xFFFFFF00,
                fromByteBuffer: function fromByteBuffer(b) {
                    var value = b.readUint32();
                    return {
                        type: value & this.TYPE,
                        id: value & this.ID
                    };
                },
                appendByteBuffer: function appendByteBuffer(b, object) {
                    _SerializerValidation2.default.required(object);
                    if (object === "string") object = Types.vote_id.fromObject(object);

                    var value = object.id << 8 | object.type;
                    b.writeUint32(value);
                    return;
                },
                fromObject: function fromObject(object) {
                    _SerializerValidation2.default.required(object, "(type vote_id)");
                    if ((typeof object === 'undefined' ? 'undefined' : _typeof(object)) === "object") {
                        _SerializerValidation2.default.required(object.type, "type");
                        _SerializerValidation2.default.required(object.id, "id");
                        return object;
                    }
                    _SerializerValidation2.default.require_test(/^[0-9]+:[0-9]+$/, object, 'vote_id format ' + object);

                    var _object$split = object.split(':'),
                        type = _object$split[0],
                        id = _object$split[1];

                    _SerializerValidation2.default.require_range(0, 0xff, type, 'vote type ' + object);
                    _SerializerValidation2.default.require_range(0, 0xffffff, id, 'vote id ' + object);
                    return { type: type, id: id };
                },
                toObject: function toObject(object) {
                    var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                    if (debug.use_default && object === undefined) {
                        return "0:0";
                    }
                    _SerializerValidation2.default.required(object);
                    if (typeof object === "string") object = Types.vote_id.fromObject(object);

                    return object.type + ":" + object.id;
                },
                compare: function compare(a, b) {
                    if ((typeof a === 'undefined' ? 'undefined' : _typeof(a)) !== "object") a = Types.vote_id.fromObject(a);
                    if ((typeof b === 'undefined' ? 'undefined' : _typeof(b)) !== "object") b = Types.vote_id.fromObject(b);
                    return parseInt(a.id) - parseInt(b.id);
                }
            };

            Types.optional = function (st_operation) {
                _SerializerValidation2.default.required(st_operation, "st_operation");
                return {
                    fromByteBuffer: function fromByteBuffer(b) {
                        if (!(b.readUint8() === 1)) {
                            return undefined;
                        }
                        return st_operation.fromByteBuffer(b);
                    },
                    appendByteBuffer: function appendByteBuffer(b, object) {
                        if (object !== null && object !== undefined) {
                            b.writeUint8(1);
                            st_operation.appendByteBuffer(b, object);
                        } else {
                            b.writeUint8(0);
                        }
                        return;
                    },
                    fromObject: function fromObject(object) {
                        if (object === undefined) {
                            return undefined;
                        }
                        return st_operation.fromObject(object);
                    },
                    toObject: function toObject(object) {
                        var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                        // toObject is only null save if use_default is true
                        var result_object = function () {
                            if (!debug.use_default && object === undefined) {
                                return undefined;
                            } else {
                                return st_operation.toObject(object, debug);
                            }
                        }();

                        if (debug.annotate) {
                            if ((typeof result_object === 'undefined' ? 'undefined' : _typeof(result_object)) === "object") {
                                result_object.__optional = "parent is optional";
                            } else {
                                result_object = { __optional: result_object };
                            }
                        }
                        return result_object;
                    }
                };
            };

            Types.static_variant = function (_st_operations) {
                return {
                    nosort: true,
                    st_operations: _st_operations,
                    fromByteBuffer: function fromByteBuffer(b) {
                        var type_id = b.readVarint32();
                        var st_operation = this.st_operations[type_id];
                        if (HEX_DUMP) {
                            console.error('static_variant id 0x' + type_id.toString(16) + ' (' + type_id + ')');
                        }
                        _SerializerValidation2.default.required(st_operation, 'operation ' + type_id);
                        return [type_id, st_operation.fromByteBuffer(b)];
                    },
                    appendByteBuffer: function appendByteBuffer(b, object) {
                        _SerializerValidation2.default.required(object);
                        var type_id = object[0];
                        var st_operation = this.st_operations[type_id];
                        _SerializerValidation2.default.required(st_operation, 'operation ' + type_id);
                        b.writeVarint32(type_id);
                        st_operation.appendByteBuffer(b, object[1]);
                        return;
                    },
                    fromObject: function fromObject(object) {
                        _SerializerValidation2.default.required(object);
                        var type_id = object[0];
                        var st_operation = this.st_operations[type_id];
                        _SerializerValidation2.default.required(st_operation, 'operation ' + type_id);
                        return [type_id, st_operation.fromObject(object[1])];
                    },
                    toObject: function toObject(object) {
                        var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                        if (debug.use_default && object === undefined) {
                            return [0, this.st_operations[0].toObject(undefined, debug)];
                        }
                        _SerializerValidation2.default.required(object);
                        var type_id = object[0];
                        var st_operation = this.st_operations[type_id];
                        _SerializerValidation2.default.required(st_operation, 'operation ' + type_id);
                        return [type_id, st_operation.toObject(object[1], debug)];
                    }
                };
            };

            Types.map = function (key_st_operation, value_st_operation) {
                return {
                    validate: function validate(array) {
                        if (!Array.isArray(array)) {
                            throw new Error("expecting array");
                        }
                        var dup_map = {};
                        for (var i = 0, o; i < array.length; i++) {
                            o = array[i];
                            var ref;
                            if (!(o.length === 2)) {
                                throw new Error("expecting two elements");
                            }
                            if (ref = _typeof(o[0]), ['number', 'string'].indexOf(ref) >= 0) {
                                if (dup_map[o[0]] !== undefined) {
                                    throw new Error("duplicate (map)");
                                }
                                dup_map[o[0]] = true;
                            }
                        }
                        return sortOperation(array, key_st_operation);
                    },
                    fromByteBuffer: function fromByteBuffer(b) {
                        var result = [];
                        var end = b.readVarint32();
                        for (var i = 0; 0 < end ? i < end : i > end; 0 < end ? i++ : i++) {
                            result.push([key_st_operation.fromByteBuffer(b), value_st_operation.fromByteBuffer(b)]);
                        }
                        return this.validate(result);
                    },
                    appendByteBuffer: function appendByteBuffer(b, object) {
                        this.validate(object);
                        b.writeVarint32(object.length);
                        for (var i = 0, o; i < object.length; i++) {
                            o = object[i];
                            key_st_operation.appendByteBuffer(b, o[0]);
                            value_st_operation.appendByteBuffer(b, o[1]);
                        }
                        return;
                    },
                    fromObject: function fromObject(object) {
                        _SerializerValidation2.default.required(object);
                        var result = [];
                        for (var i = 0, o; i < object.length; i++) {
                            o = object[i];
                            result.push([key_st_operation.fromObject(o[0]), value_st_operation.fromObject(o[1])]);
                        }
                        return this.validate(result);
                    },
                    toObject: function toObject(object) {
                        var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                        if (debug.use_default && object === undefined) {
                            return [[key_st_operation.toObject(undefined, debug), value_st_operation.toObject(undefined, debug)]];
                        }
                        _SerializerValidation2.default.required(object);
                        object = this.validate(object);
                        var result = [];
                        for (var i = 0, o; i < object.length; i++) {
                            o = object[i];
                            result.push([key_st_operation.toObject(o[0], debug), value_st_operation.toObject(o[1], debug)]);
                        }
                        return result;
                    }
                };
            };

            Types.public_key = {
                toPublic: function toPublic(object) {
                    if (object.resolve !== undefined) {
                        object = object.resolve;
                    }
                    return object == null ? object : object.Q ? object : _ecc.PublicKey.fromStringOrThrow(object);
                },
                fromByteBuffer: function fromByteBuffer(b) {
                    return _FastParser2.default.public_key(b);
                },
                appendByteBuffer: function appendByteBuffer(b, object) {
                    _SerializerValidation2.default.required(object);
                    _FastParser2.default.public_key(b, Types.public_key.toPublic(object));
                    return;
                },
                fromObject: function fromObject(object) {
                    _SerializerValidation2.default.required(object);
                    if (object.Q) {
                        return object;
                    }
                    return Types.public_key.toPublic(object);
                },
                toObject: function toObject(object) {
                    var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                    if (debug.use_default && object === undefined) {
                        return _bitsharesjsWs.ChainConfig.address_prefix + "859gxfnXyUriMgUeThh1fWv3oqcpLFyHa3TfFYC4PK2HqhToVM";
                    }
                    _SerializerValidation2.default.required(object);
                    return object.toString();
                },
                compare: function compare(a, b) {
                    return strCmp(a.toAddressString(), b.toAddressString());
                }
            };

            Types.address = {
                _to_address: function _to_address(object) {
                    _SerializerValidation2.default.required(object);
                    if (object.addy) {
                        return object;
                    }
                    return _ecc.Address.fromString(object);
                },
                fromByteBuffer: function fromByteBuffer(b) {
                    return new _ecc.Address(_FastParser2.default.ripemd160(b));
                },
                appendByteBuffer: function appendByteBuffer(b, object) {
                    _FastParser2.default.ripemd160(b, Types.address._to_address(object).toBuffer());
                    return;
                },
                fromObject: function fromObject(object) {
                    return Types.address._to_address(object);
                },
                toObject: function toObject(object) {
                    var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                    if (debug.use_default && object === undefined) {
                        return _bitsharesjsWs.ChainConfig.address_prefix + "664KmHxSuQyDsfwo4WEJvWpzg1QKdg67S";
                    }
                    return Types.address._to_address(object).toString();
                },
                compare: function compare(a, b) {
                    return strCmp(a.toString(), b.toString());
                }
            };

            var strCmp = function strCmp(a, b) {
                return a > b ? 1 : a < b ? -1 : 0;
            };
            var firstEl = function firstEl(el) {
                return Array.isArray(el) ? el[0] : el;
            };
            var sortOperation = function sortOperation(array, st_operation) {
                return st_operation.nosort ? array : st_operation.compare ? array.sort(function (a, b) {
                        return st_operation.compare(firstEl(a), firstEl(b));
                    }) : // custom compare operation
                    array.sort(function (a, b) {
                        return typeof firstEl(a) === "number" && typeof firstEl(b) === "number" ? firstEl(a) - firstEl(b) :
                            // A binary string compare does not work. Performanance is very good so HEX is used..  localeCompare is another option.
                            Buffer.isBuffer(firstEl(a)) && Buffer.isBuffer(firstEl(b)) ? strCmp(firstEl(a).toString("hex"), firstEl(b).toString("hex")) : strCmp(firstEl(a).toString(), firstEl(b).toString());
                    });
            };

            exports.default = Types;
            module.exports = exports['default'];
        }).call(this,require('_process'),require("buffer").Buffer)

    },{"../../chain/src/ChainTypes":"/bytetrade-js/dist/chain/src/ChainTypes.js","../../chain/src/ObjectId":"/bytetrade-js/dist/chain/src/ObjectId.js","../../ecc":"/bytetrade-js/dist/ecc/index.js","./FastParser":"/bytetrade-js/dist/serializer/src/FastParser.js","./SerializerValidation":"/bytetrade-js/dist/serializer/src/SerializerValidation.js","_process":"/bytetrade-js/node_modules/process/browser.js","bignumber.js":"/bytetrade-js/node_modules/bignumber.js/bignumber.js","bitsharesjs-ws":"/bytetrade-js/node_modules/bitsharesjs-ws/cjs/index.js","buffer":"/bytetrade-js/node_modules/buffer/index.js"}],"/bytetrade-js/node_modules/assert/assert.js":[function(require,module,exports){
        (function (global){
            'use strict';

// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

            /*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
            function compare(a, b) {
                if (a === b) {
                    return 0;
                }

                var x = a.length;
                var y = b.length;

                for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                    if (a[i] !== b[i]) {
                        x = a[i];
                        y = b[i];
                        break;
                    }
                }

                if (x < y) {
                    return -1;
                }
                if (y < x) {
                    return 1;
                }
                return 0;
            }
            function isBuffer(b) {
                if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
                    return global.Buffer.isBuffer(b);
                }
                return !!(b != null && b._isBuffer);
            }

// based on node assert, original notice:

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

            var util = require('util/');
            var hasOwn = Object.prototype.hasOwnProperty;
            var pSlice = Array.prototype.slice;
            var functionsHaveNames = (function () {
                return function foo() {}.name === 'foo';
            }());
            function pToString (obj) {
                return Object.prototype.toString.call(obj);
            }
            function isView(arrbuf) {
                if (isBuffer(arrbuf)) {
                    return false;
                }
                if (typeof global.ArrayBuffer !== 'function') {
                    return false;
                }
                if (typeof ArrayBuffer.isView === 'function') {
                    return ArrayBuffer.isView(arrbuf);
                }
                if (!arrbuf) {
                    return false;
                }
                if (arrbuf instanceof DataView) {
                    return true;
                }
                if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
                    return true;
                }
                return false;
            }
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

            var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

            var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
            function getName(func) {
                if (!util.isFunction(func)) {
                    return;
                }
                if (functionsHaveNames) {
                    return func.name;
                }
                var str = func.toString();
                var match = str.match(regex);
                return match && match[1];
            }
            assert.AssertionError = function AssertionError(options) {
                this.name = 'AssertionError';
                this.actual = options.actual;
                this.expected = options.expected;
                this.operator = options.operator;
                if (options.message) {
                    this.message = options.message;
                    this.generatedMessage = false;
                } else {
                    this.message = getMessage(this);
                    this.generatedMessage = true;
                }
                var stackStartFunction = options.stackStartFunction || fail;
                if (Error.captureStackTrace) {
                    Error.captureStackTrace(this, stackStartFunction);
                } else {
                    // non v8 browsers so we can have a stacktrace
                    var err = new Error();
                    if (err.stack) {
                        var out = err.stack;

                        // try to strip useless frames
                        var fn_name = getName(stackStartFunction);
                        var idx = out.indexOf('\n' + fn_name);
                        if (idx >= 0) {
                            // once we have located the function frame
                            // we need to strip out everything before it (and its line)
                            var next_line = out.indexOf('\n', idx + 1);
                            out = out.substring(next_line + 1);
                        }

                        this.stack = out;
                    }
                }
            };

// assert.AssertionError instanceof Error
            util.inherits(assert.AssertionError, Error);

            function truncate(s, n) {
                if (typeof s === 'string') {
                    return s.length < n ? s : s.slice(0, n);
                } else {
                    return s;
                }
            }
            function inspect(something) {
                if (functionsHaveNames || !util.isFunction(something)) {
                    return util.inspect(something);
                }
                var rawname = getName(something);
                var name = rawname ? ': ' + rawname : '';
                return '[Function' +  name + ']';
            }
            function getMessage(self) {
                return truncate(inspect(self.actual), 128) + ' ' +
                    self.operator + ' ' +
                    truncate(inspect(self.expected), 128);
            }

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

            function fail(actual, expected, message, operator, stackStartFunction) {
                throw new assert.AssertionError({
                    message: message,
                    actual: actual,
                    expected: expected,
                    operator: operator,
                    stackStartFunction: stackStartFunction
                });
            }

// EXTENSION! allows for well behaved errors defined elsewhere.
            assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

            function ok(value, message) {
                if (!value) fail(value, true, message, '==', assert.ok);
            }
            assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

            assert.equal = function equal(actual, expected, message) {
                if (actual != expected) fail(actual, expected, message, '==', assert.equal);
            };

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

            assert.notEqual = function notEqual(actual, expected, message) {
                if (actual == expected) {
                    fail(actual, expected, message, '!=', assert.notEqual);
                }
            };

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

            assert.deepEqual = function deepEqual(actual, expected, message) {
                if (!_deepEqual(actual, expected, false)) {
                    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
                }
            };

            assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
                if (!_deepEqual(actual, expected, true)) {
                    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
                }
            };

            function _deepEqual(actual, expected, strict, memos) {
                // 7.1. All identical values are equivalent, as determined by ===.
                if (actual === expected) {
                    return true;
                } else if (isBuffer(actual) && isBuffer(expected)) {
                    return compare(actual, expected) === 0;

                    // 7.2. If the expected value is a Date object, the actual value is
                    // equivalent if it is also a Date object that refers to the same time.
                } else if (util.isDate(actual) && util.isDate(expected)) {
                    return actual.getTime() === expected.getTime();

                    // 7.3 If the expected value is a RegExp object, the actual value is
                    // equivalent if it is also a RegExp object with the same source and
                    // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
                } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
                    return actual.source === expected.source &&
                        actual.global === expected.global &&
                        actual.multiline === expected.multiline &&
                        actual.lastIndex === expected.lastIndex &&
                        actual.ignoreCase === expected.ignoreCase;

                    // 7.4. Other pairs that do not both pass typeof value == 'object',
                    // equivalence is determined by ==.
                } else if ((actual === null || typeof actual !== 'object') &&
                    (expected === null || typeof expected !== 'object')) {
                    return strict ? actual === expected : actual == expected;

                    // If both values are instances of typed arrays, wrap their underlying
                    // ArrayBuffers in a Buffer each to increase performance
                    // This optimization requires the arrays to have the same type as checked by
                    // Object.prototype.toString (aka pToString). Never perform binary
                    // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
                    // bit patterns are not identical.
                } else if (isView(actual) && isView(expected) &&
                    pToString(actual) === pToString(expected) &&
                    !(actual instanceof Float32Array ||
                        actual instanceof Float64Array)) {
                    return compare(new Uint8Array(actual.buffer),
                        new Uint8Array(expected.buffer)) === 0;

                    // 7.5 For all other Object pairs, including Array objects, equivalence is
                    // determined by having the same number of owned properties (as verified
                    // with Object.prototype.hasOwnProperty.call), the same set of keys
                    // (although not necessarily the same order), equivalent values for every
                    // corresponding key, and an identical 'prototype' property. Note: this
                    // accounts for both named and indexed properties on Arrays.
                } else if (isBuffer(actual) !== isBuffer(expected)) {
                    return false;
                } else {
                    memos = memos || {actual: [], expected: []};

                    var actualIndex = memos.actual.indexOf(actual);
                    if (actualIndex !== -1) {
                        if (actualIndex === memos.expected.indexOf(expected)) {
                            return true;
                        }
                    }

                    memos.actual.push(actual);
                    memos.expected.push(expected);

                    return objEquiv(actual, expected, strict, memos);
                }
            }

            function isArguments(object) {
                return Object.prototype.toString.call(object) == '[object Arguments]';
            }

            function objEquiv(a, b, strict, actualVisitedObjects) {
                if (a === null || a === undefined || b === null || b === undefined)
                    return false;
                // if one is a primitive, the other must be same
                if (util.isPrimitive(a) || util.isPrimitive(b))
                    return a === b;
                if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
                    return false;
                var aIsArgs = isArguments(a);
                var bIsArgs = isArguments(b);
                if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
                    return false;
                if (aIsArgs) {
                    a = pSlice.call(a);
                    b = pSlice.call(b);
                    return _deepEqual(a, b, strict);
                }
                var ka = objectKeys(a);
                var kb = objectKeys(b);
                var key, i;
                // having the same number of owned properties (keys incorporates
                // hasOwnProperty)
                if (ka.length !== kb.length)
                    return false;
                //the same set of keys (although not necessarily the same order),
                ka.sort();
                kb.sort();
                //~~~cheap key test
                for (i = ka.length - 1; i >= 0; i--) {
                    if (ka[i] !== kb[i])
                        return false;
                }
                //equivalent values for every corresponding key, and
                //~~~possibly expensive deep test
                for (i = ka.length - 1; i >= 0; i--) {
                    key = ka[i];
                    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
                        return false;
                }
                return true;
            }

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

            assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
                if (_deepEqual(actual, expected, false)) {
                    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
                }
            };

            assert.notDeepStrictEqual = notDeepStrictEqual;
            function notDeepStrictEqual(actual, expected, message) {
                if (_deepEqual(actual, expected, true)) {
                    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
                }
            }


// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

            assert.strictEqual = function strictEqual(actual, expected, message) {
                if (actual !== expected) {
                    fail(actual, expected, message, '===', assert.strictEqual);
                }
            };

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

            assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
                if (actual === expected) {
                    fail(actual, expected, message, '!==', assert.notStrictEqual);
                }
            };

            function expectedException(actual, expected) {
                if (!actual || !expected) {
                    return false;
                }

                if (Object.prototype.toString.call(expected) == '[object RegExp]') {
                    return expected.test(actual);
                }

                try {
                    if (actual instanceof expected) {
                        return true;
                    }
                } catch (e) {
                    // Ignore.  The instanceof check doesn't work for arrow functions.
                }

                if (Error.isPrototypeOf(expected)) {
                    return false;
                }

                return expected.call({}, actual) === true;
            }

            function _tryBlock(block) {
                var error;
                try {
                    block();
                } catch (e) {
                    error = e;
                }
                return error;
            }

            function _throws(shouldThrow, block, expected, message) {
                var actual;

                if (typeof block !== 'function') {
                    throw new TypeError('"block" argument must be a function');
                }

                if (typeof expected === 'string') {
                    message = expected;
                    expected = null;
                }

                actual = _tryBlock(block);

                message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
                    (message ? ' ' + message : '.');

                if (shouldThrow && !actual) {
                    fail(actual, expected, 'Missing expected exception' + message);
                }

                var userProvidedMessage = typeof message === 'string';
                var isUnwantedException = !shouldThrow && util.isError(actual);
                var isUnexpectedException = !shouldThrow && actual && !expected;

                if ((isUnwantedException &&
                    userProvidedMessage &&
                    expectedException(actual, expected)) ||
                    isUnexpectedException) {
                    fail(actual, expected, 'Got unwanted exception' + message);
                }

                if ((shouldThrow && actual && expected &&
                    !expectedException(actual, expected)) || (!shouldThrow && actual)) {
                    throw actual;
                }
            }

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

            assert.throws = function(block, /*optional*/error, /*optional*/message) {
                _throws(true, block, error, message);
            };

// EXTENSION! This is annoying to write outside this module.
            assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
                _throws(false, block, error, message);
            };

            assert.ifError = function(err) { if (err) throw err; };

            var objectKeys = Object.keys || function (obj) {
                var keys = [];
                for (var key in obj) {
                    if (hasOwn.call(obj, key)) keys.push(key);
                }
                return keys;
            };

        }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

    },{"util/":"/bytetrade-js/node_modules/util/util.js"}],"/bytetrade-js/node_modules/base-x/index.js":[function(require,module,exports){
// base-x encoding
// Forked from https://github.com/cryptocoinjs/bs58
// Originally written by Mike Hearn for BitcoinJ
// Copyright (c) 2011 Google Inc
// Ported to JavaScript by Stefan Thomas
// Merged Buffer refactorings from base58-native by Stephen Pair
// Copyright (c) 2013 BitPay Inc

        var Buffer = require('safe-buffer').Buffer

        module.exports = function base (ALPHABET) {
            var ALPHABET_MAP = {}
            var BASE = ALPHABET.length
            var LEADER = ALPHABET.charAt(0)

            // pre-compute lookup table
            for (var z = 0; z < ALPHABET.length; z++) {
                var x = ALPHABET.charAt(z)

                if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')
                ALPHABET_MAP[x] = z
            }

            function encode (source) {
                if (source.length === 0) return ''

                var digits = [0]
                for (var i = 0; i < source.length; ++i) {
                    for (var j = 0, carry = source[i]; j < digits.length; ++j) {
                        carry += digits[j] << 8
                        digits[j] = carry % BASE
                        carry = (carry / BASE) | 0
                    }

                    while (carry > 0) {
                        digits.push(carry % BASE)
                        carry = (carry / BASE) | 0
                    }
                }

                var string = ''

                // deal with leading zeros
                for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) string += LEADER
                // convert digits to a string
                for (var q = digits.length - 1; q >= 0; --q) string += ALPHABET[digits[q]]

                return string
            }

            function decodeUnsafe (string) {
                if (typeof string !== 'string') throw new TypeError('Expected String')
                if (string.length === 0) return Buffer.allocUnsafe(0)

                var bytes = [0]
                for (var i = 0; i < string.length; i++) {
                    var value = ALPHABET_MAP[string[i]]
                    if (value === undefined) return

                    for (var j = 0, carry = value; j < bytes.length; ++j) {
                        carry += bytes[j] * BASE
                        bytes[j] = carry & 0xff
                        carry >>= 8
                    }

                    while (carry > 0) {
                        bytes.push(carry & 0xff)
                        carry >>= 8
                    }
                }

                // deal with leading zeros
                for (var k = 0; string[k] === LEADER && k < string.length - 1; ++k) {
                    bytes.push(0)
                }

                return Buffer.from(bytes.reverse())
            }

            function decode (string) {
                var buffer = decodeUnsafe(string)
                if (buffer) return buffer

                throw new Error('Non-base' + BASE + ' character')
            }

            return {
                encode: encode,
                decodeUnsafe: decodeUnsafe,
                decode: decode
            }
        }

    },{"safe-buffer":"/bytetrade-js/node_modules/safe-buffer/index.js"}],"/bytetrade-js/node_modules/base64-js/index.js":[function(require,module,exports){
        'use strict'

        exports.byteLength = byteLength
        exports.toByteArray = toByteArray
        exports.fromByteArray = fromByteArray

        var lookup = []
        var revLookup = []
        var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

        var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
        for (var i = 0, len = code.length; i < len; ++i) {
            lookup[i] = code[i]
            revLookup[code.charCodeAt(i)] = i
        }

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
        revLookup['-'.charCodeAt(0)] = 62
        revLookup['_'.charCodeAt(0)] = 63

        function getLens (b64) {
            var len = b64.length

            if (len % 4 > 0) {
                throw new Error('Invalid string. Length must be a multiple of 4')
            }

            // Trim off extra bytes after placeholder bytes are found
            // See: https://github.com/beatgammit/base64-js/issues/42
            var validLen = b64.indexOf('=')
            if (validLen === -1) validLen = len

            var placeHoldersLen = validLen === len
                ? 0
                : 4 - (validLen % 4)

            return [validLen, placeHoldersLen]
        }

// base64 is 4/3 + up to two characters of the original data
        function byteLength (b64) {
            var lens = getLens(b64)
            var validLen = lens[0]
            var placeHoldersLen = lens[1]
            return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
        }

        function _byteLength (b64, validLen, placeHoldersLen) {
            return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
        }

        function toByteArray (b64) {
            var tmp
            var lens = getLens(b64)
            var validLen = lens[0]
            var placeHoldersLen = lens[1]

            var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

            var curByte = 0

            // if there are placeholders, only get up to the last complete 4 chars
            var len = placeHoldersLen > 0
                ? validLen - 4
                : validLen

            for (var i = 0; i < len; i += 4) {
                tmp =
                    (revLookup[b64.charCodeAt(i)] << 18) |
                    (revLookup[b64.charCodeAt(i + 1)] << 12) |
                    (revLookup[b64.charCodeAt(i + 2)] << 6) |
                    revLookup[b64.charCodeAt(i + 3)]
                arr[curByte++] = (tmp >> 16) & 0xFF
                arr[curByte++] = (tmp >> 8) & 0xFF
                arr[curByte++] = tmp & 0xFF
            }

            if (placeHoldersLen === 2) {
                tmp =
                    (revLookup[b64.charCodeAt(i)] << 2) |
                    (revLookup[b64.charCodeAt(i + 1)] >> 4)
                arr[curByte++] = tmp & 0xFF
            }

            if (placeHoldersLen === 1) {
                tmp =
                    (revLookup[b64.charCodeAt(i)] << 10) |
                    (revLookup[b64.charCodeAt(i + 1)] << 4) |
                    (revLookup[b64.charCodeAt(i + 2)] >> 2)
                arr[curByte++] = (tmp >> 8) & 0xFF
                arr[curByte++] = tmp & 0xFF
            }

            return arr
        }

        function tripletToBase64 (num) {
            return lookup[num >> 18 & 0x3F] +
                lookup[num >> 12 & 0x3F] +
                lookup[num >> 6 & 0x3F] +
                lookup[num & 0x3F]
        }

        function encodeChunk (uint8, start, end) {
            var tmp
            var output = []
            for (var i = start; i < end; i += 3) {
                tmp =
                    ((uint8[i] << 16) & 0xFF0000) +
                    ((uint8[i + 1] << 8) & 0xFF00) +
                    (uint8[i + 2] & 0xFF)
                output.push(tripletToBase64(tmp))
            }
            return output.join('')
        }

        function fromByteArray (uint8) {
            var tmp
            var len = uint8.length
            var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
            var parts = []
            var maxChunkLength = 16383 // must be multiple of 3

            // go through the array every three bytes, we'll deal with trailing stuff later
            for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
                parts.push(encodeChunk(
                    uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
                ))
            }

            // pad the end with zeros, but make sure to not forget the extra bytes
            if (extraBytes === 1) {
                tmp = uint8[len - 1]
                parts.push(
                    lookup[tmp >> 2] +
                    lookup[(tmp << 4) & 0x3F] +
                    '=='
                )
            } else if (extraBytes === 2) {
                tmp = (uint8[len - 2] << 8) + uint8[len - 1]
                parts.push(
                    lookup[tmp >> 10] +
                    lookup[(tmp >> 4) & 0x3F] +
                    lookup[(tmp << 2) & 0x3F] +
                    '='
                )
            }

            return parts.join('')
        }

    },{}],"/bytetrade-js/node_modules/bigi/lib/bigi.js":[function(require,module,exports){
// (public) Constructor
        function BigInteger(a, b, c) {
            if (!(this instanceof BigInteger))
                return new BigInteger(a, b, c)

            if (a != null) {
                if ("number" == typeof a) this.fromNumber(a, b, c)
                else if (b == null && "string" != typeof a) this.fromString(a, 256)
                else this.fromString(a, b)
            }
        }

        var proto = BigInteger.prototype

// duck-typed isBigInteger
        proto.__bigi = require('../package.json').version
        BigInteger.isBigInteger = function (obj, check_ver) {
            return obj && obj.__bigi && (!check_ver || obj.__bigi === proto.__bigi)
        }

// Bits per digit
        var dbits

// am: Compute w_j += (x*this_i), propagate carries,
// c is initial carry, returns final carry.
// c < 3*dvalue, x < 2*dvalue, this_i < dvalue
// We need to select the fastest one that works in this environment.

// am1: use a single mult and divide to get the high bits,
// max digit bits should be 26 because
// max internal value = 2*dvalue^2-2*dvalue (< 2^53)
        function am1(i, x, w, j, c, n) {
            while (--n >= 0) {
                var v = x * this[i++] + w[j] + c
                c = Math.floor(v / 0x4000000)
                w[j++] = v & 0x3ffffff
            }
            return c
        }
// am2 avoids a big mult-and-extract completely.
// Max digit bits should be <= 30 because we do bitwise ops
// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
        function am2(i, x, w, j, c, n) {
            var xl = x & 0x7fff,
                xh = x >> 15
            while (--n >= 0) {
                var l = this[i] & 0x7fff
                var h = this[i++] >> 15
                var m = xh * l + h * xl
                l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff)
                c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30)
                w[j++] = l & 0x3fffffff
            }
            return c
        }
// Alternately, set max digit bits to 28 since some
// browsers slow down when dealing with 32-bit numbers.
        function am3(i, x, w, j, c, n) {
            var xl = x & 0x3fff,
                xh = x >> 14
            while (--n >= 0) {
                var l = this[i] & 0x3fff
                var h = this[i++] >> 14
                var m = xh * l + h * xl
                l = xl * l + ((m & 0x3fff) << 14) + w[j] + c
                c = (l >> 28) + (m >> 14) + xh * h
                w[j++] = l & 0xfffffff
            }
            return c
        }

// wtf?
        BigInteger.prototype.am = am1
        dbits = 26

        BigInteger.prototype.DB = dbits
        BigInteger.prototype.DM = ((1 << dbits) - 1)
        var DV = BigInteger.prototype.DV = (1 << dbits)

        var BI_FP = 52
        BigInteger.prototype.FV = Math.pow(2, BI_FP)
        BigInteger.prototype.F1 = BI_FP - dbits
        BigInteger.prototype.F2 = 2 * dbits - BI_FP

// Digit conversions
        var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz"
        var BI_RC = new Array()
        var rr, vv
        rr = "0".charCodeAt(0)
        for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv
        rr = "a".charCodeAt(0)
        for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv
        rr = "A".charCodeAt(0)
        for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv

        function int2char(n) {
            return BI_RM.charAt(n)
        }

        function intAt(s, i) {
            var c = BI_RC[s.charCodeAt(i)]
            return (c == null) ? -1 : c
        }

// (protected) copy this to r
        function bnpCopyTo(r) {
            for (var i = this.t - 1; i >= 0; --i) r[i] = this[i]
            r.t = this.t
            r.s = this.s
        }

// (protected) set from integer value x, -DV <= x < DV
        function bnpFromInt(x) {
            this.t = 1
            this.s = (x < 0) ? -1 : 0
            if (x > 0) this[0] = x
            else if (x < -1) this[0] = x + DV
            else this.t = 0
        }

// return bigint initialized to value
        function nbv(i) {
            var r = new BigInteger()
            r.fromInt(i)
            return r
        }

// (protected) set from string and radix
        function bnpFromString(s, b) {
            var self = this

            var k
            if (b == 16) k = 4
            else if (b == 8) k = 3
            else if (b == 256) k = 8; // byte array
            else if (b == 2) k = 1
            else if (b == 32) k = 5
            else if (b == 4) k = 2
            else {
                self.fromRadix(s, b)
                return
            }
            self.t = 0
            self.s = 0
            var i = s.length,
                mi = false,
                sh = 0
            while (--i >= 0) {
                var x = (k == 8) ? s[i] & 0xff : intAt(s, i)
                if (x < 0) {
                    if (s.charAt(i) == "-") mi = true
                    continue
                }
                mi = false
                if (sh == 0)
                    self[self.t++] = x
                else if (sh + k > self.DB) {
                    self[self.t - 1] |= (x & ((1 << (self.DB - sh)) - 1)) << sh
                    self[self.t++] = (x >> (self.DB - sh))
                } else
                    self[self.t - 1] |= x << sh
                sh += k
                if (sh >= self.DB) sh -= self.DB
            }
            if (k == 8 && (s[0] & 0x80) != 0) {
                self.s = -1
                if (sh > 0) self[self.t - 1] |= ((1 << (self.DB - sh)) - 1) << sh
            }
            self.clamp()
            if (mi) BigInteger.ZERO.subTo(self, self)
        }

// (protected) clamp off excess high words
        function bnpClamp() {
            var c = this.s & this.DM
            while (this.t > 0 && this[this.t - 1] == c)--this.t
        }

// (public) return string representation in given radix
        function bnToString(b) {
            var self = this
            if (self.s < 0) return "-" + self.negate()
                .toString(b)
            var k
            if (b == 16) k = 4
            else if (b == 8) k = 3
            else if (b == 2) k = 1
            else if (b == 32) k = 5
            else if (b == 4) k = 2
            else return self.toRadix(b)
            var km = (1 << k) - 1,
                d, m = false,
                r = "",
                i = self.t
            var p = self.DB - (i * self.DB) % k
            if (i-- > 0) {
                if (p < self.DB && (d = self[i] >> p) > 0) {
                    m = true
                    r = int2char(d)
                }
                while (i >= 0) {
                    if (p < k) {
                        d = (self[i] & ((1 << p) - 1)) << (k - p)
                        d |= self[--i] >> (p += self.DB - k)
                    } else {
                        d = (self[i] >> (p -= k)) & km
                        if (p <= 0) {
                            p += self.DB
                            --i
                        }
                    }
                    if (d > 0) m = true
                    if (m) r += int2char(d)
                }
            }
            return m ? r : "0"
        }

// (public) -this
        function bnNegate() {
            var r = new BigInteger()
            BigInteger.ZERO.subTo(this, r)
            return r
        }

// (public) |this|
        function bnAbs() {
            return (this.s < 0) ? this.negate() : this
        }

// (public) return + if this > a, - if this < a, 0 if equal
        function bnCompareTo(a) {
            var r = this.s - a.s
            if (r != 0) return r
            var i = this.t
            r = i - a.t
            if (r != 0) return (this.s < 0) ? -r : r
            while (--i >= 0)
                if ((r = this[i] - a[i]) != 0) return r
            return 0
        }

// returns bit length of the integer x
        function nbits(x) {
            var r = 1,
                t
            if ((t = x >>> 16) != 0) {
                x = t
                r += 16
            }
            if ((t = x >> 8) != 0) {
                x = t
                r += 8
            }
            if ((t = x >> 4) != 0) {
                x = t
                r += 4
            }
            if ((t = x >> 2) != 0) {
                x = t
                r += 2
            }
            if ((t = x >> 1) != 0) {
                x = t
                r += 1
            }
            return r
        }

// (public) return the number of bits in "this"
        function bnBitLength() {
            if (this.t <= 0) return 0
            return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM))
        }

// (public) return the number of bytes in "this"
        function bnByteLength() {
            return this.bitLength() >> 3
        }

// (protected) r = this << n*DB
        function bnpDLShiftTo(n, r) {
            var i
            for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i]
            for (i = n - 1; i >= 0; --i) r[i] = 0
            r.t = this.t + n
            r.s = this.s
        }

// (protected) r = this >> n*DB
        function bnpDRShiftTo(n, r) {
            for (var i = n; i < this.t; ++i) r[i - n] = this[i]
            r.t = Math.max(this.t - n, 0)
            r.s = this.s
        }

// (protected) r = this << n
        function bnpLShiftTo(n, r) {
            var self = this
            var bs = n % self.DB
            var cbs = self.DB - bs
            var bm = (1 << cbs) - 1
            var ds = Math.floor(n / self.DB),
                c = (self.s << bs) & self.DM,
                i
            for (i = self.t - 1; i >= 0; --i) {
                r[i + ds + 1] = (self[i] >> cbs) | c
                c = (self[i] & bm) << bs
            }
            for (i = ds - 1; i >= 0; --i) r[i] = 0
            r[ds] = c
            r.t = self.t + ds + 1
            r.s = self.s
            r.clamp()
        }

// (protected) r = this >> n
        function bnpRShiftTo(n, r) {
            var self = this
            r.s = self.s
            var ds = Math.floor(n / self.DB)
            if (ds >= self.t) {
                r.t = 0
                return
            }
            var bs = n % self.DB
            var cbs = self.DB - bs
            var bm = (1 << bs) - 1
            r[0] = self[ds] >> bs
            for (var i = ds + 1; i < self.t; ++i) {
                r[i - ds - 1] |= (self[i] & bm) << cbs
                r[i - ds] = self[i] >> bs
            }
            if (bs > 0) r[self.t - ds - 1] |= (self.s & bm) << cbs
            r.t = self.t - ds
            r.clamp()
        }

// (protected) r = this - a
        function bnpSubTo(a, r) {
            var self = this
            var i = 0,
                c = 0,
                m = Math.min(a.t, self.t)
            while (i < m) {
                c += self[i] - a[i]
                r[i++] = c & self.DM
                c >>= self.DB
            }
            if (a.t < self.t) {
                c -= a.s
                while (i < self.t) {
                    c += self[i]
                    r[i++] = c & self.DM
                    c >>= self.DB
                }
                c += self.s
            } else {
                c += self.s
                while (i < a.t) {
                    c -= a[i]
                    r[i++] = c & self.DM
                    c >>= self.DB
                }
                c -= a.s
            }
            r.s = (c < 0) ? -1 : 0
            if (c < -1) r[i++] = self.DV + c
            else if (c > 0) r[i++] = c
            r.t = i
            r.clamp()
        }

// (protected) r = this * a, r != this,a (HAC 14.12)
// "this" should be the larger one if appropriate.
        function bnpMultiplyTo(a, r) {
            var x = this.abs(),
                y = a.abs()
            var i = x.t
            r.t = i + y.t
            while (--i >= 0) r[i] = 0
            for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t)
            r.s = 0
            r.clamp()
            if (this.s != a.s) BigInteger.ZERO.subTo(r, r)
        }

// (protected) r = this^2, r != this (HAC 14.16)
        function bnpSquareTo(r) {
            var x = this.abs()
            var i = r.t = 2 * x.t
            while (--i >= 0) r[i] = 0
            for (i = 0; i < x.t - 1; ++i) {
                var c = x.am(i, x[i], r, 2 * i, 0, 1)
                if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
                    r[i + x.t] -= x.DV
                    r[i + x.t + 1] = 1
                }
            }
            if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1)
            r.s = 0
            r.clamp()
        }

// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
// r != q, this != m.  q or r may be null.
        function bnpDivRemTo(m, q, r) {
            var self = this
            var pm = m.abs()
            if (pm.t <= 0) return
            var pt = self.abs()
            if (pt.t < pm.t) {
                if (q != null) q.fromInt(0)
                if (r != null) self.copyTo(r)
                return
            }
            if (r == null) r = new BigInteger()
            var y = new BigInteger(),
                ts = self.s,
                ms = m.s
            var nsh = self.DB - nbits(pm[pm.t - 1]); // normalize modulus
            if (nsh > 0) {
                pm.lShiftTo(nsh, y)
                pt.lShiftTo(nsh, r)
            } else {
                pm.copyTo(y)
                pt.copyTo(r)
            }
            var ys = y.t
            var y0 = y[ys - 1]
            if (y0 == 0) return
            var yt = y0 * (1 << self.F1) + ((ys > 1) ? y[ys - 2] >> self.F2 : 0)
            var d1 = self.FV / yt,
                d2 = (1 << self.F1) / yt,
                e = 1 << self.F2
            var i = r.t,
                j = i - ys,
                t = (q == null) ? new BigInteger() : q
            y.dlShiftTo(j, t)
            if (r.compareTo(t) >= 0) {
                r[r.t++] = 1
                r.subTo(t, r)
            }
            BigInteger.ONE.dlShiftTo(ys, t)
            t.subTo(y, y); // "negative" y so we can replace sub with am later
            while (y.t < ys) y[y.t++] = 0
            while (--j >= 0) {
                // Estimate quotient digit
                var qd = (r[--i] == y0) ? self.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2)
                if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) { // Try it out
                    y.dlShiftTo(j, t)
                    r.subTo(t, r)
                    while (r[i] < --qd) r.subTo(t, r)
                }
            }
            if (q != null) {
                r.drShiftTo(ys, q)
                if (ts != ms) BigInteger.ZERO.subTo(q, q)
            }
            r.t = ys
            r.clamp()
            if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder
            if (ts < 0) BigInteger.ZERO.subTo(r, r)
        }

// (public) this mod a
        function bnMod(a) {
            var r = new BigInteger()
            this.abs()
                .divRemTo(a, null, r)
            if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r)
            return r
        }

// Modular reduction using "classic" algorithm
        function Classic(m) {
            this.m = m
        }

        function cConvert(x) {
            if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m)
            else return x
        }

        function cRevert(x) {
            return x
        }

        function cReduce(x) {
            x.divRemTo(this.m, null, x)
        }

        function cMulTo(x, y, r) {
            x.multiplyTo(y, r)
            this.reduce(r)
        }

        function cSqrTo(x, r) {
            x.squareTo(r)
            this.reduce(r)
        }

        Classic.prototype.convert = cConvert
        Classic.prototype.revert = cRevert
        Classic.prototype.reduce = cReduce
        Classic.prototype.mulTo = cMulTo
        Classic.prototype.sqrTo = cSqrTo

// (protected) return "-1/this % 2^DB"; useful for Mont. reduction
// justification:
//         xy == 1 (mod m)
//         xy =  1+km
//   xy(2-xy) = (1+km)(1-km)
// x[y(2-xy)] = 1-k^2m^2
// x[y(2-xy)] == 1 (mod m^2)
// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
// JS multiply "overflows" differently from C/C++, so care is needed here.
        function bnpInvDigit() {
            if (this.t < 1) return 0
            var x = this[0]
            if ((x & 1) == 0) return 0
            var y = x & 3; // y == 1/x mod 2^2
            y = (y * (2 - (x & 0xf) * y)) & 0xf; // y == 1/x mod 2^4
            y = (y * (2 - (x & 0xff) * y)) & 0xff; // y == 1/x mod 2^8
            y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff; // y == 1/x mod 2^16
            // last step - calculate inverse mod DV directly
            // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
            y = (y * (2 - x * y % this.DV)) % this.DV; // y == 1/x mod 2^dbits
            // we really want the negative inverse, and -DV < y < DV
            return (y > 0) ? this.DV - y : -y
        }

// Montgomery reduction
        function Montgomery(m) {
            this.m = m
            this.mp = m.invDigit()
            this.mpl = this.mp & 0x7fff
            this.mph = this.mp >> 15
            this.um = (1 << (m.DB - 15)) - 1
            this.mt2 = 2 * m.t
        }

// xR mod m
        function montConvert(x) {
            var r = new BigInteger()
            x.abs()
                .dlShiftTo(this.m.t, r)
            r.divRemTo(this.m, null, r)
            if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r)
            return r
        }

// x/R mod m
        function montRevert(x) {
            var r = new BigInteger()
            x.copyTo(r)
            this.reduce(r)
            return r
        }

// x = x/R mod m (HAC 14.32)
        function montReduce(x) {
            while (x.t <= this.mt2) // pad x so am has enough room later
                x[x.t++] = 0
            for (var i = 0; i < this.m.t; ++i) {
                // faster way of calculating u0 = x[i]*mp mod DV
                var j = x[i] & 0x7fff
                var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM
                // use am to combine the multiply-shift-add into one call
                j = i + this.m.t
                x[j] += this.m.am(0, u0, x, i, 0, this.m.t)
                // propagate carry
                while (x[j] >= x.DV) {
                    x[j] -= x.DV
                    x[++j]++
                }
            }
            x.clamp()
            x.drShiftTo(this.m.t, x)
            if (x.compareTo(this.m) >= 0) x.subTo(this.m, x)
        }

// r = "x^2/R mod m"; x != r
        function montSqrTo(x, r) {
            x.squareTo(r)
            this.reduce(r)
        }

// r = "xy/R mod m"; x,y != r
        function montMulTo(x, y, r) {
            x.multiplyTo(y, r)
            this.reduce(r)
        }

        Montgomery.prototype.convert = montConvert
        Montgomery.prototype.revert = montRevert
        Montgomery.prototype.reduce = montReduce
        Montgomery.prototype.mulTo = montMulTo
        Montgomery.prototype.sqrTo = montSqrTo

// (protected) true iff this is even
        function bnpIsEven() {
            return ((this.t > 0) ? (this[0] & 1) : this.s) == 0
        }

// (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
        function bnpExp(e, z) {
            if (e > 0xffffffff || e < 1) return BigInteger.ONE
            var r = new BigInteger(),
                r2 = new BigInteger(),
                g = z.convert(this),
                i = nbits(e) - 1
            g.copyTo(r)
            while (--i >= 0) {
                z.sqrTo(r, r2)
                if ((e & (1 << i)) > 0) z.mulTo(r2, g, r)
                else {
                    var t = r
                    r = r2
                    r2 = t
                }
            }
            return z.revert(r)
        }

// (public) this^e % m, 0 <= e < 2^32
        function bnModPowInt(e, m) {
            var z
            if (e < 256 || m.isEven()) z = new Classic(m)
            else z = new Montgomery(m)
            return this.exp(e, z)
        }

// protected
        proto.copyTo = bnpCopyTo
        proto.fromInt = bnpFromInt
        proto.fromString = bnpFromString
        proto.clamp = bnpClamp
        proto.dlShiftTo = bnpDLShiftTo
        proto.drShiftTo = bnpDRShiftTo
        proto.lShiftTo = bnpLShiftTo
        proto.rShiftTo = bnpRShiftTo
        proto.subTo = bnpSubTo
        proto.multiplyTo = bnpMultiplyTo
        proto.squareTo = bnpSquareTo
        proto.divRemTo = bnpDivRemTo
        proto.invDigit = bnpInvDigit
        proto.isEven = bnpIsEven
        proto.exp = bnpExp

// public
        proto.toString = bnToString
        proto.negate = bnNegate
        proto.abs = bnAbs
        proto.compareTo = bnCompareTo
        proto.bitLength = bnBitLength
        proto.byteLength = bnByteLength
        proto.mod = bnMod
        proto.modPowInt = bnModPowInt

// (public)
        function bnClone() {
            var r = new BigInteger()
            this.copyTo(r)
            return r
        }

// (public) return value as integer
        function bnIntValue() {
            if (this.s < 0) {
                if (this.t == 1) return this[0] - this.DV
                else if (this.t == 0) return -1
            } else if (this.t == 1) return this[0]
            else if (this.t == 0) return 0
            // assumes 16 < DB < 32
            return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0]
        }

// (public) return value as byte
        function bnByteValue() {
            return (this.t == 0) ? this.s : (this[0] << 24) >> 24
        }

// (public) return value as short (assumes DB>=16)
        function bnShortValue() {
            return (this.t == 0) ? this.s : (this[0] << 16) >> 16
        }

// (protected) return x s.t. r^x < DV
        function bnpChunkSize(r) {
            return Math.floor(Math.LN2 * this.DB / Math.log(r))
        }

// (public) 0 if this == 0, 1 if this > 0
        function bnSigNum() {
            if (this.s < 0) return -1
            else if (this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0
            else return 1
        }

// (protected) convert to radix string
        function bnpToRadix(b) {
            if (b == null) b = 10
            if (this.signum() == 0 || b < 2 || b > 36) return "0"
            var cs = this.chunkSize(b)
            var a = Math.pow(b, cs)
            var d = nbv(a),
                y = new BigInteger(),
                z = new BigInteger(),
                r = ""
            this.divRemTo(d, y, z)
            while (y.signum() > 0) {
                r = (a + z.intValue())
                    .toString(b)
                    .substr(1) + r
                y.divRemTo(d, y, z)
            }
            return z.intValue()
                .toString(b) + r
        }

// (protected) convert from radix string
        function bnpFromRadix(s, b) {
            var self = this
            self.fromInt(0)
            if (b == null) b = 10
            var cs = self.chunkSize(b)
            var d = Math.pow(b, cs),
                mi = false,
                j = 0,
                w = 0
            for (var i = 0; i < s.length; ++i) {
                var x = intAt(s, i)
                if (x < 0) {
                    if (s.charAt(i) == "-" && self.signum() == 0) mi = true
                    continue
                }
                w = b * w + x
                if (++j >= cs) {
                    self.dMultiply(d)
                    self.dAddOffset(w, 0)
                    j = 0
                    w = 0
                }
            }
            if (j > 0) {
                self.dMultiply(Math.pow(b, j))
                self.dAddOffset(w, 0)
            }
            if (mi) BigInteger.ZERO.subTo(self, self)
        }

// (protected) alternate constructor
        function bnpFromNumber(a, b, c) {
            var self = this
            if ("number" == typeof b) {
                // new BigInteger(int,int,RNG)
                if (a < 2) self.fromInt(1)
                else {
                    self.fromNumber(a, c)
                    if (!self.testBit(a - 1)) // force MSB set
                        self.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, self)
                    if (self.isEven()) self.dAddOffset(1, 0); // force odd
                    while (!self.isProbablePrime(b)) {
                        self.dAddOffset(2, 0)
                        if (self.bitLength() > a) self.subTo(BigInteger.ONE.shiftLeft(a - 1), self)
                    }
                }
            } else {
                // new BigInteger(int,RNG)
                var x = new Array(),
                    t = a & 7
                x.length = (a >> 3) + 1
                b.nextBytes(x)
                if (t > 0) x[0] &= ((1 << t) - 1)
                else x[0] = 0
                self.fromString(x, 256)
            }
        }

// (public) convert to bigendian byte array
        function bnToByteArray() {
            var self = this
            var i = self.t,
                r = new Array()
            r[0] = self.s
            var p = self.DB - (i * self.DB) % 8,
                d, k = 0
            if (i-- > 0) {
                if (p < self.DB && (d = self[i] >> p) != (self.s & self.DM) >> p)
                    r[k++] = d | (self.s << (self.DB - p))
                while (i >= 0) {
                    if (p < 8) {
                        d = (self[i] & ((1 << p) - 1)) << (8 - p)
                        d |= self[--i] >> (p += self.DB - 8)
                    } else {
                        d = (self[i] >> (p -= 8)) & 0xff
                        if (p <= 0) {
                            p += self.DB
                            --i
                        }
                    }
                    if ((d & 0x80) != 0) d |= -256
                    if (k === 0 && (self.s & 0x80) != (d & 0x80))++k
                    if (k > 0 || d != self.s) r[k++] = d
                }
            }
            return r
        }

        function bnEquals(a) {
            return (this.compareTo(a) == 0)
        }

        function bnMin(a) {
            return (this.compareTo(a) < 0) ? this : a
        }

        function bnMax(a) {
            return (this.compareTo(a) > 0) ? this : a
        }

// (protected) r = this op a (bitwise)
        function bnpBitwiseTo(a, op, r) {
            var self = this
            var i, f, m = Math.min(a.t, self.t)
            for (i = 0; i < m; ++i) r[i] = op(self[i], a[i])
            if (a.t < self.t) {
                f = a.s & self.DM
                for (i = m; i < self.t; ++i) r[i] = op(self[i], f)
                r.t = self.t
            } else {
                f = self.s & self.DM
                for (i = m; i < a.t; ++i) r[i] = op(f, a[i])
                r.t = a.t
            }
            r.s = op(self.s, a.s)
            r.clamp()
        }

// (public) this & a
        function op_and(x, y) {
            return x & y
        }

        function bnAnd(a) {
            var r = new BigInteger()
            this.bitwiseTo(a, op_and, r)
            return r
        }

// (public) this | a
        function op_or(x, y) {
            return x | y
        }

        function bnOr(a) {
            var r = new BigInteger()
            this.bitwiseTo(a, op_or, r)
            return r
        }

// (public) this ^ a
        function op_xor(x, y) {
            return x ^ y
        }

        function bnXor(a) {
            var r = new BigInteger()
            this.bitwiseTo(a, op_xor, r)
            return r
        }

// (public) this & ~a
        function op_andnot(x, y) {
            return x & ~y
        }

        function bnAndNot(a) {
            var r = new BigInteger()
            this.bitwiseTo(a, op_andnot, r)
            return r
        }

// (public) ~this
        function bnNot() {
            var r = new BigInteger()
            for (var i = 0; i < this.t; ++i) r[i] = this.DM & ~this[i]
            r.t = this.t
            r.s = ~this.s
            return r
        }

// (public) this << n
        function bnShiftLeft(n) {
            var r = new BigInteger()
            if (n < 0) this.rShiftTo(-n, r)
            else this.lShiftTo(n, r)
            return r
        }

// (public) this >> n
        function bnShiftRight(n) {
            var r = new BigInteger()
            if (n < 0) this.lShiftTo(-n, r)
            else this.rShiftTo(n, r)
            return r
        }

// return index of lowest 1-bit in x, x < 2^31
        function lbit(x) {
            if (x == 0) return -1
            var r = 0
            if ((x & 0xffff) == 0) {
                x >>= 16
                r += 16
            }
            if ((x & 0xff) == 0) {
                x >>= 8
                r += 8
            }
            if ((x & 0xf) == 0) {
                x >>= 4
                r += 4
            }
            if ((x & 3) == 0) {
                x >>= 2
                r += 2
            }
            if ((x & 1) == 0)++r
            return r
        }

// (public) returns index of lowest 1-bit (or -1 if none)
        function bnGetLowestSetBit() {
            for (var i = 0; i < this.t; ++i)
                if (this[i] != 0) return i * this.DB + lbit(this[i])
            if (this.s < 0) return this.t * this.DB
            return -1
        }

// return number of 1 bits in x
        function cbit(x) {
            var r = 0
            while (x != 0) {
                x &= x - 1
                ++r
            }
            return r
        }

// (public) return number of set bits
        function bnBitCount() {
            var r = 0,
                x = this.s & this.DM
            for (var i = 0; i < this.t; ++i) r += cbit(this[i] ^ x)
            return r
        }

// (public) true iff nth bit is set
        function bnTestBit(n) {
            var j = Math.floor(n / this.DB)
            if (j >= this.t) return (this.s != 0)
            return ((this[j] & (1 << (n % this.DB))) != 0)
        }

// (protected) this op (1<<n)
        function bnpChangeBit(n, op) {
            var r = BigInteger.ONE.shiftLeft(n)
            this.bitwiseTo(r, op, r)
            return r
        }

// (public) this | (1<<n)
        function bnSetBit(n) {
            return this.changeBit(n, op_or)
        }

// (public) this & ~(1<<n)
        function bnClearBit(n) {
            return this.changeBit(n, op_andnot)
        }

// (public) this ^ (1<<n)
        function bnFlipBit(n) {
            return this.changeBit(n, op_xor)
        }

// (protected) r = this + a
        function bnpAddTo(a, r) {
            var self = this

            var i = 0,
                c = 0,
                m = Math.min(a.t, self.t)
            while (i < m) {
                c += self[i] + a[i]
                r[i++] = c & self.DM
                c >>= self.DB
            }
            if (a.t < self.t) {
                c += a.s
                while (i < self.t) {
                    c += self[i]
                    r[i++] = c & self.DM
                    c >>= self.DB
                }
                c += self.s
            } else {
                c += self.s
                while (i < a.t) {
                    c += a[i]
                    r[i++] = c & self.DM
                    c >>= self.DB
                }
                c += a.s
            }
            r.s = (c < 0) ? -1 : 0
            if (c > 0) r[i++] = c
            else if (c < -1) r[i++] = self.DV + c
            r.t = i
            r.clamp()
        }

// (public) this + a
        function bnAdd(a) {
            var r = new BigInteger()
            this.addTo(a, r)
            return r
        }

// (public) this - a
        function bnSubtract(a) {
            var r = new BigInteger()
            this.subTo(a, r)
            return r
        }

// (public) this * a
        function bnMultiply(a) {
            var r = new BigInteger()
            this.multiplyTo(a, r)
            return r
        }

// (public) this^2
        function bnSquare() {
            var r = new BigInteger()
            this.squareTo(r)
            return r
        }

// (public) this / a
        function bnDivide(a) {
            var r = new BigInteger()
            this.divRemTo(a, r, null)
            return r
        }

// (public) this % a
        function bnRemainder(a) {
            var r = new BigInteger()
            this.divRemTo(a, null, r)
            return r
        }

// (public) [this/a,this%a]
        function bnDivideAndRemainder(a) {
            var q = new BigInteger(),
                r = new BigInteger()
            this.divRemTo(a, q, r)
            return new Array(q, r)
        }

// (protected) this *= n, this >= 0, 1 < n < DV
        function bnpDMultiply(n) {
            this[this.t] = this.am(0, n - 1, this, 0, 0, this.t)
            ++this.t
            this.clamp()
        }

// (protected) this += n << w words, this >= 0
        function bnpDAddOffset(n, w) {
            if (n == 0) return
            while (this.t <= w) this[this.t++] = 0
            this[w] += n
            while (this[w] >= this.DV) {
                this[w] -= this.DV
                if (++w >= this.t) this[this.t++] = 0
                ++this[w]
            }
        }

// A "null" reducer
        function NullExp() {}

        function nNop(x) {
            return x
        }

        function nMulTo(x, y, r) {
            x.multiplyTo(y, r)
        }

        function nSqrTo(x, r) {
            x.squareTo(r)
        }

        NullExp.prototype.convert = nNop
        NullExp.prototype.revert = nNop
        NullExp.prototype.mulTo = nMulTo
        NullExp.prototype.sqrTo = nSqrTo

// (public) this^e
        function bnPow(e) {
            return this.exp(e, new NullExp())
        }

// (protected) r = lower n words of "this * a", a.t <= n
// "this" should be the larger one if appropriate.
        function bnpMultiplyLowerTo(a, n, r) {
            var i = Math.min(this.t + a.t, n)
            r.s = 0; // assumes a,this >= 0
            r.t = i
            while (i > 0) r[--i] = 0
            var j
            for (j = r.t - this.t; i < j; ++i) r[i + this.t] = this.am(0, a[i], r, i, 0, this.t)
            for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a[i], r, i, 0, n - i)
            r.clamp()
        }

// (protected) r = "this * a" without lower n words, n > 0
// "this" should be the larger one if appropriate.
        function bnpMultiplyUpperTo(a, n, r) {
            --n
            var i = r.t = this.t + a.t - n
            r.s = 0; // assumes a,this >= 0
            while (--i >= 0) r[i] = 0
            for (i = Math.max(n - this.t, 0); i < a.t; ++i)
                r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n)
            r.clamp()
            r.drShiftTo(1, r)
        }

// Barrett modular reduction
        function Barrett(m) {
            // setup Barrett
            this.r2 = new BigInteger()
            this.q3 = new BigInteger()
            BigInteger.ONE.dlShiftTo(2 * m.t, this.r2)
            this.mu = this.r2.divide(m)
            this.m = m
        }

        function barrettConvert(x) {
            if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m)
            else if (x.compareTo(this.m) < 0) return x
            else {
                var r = new BigInteger()
                x.copyTo(r)
                this.reduce(r)
                return r
            }
        }

        function barrettRevert(x) {
            return x
        }

// x = x mod m (HAC 14.42)
        function barrettReduce(x) {
            var self = this
            x.drShiftTo(self.m.t - 1, self.r2)
            if (x.t > self.m.t + 1) {
                x.t = self.m.t + 1
                x.clamp()
            }
            self.mu.multiplyUpperTo(self.r2, self.m.t + 1, self.q3)
            self.m.multiplyLowerTo(self.q3, self.m.t + 1, self.r2)
            while (x.compareTo(self.r2) < 0) x.dAddOffset(1, self.m.t + 1)
            x.subTo(self.r2, x)
            while (x.compareTo(self.m) >= 0) x.subTo(self.m, x)
        }

// r = x^2 mod m; x != r
        function barrettSqrTo(x, r) {
            x.squareTo(r)
            this.reduce(r)
        }

// r = x*y mod m; x,y != r
        function barrettMulTo(x, y, r) {
            x.multiplyTo(y, r)
            this.reduce(r)
        }

        Barrett.prototype.convert = barrettConvert
        Barrett.prototype.revert = barrettRevert
        Barrett.prototype.reduce = barrettReduce
        Barrett.prototype.mulTo = barrettMulTo
        Barrett.prototype.sqrTo = barrettSqrTo

// (public) this^e % m (HAC 14.85)
        function bnModPow(e, m) {
            var i = e.bitLength(),
                k, r = nbv(1),
                z
            if (i <= 0) return r
            else if (i < 18) k = 1
            else if (i < 48) k = 3
            else if (i < 144) k = 4
            else if (i < 768) k = 5
            else k = 6
            if (i < 8)
                z = new Classic(m)
            else if (m.isEven())
                z = new Barrett(m)
            else
                z = new Montgomery(m)

            // precomputation
            var g = new Array(),
                n = 3,
                k1 = k - 1,
                km = (1 << k) - 1
            g[1] = z.convert(this)
            if (k > 1) {
                var g2 = new BigInteger()
                z.sqrTo(g[1], g2)
                while (n <= km) {
                    g[n] = new BigInteger()
                    z.mulTo(g2, g[n - 2], g[n])
                    n += 2
                }
            }

            var j = e.t - 1,
                w, is1 = true,
                r2 = new BigInteger(),
                t
            i = nbits(e[j]) - 1
            while (j >= 0) {
                if (i >= k1) w = (e[j] >> (i - k1)) & km
                else {
                    w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i)
                    if (j > 0) w |= e[j - 1] >> (this.DB + i - k1)
                }

                n = k
                while ((w & 1) == 0) {
                    w >>= 1
                    --n
                }
                if ((i -= n) < 0) {
                    i += this.DB
                    --j
                }
                if (is1) { // ret == 1, don't bother squaring or multiplying it
                    g[w].copyTo(r)
                    is1 = false
                } else {
                    while (n > 1) {
                        z.sqrTo(r, r2)
                        z.sqrTo(r2, r)
                        n -= 2
                    }
                    if (n > 0) z.sqrTo(r, r2)
                    else {
                        t = r
                        r = r2
                        r2 = t
                    }
                    z.mulTo(r2, g[w], r)
                }

                while (j >= 0 && (e[j] & (1 << i)) == 0) {
                    z.sqrTo(r, r2)
                    t = r
                    r = r2
                    r2 = t
                    if (--i < 0) {
                        i = this.DB - 1
                        --j
                    }
                }
            }
            return z.revert(r)
        }

// (public) gcd(this,a) (HAC 14.54)
        function bnGCD(a) {
            var x = (this.s < 0) ? this.negate() : this.clone()
            var y = (a.s < 0) ? a.negate() : a.clone()
            if (x.compareTo(y) < 0) {
                var t = x
                x = y
                y = t
            }
            var i = x.getLowestSetBit(),
                g = y.getLowestSetBit()
            if (g < 0) return x
            if (i < g) g = i
            if (g > 0) {
                x.rShiftTo(g, x)
                y.rShiftTo(g, y)
            }
            while (x.signum() > 0) {
                if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x)
                if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y)
                if (x.compareTo(y) >= 0) {
                    x.subTo(y, x)
                    x.rShiftTo(1, x)
                } else {
                    y.subTo(x, y)
                    y.rShiftTo(1, y)
                }
            }
            if (g > 0) y.lShiftTo(g, y)
            return y
        }

// (protected) this % n, n < 2^26
        function bnpModInt(n) {
            if (n <= 0) return 0
            var d = this.DV % n,
                r = (this.s < 0) ? n - 1 : 0
            if (this.t > 0)
                if (d == 0) r = this[0] % n
                else
                    for (var i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n
            return r
        }

// (public) 1/this % m (HAC 14.61)
        function bnModInverse(m) {
            var ac = m.isEven()
            if (this.signum() === 0) throw new Error('division by zero')
            if ((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO
            var u = m.clone(),
                v = this.clone()
            var a = nbv(1),
                b = nbv(0),
                c = nbv(0),
                d = nbv(1)
            while (u.signum() != 0) {
                while (u.isEven()) {
                    u.rShiftTo(1, u)
                    if (ac) {
                        if (!a.isEven() || !b.isEven()) {
                            a.addTo(this, a)
                            b.subTo(m, b)
                        }
                        a.rShiftTo(1, a)
                    } else if (!b.isEven()) b.subTo(m, b)
                    b.rShiftTo(1, b)
                }
                while (v.isEven()) {
                    v.rShiftTo(1, v)
                    if (ac) {
                        if (!c.isEven() || !d.isEven()) {
                            c.addTo(this, c)
                            d.subTo(m, d)
                        }
                        c.rShiftTo(1, c)
                    } else if (!d.isEven()) d.subTo(m, d)
                    d.rShiftTo(1, d)
                }
                if (u.compareTo(v) >= 0) {
                    u.subTo(v, u)
                    if (ac) a.subTo(c, a)
                    b.subTo(d, b)
                } else {
                    v.subTo(u, v)
                    if (ac) c.subTo(a, c)
                    d.subTo(b, d)
                }
            }
            if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO
            while (d.compareTo(m) >= 0) d.subTo(m, d)
            while (d.signum() < 0) d.addTo(m, d)
            return d
        }

        var lowprimes = [
            2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,
            73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151,
            157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233,
            239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317,
            331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,
            421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503,
            509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,
            613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,
            709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811,
            821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911,
            919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997
        ]

        var lplim = (1 << 26) / lowprimes[lowprimes.length - 1]

// (public) test primality with certainty >= 1-.5^t
        function bnIsProbablePrime(t) {
            var i, x = this.abs()
            if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {
                for (i = 0; i < lowprimes.length; ++i)
                    if (x[0] == lowprimes[i]) return true
                return false
            }
            if (x.isEven()) return false
            i = 1
            while (i < lowprimes.length) {
                var m = lowprimes[i],
                    j = i + 1
                while (j < lowprimes.length && m < lplim) m *= lowprimes[j++]
                m = x.modInt(m)
                while (i < j) if (m % lowprimes[i++] == 0) return false
            }
            return x.millerRabin(t)
        }

// (protected) true if probably prime (HAC 4.24, Miller-Rabin)
        function bnpMillerRabin(t) {
            var n1 = this.subtract(BigInteger.ONE)
            var k = n1.getLowestSetBit()
            if (k <= 0) return false
            var r = n1.shiftRight(k)
            t = (t + 1) >> 1
            if (t > lowprimes.length) t = lowprimes.length
            var a = new BigInteger(null)
            var j, bases = []
            for (var i = 0; i < t; ++i) {
                for (;;) {
                    j = lowprimes[Math.floor(Math.random() * lowprimes.length)]
                    if (bases.indexOf(j) == -1) break
                }
                bases.push(j)
                a.fromInt(j)
                var y = a.modPow(r, this)
                if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
                    var j = 1
                    while (j++ < k && y.compareTo(n1) != 0) {
                        y = y.modPowInt(2, this)
                        if (y.compareTo(BigInteger.ONE) == 0) return false
                    }
                    if (y.compareTo(n1) != 0) return false
                }
            }
            return true
        }

// protected
        proto.chunkSize = bnpChunkSize
        proto.toRadix = bnpToRadix
        proto.fromRadix = bnpFromRadix
        proto.fromNumber = bnpFromNumber
        proto.bitwiseTo = bnpBitwiseTo
        proto.changeBit = bnpChangeBit
        proto.addTo = bnpAddTo
        proto.dMultiply = bnpDMultiply
        proto.dAddOffset = bnpDAddOffset
        proto.multiplyLowerTo = bnpMultiplyLowerTo
        proto.multiplyUpperTo = bnpMultiplyUpperTo
        proto.modInt = bnpModInt
        proto.millerRabin = bnpMillerRabin

// public
        proto.clone = bnClone
        proto.intValue = bnIntValue
        proto.byteValue = bnByteValue
        proto.shortValue = bnShortValue
        proto.signum = bnSigNum
        proto.toByteArray = bnToByteArray
        proto.equals = bnEquals
        proto.min = bnMin
        proto.max = bnMax
        proto.and = bnAnd
        proto.or = bnOr
        proto.xor = bnXor
        proto.andNot = bnAndNot
        proto.not = bnNot
        proto.shiftLeft = bnShiftLeft
        proto.shiftRight = bnShiftRight
        proto.getLowestSetBit = bnGetLowestSetBit
        proto.bitCount = bnBitCount
        proto.testBit = bnTestBit
        proto.setBit = bnSetBit
        proto.clearBit = bnClearBit
        proto.flipBit = bnFlipBit
        proto.add = bnAdd
        proto.subtract = bnSubtract
        proto.multiply = bnMultiply
        proto.divide = bnDivide
        proto.remainder = bnRemainder
        proto.divideAndRemainder = bnDivideAndRemainder
        proto.modPow = bnModPow
        proto.modInverse = bnModInverse
        proto.pow = bnPow
        proto.gcd = bnGCD
        proto.isProbablePrime = bnIsProbablePrime

// JSBN-specific extension
        proto.square = bnSquare

// constants
        BigInteger.ZERO = nbv(0)
        BigInteger.ONE = nbv(1)
        BigInteger.valueOf = nbv

        module.exports = BigInteger

    },{"../package.json":"/bytetrade-js/node_modules/bigi/package.json"}],"/bytetrade-js/node_modules/bigi/lib/convert.js":[function(require,module,exports){
        (function (Buffer){
// FIXME: Kind of a weird way to throw exceptions, consider removing
            var assert = require('assert')
            var BigInteger = require('./bigi')

            /**
             * Turns a byte array into a big integer.
             *
             * This function will interpret a byte array as a big integer in big
             * endian notation.
             */
            BigInteger.fromByteArrayUnsigned = function(byteArray) {
                // BigInteger expects a DER integer conformant byte array
                if (byteArray[0] & 0x80) {
                    return new BigInteger([0].concat(byteArray))
                }

                return new BigInteger(byteArray)
            }

            /**
             * Returns a byte array representation of the big integer.
             *
             * This returns the absolute of the contained value in big endian
             * form. A value of zero results in an empty array.
             */
            BigInteger.prototype.toByteArrayUnsigned = function() {
                var byteArray = this.toByteArray()
                return byteArray[0] === 0 ? byteArray.slice(1) : byteArray
            }

            BigInteger.fromDERInteger = function(byteArray) {
                return new BigInteger(byteArray)
            }

            /*
 * Converts BigInteger to a DER integer representation.
 *
 * The format for this value uses the most significant bit as a sign
 * bit.  If the most significant bit is already set and the integer is
 * positive, a 0x00 is prepended.
 *
 * Examples:
 *
 *      0 =>     0x00
 *      1 =>     0x01
 *     -1 =>     0xff
 *    127 =>     0x7f
 *   -127 =>     0x81
 *    128 =>   0x0080
 *   -128 =>     0x80
 *    255 =>   0x00ff
 *   -255 =>   0xff01
 *  16300 =>   0x3fac
 * -16300 =>   0xc054
 *  62300 => 0x00f35c
 * -62300 => 0xff0ca4
*/
            BigInteger.prototype.toDERInteger = BigInteger.prototype.toByteArray

            BigInteger.fromBuffer = function(buffer) {
                // BigInteger expects a DER integer conformant byte array
                if (buffer[0] & 0x80) {
                    var byteArray = Array.prototype.slice.call(buffer)

                    return new BigInteger([0].concat(byteArray))
                }

                return new BigInteger(buffer)
            }

            BigInteger.fromHex = function(hex) {
                if (hex === '') return BigInteger.ZERO

                assert.equal(hex, hex.match(/^[A-Fa-f0-9]+/), 'Invalid hex string')
                assert.equal(hex.length % 2, 0, 'Incomplete hex')
                return new BigInteger(hex, 16)
            }

            BigInteger.prototype.toBuffer = function(size) {
                var byteArray = this.toByteArrayUnsigned()
                var zeros = []

                var padding = size - byteArray.length
                while (zeros.length < padding) zeros.push(0)

                return new Buffer(zeros.concat(byteArray))
            }

            BigInteger.prototype.toHex = function(size) {
                return this.toBuffer(size).toString('hex')
            }

        }).call(this,require("buffer").Buffer)

    },{"./bigi":"/bytetrade-js/node_modules/bigi/lib/bigi.js","assert":"/bytetrade-js/node_modules/assert/assert.js","buffer":"/bytetrade-js/node_modules/buffer/index.js"}],"/bytetrade-js/node_modules/bigi/lib/index.js":[function(require,module,exports){
        var BigInteger = require('./bigi')

//addons
        require('./convert')

        module.exports = BigInteger
    },{"./bigi":"/bytetrade-js/node_modules/bigi/lib/bigi.js","./convert":"/bytetrade-js/node_modules/bigi/lib/convert.js"}],"/bytetrade-js/node_modules/bigi/package.json":[function(require,module,exports){
        module.exports={
            "_from": "bigi@^1.4.2",
            "_id": "bigi@1.4.2",
            "_inBundle": false,
            "_integrity": "sha1-nGZalfiLiwj8Bc/XMfVhhZ1yWCU=",
            "_location": "/bigi",
            "_phantomChildren": {},
            "_requested": {
                "type": "range",
                "registry": true,
                "raw": "bigi@^1.4.2",
                "name": "bigi",
                "escapedName": "bigi",
                "rawSpec": "^1.4.2",
                "saveSpec": null,
                "fetchSpec": "^1.4.2"
            },
            "_requiredBy": [
                "/",
                "/ecurve"
            ],
            "_resolved": "https://registry.npmjs.org/bigi/-/bigi-1.4.2.tgz",
            "_shasum": "9c665a95f88b8b08fc05cfd731f561859d725825",
            "_spec": "bigi@^1.4.2",
            "_where": "/bytetrade-js",
            "bugs": {
                "url": "https://github.com/cryptocoinjs/bigi/issues"
            },
            "bundleDependencies": false,
            "dependencies": {},
            "deprecated": false,
            "description": "Big integers.",
            "devDependencies": {
                "coveralls": "^2.11.2",
                "istanbul": "^0.3.5",
                "jshint": "^2.5.1",
                "mocha": "^2.1.0",
                "mochify": "^2.1.0"
            },
            "homepage": "https://github.com/cryptocoinjs/bigi#readme",
            "keywords": [
                "cryptography",
                "math",
                "bitcoin",
                "arbitrary",
                "precision",
                "arithmetic",
                "big",
                "integer",
                "int",
                "number",
                "biginteger",
                "bigint",
                "bignumber",
                "decimal",
                "float"
            ],
            "main": "./lib/index.js",
            "name": "bigi",
            "repository": {
                "url": "git+https://github.com/cryptocoinjs/bigi.git",
                "type": "git"
            },
            "scripts": {
                "browser-test": "mochify --wd -R spec",
                "coverage": "istanbul cover ./node_modules/.bin/_mocha -- --reporter list test/*.js",
                "coveralls": "npm run-script coverage && node ./node_modules/.bin/coveralls < coverage/lcov.info",
                "jshint": "jshint --config jshint.json lib/*.js ; true",
                "test": "_mocha -- test/*.js",
                "unit": "mocha"
            },
            "testling": {
                "files": "test/*.js",
                "harness": "mocha",
                "browsers": [
                    "ie/9..latest",
                    "firefox/latest",
                    "chrome/latest",
                    "safari/6.0..latest",
                    "iphone/6.0..latest",
                    "android-browser/4.2..latest"
                ]
            },
            "version": "1.4.2"
        }

    },{}],"/bytetrade-js/node_modules/bignumber.js/bignumber.js":[function(require,module,exports){
        ;(function (globalObject) {
            'use strict';

            /*
 *      bignumber.js v7.2.1
 *      A JavaScript library for arbitrary-precision arithmetic.
 *      https://github.com/MikeMcl/bignumber.js
 *      Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>
 *      MIT Licensed.
 *
 *      BigNumber.prototype methods     |  BigNumber methods
 *                                      |
 *      absoluteValue            abs    |  clone
 *      comparedTo                      |  config               set
 *      decimalPlaces            dp     |      DECIMAL_PLACES
 *      dividedBy                div    |      ROUNDING_MODE
 *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
 *      exponentiatedBy          pow    |      RANGE
 *      integerValue                    |      CRYPTO
 *      isEqualTo                eq     |      MODULO_MODE
 *      isFinite                        |      POW_PRECISION
 *      isGreaterThan            gt     |      FORMAT
 *      isGreaterThanOrEqualTo   gte    |      ALPHABET
 *      isInteger                       |  isBigNumber
 *      isLessThan               lt     |  maximum              max
 *      isLessThanOrEqualTo      lte    |  minimum              min
 *      isNaN                           |  random
 *      isNegative                      |
 *      isPositive                      |
 *      isZero                          |
 *      minus                           |
 *      modulo                   mod    |
 *      multipliedBy             times  |
 *      negated                         |
 *      plus                            |
 *      precision                sd     |
 *      shiftedBy                       |
 *      squareRoot               sqrt   |
 *      toExponential                   |
 *      toFixed                         |
 *      toFormat                        |
 *      toFraction                      |
 *      toJSON                          |
 *      toNumber                        |
 *      toPrecision                     |
 *      toString                        |
 *      valueOf                         |
 *
 */


            var BigNumber,
                isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,

                mathceil = Math.ceil,
                mathfloor = Math.floor,

                bignumberError = '[BigNumber Error] ',
                tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',

                BASE = 1e14,
                LOG_BASE = 14,
                MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
                // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
                POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
                SQRT_BASE = 1e7,

                // EDITABLE
                // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
                // the arguments to toExponential, toFixed, toFormat, and toPrecision.
                MAX = 1E9;                                   // 0 to MAX_INT32


            /*
   * Create and return a BigNumber constructor.
   */
            function clone(configObject) {
                var div, convertBase, parseNumeric,
                    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },
                    ONE = new BigNumber(1),


                    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------


                    // The default values below must be integers within the inclusive ranges stated.
                    // The values can also be changed at run-time using BigNumber.set.

                    // The maximum number of decimal places for operations involving division.
                    DECIMAL_PLACES = 20,                     // 0 to MAX

                    // The rounding mode used when rounding to the above decimal places, and when using
                    // toExponential, toFixed, toFormat and toPrecision, and round (default value).
                    // UP         0 Away from zero.
                    // DOWN       1 Towards zero.
                    // CEIL       2 Towards +Infinity.
                    // FLOOR      3 Towards -Infinity.
                    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
                    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
                    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
                    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
                    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
                    ROUNDING_MODE = 4,                       // 0 to 8

                    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

                    // The exponent value at and beneath which toString returns exponential notation.
                    // Number type: -7
                    TO_EXP_NEG = -7,                         // 0 to -MAX

                    // The exponent value at and above which toString returns exponential notation.
                    // Number type: 21
                    TO_EXP_POS = 21,                         // 0 to MAX

                    // RANGE : [MIN_EXP, MAX_EXP]

                    // The minimum exponent value, beneath which underflow to zero occurs.
                    // Number type: -324  (5e-324)
                    MIN_EXP = -1e7,                          // -1 to -MAX

                    // The maximum exponent value, above which overflow to Infinity occurs.
                    // Number type:  308  (1.7976931348623157e+308)
                    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
                    MAX_EXP = 1e7,                           // 1 to MAX

                    // Whether to use cryptographically-secure random number generation, if available.
                    CRYPTO = false,                          // true or false

                    // The modulo mode used when calculating the modulus: a mod n.
                    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
                    // The remainder (r) is calculated as: r = a - n * q.
                    //
                    // UP        0 The remainder is positive if the dividend is negative, else is negative.
                    // DOWN      1 The remainder has the same sign as the dividend.
                    //             This modulo mode is commonly known as 'truncated division' and is
                    //             equivalent to (a % n) in JavaScript.
                    // FLOOR     3 The remainder has the same sign as the divisor (Python %).
                    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
                    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
                    //             The remainder is always positive.
                    //
                    // The truncated division, floored division, Euclidian division and IEEE 754 remainder
                    // modes are commonly used for the modulus operation.
                    // Although the other rounding modes can also be used, they may not give useful results.
                    MODULO_MODE = 1,                         // 0 to 9

                    // The maximum number of significant digits of the result of the exponentiatedBy operation.
                    // If POW_PRECISION is 0, there will be unlimited significant digits.
                    POW_PRECISION = 0,                    // 0 to MAX

                    // The format specification used by the BigNumber.prototype.toFormat method.
                    FORMAT = {
                        decimalSeparator: '.',
                        groupSeparator: ',',
                        groupSize: 3,
                        secondaryGroupSize: 0,
                        fractionGroupSeparator: '\xA0',      // non-breaking space
                        fractionGroupSize: 0
                    },

                    // The alphabet used for base conversion.
                    // It must be at least 2 characters long, with no '.' or repeated character.
                    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
                    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';


                //------------------------------------------------------------------------------------------


                // CONSTRUCTOR


                /*
     * The BigNumber constructor and exported function.
     * Create and return a new instance of a BigNumber object.
     *
     * n {number|string|BigNumber} A numeric value.
     * [b] {number} The base of n. Integer, 2 to ALPHABET.length inclusive.
     */
                function BigNumber(n, b) {
                    var alphabet, c, caseChanged, e, i, isNum, len, str,
                        x = this;

                    // Enable constructor usage without new.
                    if (!(x instanceof BigNumber)) {

                        // Don't throw on constructor call without new (#81).
                        // '[BigNumber Error] Constructor call without new: {n}'
                        //throw Error(bignumberError + ' Constructor call without new: ' + n);
                        return new BigNumber(n, b);
                    }

                    if (b == null) {

                        // Duplicate.
                        if (n instanceof BigNumber) {
                            x.s = n.s;
                            x.e = n.e;
                            x.c = (n = n.c) ? n.slice() : n;
                            return;
                        }

                        isNum = typeof n == 'number';

                        if (isNum && n * 0 == 0) {

                            // Use `1 / n` to handle minus zero also.
                            x.s = 1 / n < 0 ? (n = -n, -1) : 1;

                            // Faster path for integers.
                            if (n === ~~n) {
                                for (e = 0, i = n; i >= 10; i /= 10, e++);
                                x.e = e;
                                x.c = [n];
                                return;
                            }

                            str = n + '';
                        } else {
                            if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, isNum);
                            x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
                        }

                        // Decimal point?
                        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

                        // Exponential form?
                        if ((i = str.search(/e/i)) > 0) {

                            // Determine exponent.
                            if (e < 0) e = i;
                            e += +str.slice(i + 1);
                            str = str.substring(0, i);
                        } else if (e < 0) {

                            // Integer.
                            e = str.length;
                        }

                    } else {

                        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
                        intCheck(b, 2, ALPHABET.length, 'Base');
                        str = n + '';

                        // Allow exponential notation to be used with base 10 argument, while
                        // also rounding to DECIMAL_PLACES as with other bases.
                        if (b == 10) {
                            x = new BigNumber(n instanceof BigNumber ? n : str);
                            return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
                        }

                        isNum = typeof n == 'number';

                        if (isNum) {

                            // Avoid potential interpretation of Infinity and NaN as base 44+ values.
                            if (n * 0 != 0) return parseNumeric(x, str, isNum, b);

                            x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;

                            // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
                            if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) {
                                throw Error
                                (tooManyDigits + n);
                            }

                            // Prevent later check for length on converted number.
                            isNum = false;
                        } else {
                            x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
                        }

                        alphabet = ALPHABET.slice(0, b);
                        e = i = 0;

                        // Check that str is a valid base b number.
                        // Don't use RegExp so alphabet can contain special characters.
                        for (len = str.length; i < len; i++) {
                            if (alphabet.indexOf(c = str.charAt(i)) < 0) {
                                if (c == '.') {

                                    // If '.' is not the first character and it has not be found before.
                                    if (i > e) {
                                        e = len;
                                        continue;
                                    }
                                } else if (!caseChanged) {

                                    // Allow e.g. hexadecimal 'FF' as well as 'ff'.
                                    if (str == str.toUpperCase() && (str = str.toLowerCase()) ||
                                        str == str.toLowerCase() && (str = str.toUpperCase())) {
                                        caseChanged = true;
                                        i = -1;
                                        e = 0;
                                        continue;
                                    }
                                }

                                return parseNumeric(x, n + '', isNum, b);
                            }
                        }

                        str = convertBase(str, b, 10, x.s);

                        // Decimal point?
                        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
                        else e = str.length;
                    }

                    // Determine leading zeros.
                    for (i = 0; str.charCodeAt(i) === 48; i++);

                    // Determine trailing zeros.
                    for (len = str.length; str.charCodeAt(--len) === 48;);

                    str = str.slice(i, ++len);

                    if (str) {
                        len -= i;

                        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
                        if (isNum && BigNumber.DEBUG &&
                            len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {
                            throw Error
                            (tooManyDigits + (x.s * n));
                        }

                        e = e - i - 1;

                        // Overflow?
                        if (e > MAX_EXP) {

                            // Infinity.
                            x.c = x.e = null;

                            // Underflow?
                        } else if (e < MIN_EXP) {

                            // Zero.
                            x.c = [x.e = 0];
                        } else {
                            x.e = e;
                            x.c = [];

                            // Transform base

                            // e is the base 10 exponent.
                            // i is where to slice str to get the first element of the coefficient array.
                            i = (e + 1) % LOG_BASE;
                            if (e < 0) i += LOG_BASE;

                            if (i < len) {
                                if (i) x.c.push(+str.slice(0, i));

                                for (len -= LOG_BASE; i < len;) {
                                    x.c.push(+str.slice(i, i += LOG_BASE));
                                }

                                str = str.slice(i);
                                i = LOG_BASE - str.length;
                            } else {
                                i -= len;
                            }

                            for (; i--; str += '0');
                            x.c.push(+str);
                        }
                    } else {

                        // Zero.
                        x.c = [x.e = 0];
                    }
                }


                // CONSTRUCTOR PROPERTIES


                BigNumber.clone = clone;

                BigNumber.ROUND_UP = 0;
                BigNumber.ROUND_DOWN = 1;
                BigNumber.ROUND_CEIL = 2;
                BigNumber.ROUND_FLOOR = 3;
                BigNumber.ROUND_HALF_UP = 4;
                BigNumber.ROUND_HALF_DOWN = 5;
                BigNumber.ROUND_HALF_EVEN = 6;
                BigNumber.ROUND_HALF_CEIL = 7;
                BigNumber.ROUND_HALF_FLOOR = 8;
                BigNumber.EUCLID = 9;


                /*
     * Configure infrequently-changing library-wide settings.
     *
     * Accept an object with the following optional properties (if the value of a property is
     * a number, it must be an integer within the inclusive range stated):
     *
     *   DECIMAL_PLACES   {number}           0 to MAX
     *   ROUNDING_MODE    {number}           0 to 8
     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
     *   CRYPTO           {boolean}          true or false
     *   MODULO_MODE      {number}           0 to 9
     *   POW_PRECISION       {number}           0 to MAX
     *   ALPHABET         {string}           A string of two or more unique characters which does
     *                                       not contain '.'.
     *   FORMAT           {object}           An object with some of the following properties:
     *      decimalSeparator       {string}
     *      groupSeparator         {string}
     *      groupSize              {number}
     *      secondaryGroupSize     {number}
     *      fractionGroupSeparator {string}
     *      fractionGroupSize      {number}
     *
     * (The values assigned to the above FORMAT object properties are not checked for validity.)
     *
     * E.g.
     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
     *
     * Ignore properties/parameters set to null or undefined, except for ALPHABET.
     *
     * Return an object with the properties current values.
     */
                BigNumber.config = BigNumber.set = function (obj) {
                    var p, v;

                    if (obj != null) {

                        if (typeof obj == 'object') {

                            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
                            // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
                            if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
                                v = obj[p];
                                intCheck(v, 0, MAX, p);
                                DECIMAL_PLACES = v;
                            }

                            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
                            // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
                            if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
                                v = obj[p];
                                intCheck(v, 0, 8, p);
                                ROUNDING_MODE = v;
                            }

                            // EXPONENTIAL_AT {number|number[]}
                            // Integer, -MAX to MAX inclusive or
                            // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
                            // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
                            if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
                                v = obj[p];
                                if (isArray(v)) {
                                    intCheck(v[0], -MAX, 0, p);
                                    intCheck(v[1], 0, MAX, p);
                                    TO_EXP_NEG = v[0];
                                    TO_EXP_POS = v[1];
                                } else {
                                    intCheck(v, -MAX, MAX, p);
                                    TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
                                }
                            }

                            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
                            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
                            // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
                            if (obj.hasOwnProperty(p = 'RANGE')) {
                                v = obj[p];
                                if (isArray(v)) {
                                    intCheck(v[0], -MAX, -1, p);
                                    intCheck(v[1], 1, MAX, p);
                                    MIN_EXP = v[0];
                                    MAX_EXP = v[1];
                                } else {
                                    intCheck(v, -MAX, MAX, p);
                                    if (v) {
                                        MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
                                    } else {
                                        throw Error
                                        (bignumberError + p + ' cannot be zero: ' + v);
                                    }
                                }
                            }

                            // CRYPTO {boolean} true or false.
                            // '[BigNumber Error] CRYPTO not true or false: {v}'
                            // '[BigNumber Error] crypto unavailable'
                            if (obj.hasOwnProperty(p = 'CRYPTO')) {
                                v = obj[p];
                                if (v === !!v) {
                                    if (v) {
                                        if (typeof crypto != 'undefined' && crypto &&
                                            (crypto.getRandomValues || crypto.randomBytes)) {
                                            CRYPTO = v;
                                        } else {
                                            CRYPTO = !v;
                                            throw Error
                                            (bignumberError + 'crypto unavailable');
                                        }
                                    } else {
                                        CRYPTO = v;
                                    }
                                } else {
                                    throw Error
                                    (bignumberError + p + ' not true or false: ' + v);
                                }
                            }

                            // MODULO_MODE {number} Integer, 0 to 9 inclusive.
                            // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
                            if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
                                v = obj[p];
                                intCheck(v, 0, 9, p);
                                MODULO_MODE = v;
                            }

                            // POW_PRECISION {number} Integer, 0 to MAX inclusive.
                            // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
                            if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
                                v = obj[p];
                                intCheck(v, 0, MAX, p);
                                POW_PRECISION = v;
                            }

                            // FORMAT {object}
                            // '[BigNumber Error] FORMAT not an object: {v}'
                            if (obj.hasOwnProperty(p = 'FORMAT')) {
                                v = obj[p];
                                if (typeof v == 'object') FORMAT = v;
                                else throw Error
                                (bignumberError + p + ' not an object: ' + v);
                            }

                            // ALPHABET {string}
                            // '[BigNumber Error] ALPHABET invalid: {v}'
                            if (obj.hasOwnProperty(p = 'ALPHABET')) {
                                v = obj[p];

                                // Disallow if only one character, or contains '.' or a repeated character.
                                if (typeof v == 'string' && !/^.$|\.|(.).*\1/.test(v)) {
                                    ALPHABET = v;
                                } else {
                                    throw Error
                                    (bignumberError + p + ' invalid: ' + v);
                                }
                            }

                        } else {

                            // '[BigNumber Error] Object expected: {v}'
                            throw Error
                            (bignumberError + 'Object expected: ' + obj);
                        }
                    }

                    return {
                        DECIMAL_PLACES: DECIMAL_PLACES,
                        ROUNDING_MODE: ROUNDING_MODE,
                        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
                        RANGE: [MIN_EXP, MAX_EXP],
                        CRYPTO: CRYPTO,
                        MODULO_MODE: MODULO_MODE,
                        POW_PRECISION: POW_PRECISION,
                        FORMAT: FORMAT,
                        ALPHABET: ALPHABET
                    };
                };


                /*
     * Return true if v is a BigNumber instance, otherwise return false.
     *
     * v {any}
     */
                BigNumber.isBigNumber = function (v) {
                    return v instanceof BigNumber || v && v._isBigNumber === true || false;
                };


                /*
     * Return a new BigNumber whose value is the maximum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */
                BigNumber.maximum = BigNumber.max = function () {
                    return maxOrMin(arguments, P.lt);
                };


                /*
     * Return a new BigNumber whose value is the minimum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */
                BigNumber.minimum = BigNumber.min = function () {
                    return maxOrMin(arguments, P.gt);
                };


                /*
     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
     * zeros are produced).
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
     * '[BigNumber Error] crypto unavailable'
     */
                BigNumber.random = (function () {
                    var pow2_53 = 0x20000000000000;

                    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
                    // Check if Math.random() produces more than 32 bits of randomness.
                    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
                    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
                    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
                        ? function () { return mathfloor(Math.random() * pow2_53); }
                        : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +
                            (Math.random() * 0x800000 | 0); };

                    return function (dp) {
                        var a, b, e, k, v,
                            i = 0,
                            c = [],
                            rand = new BigNumber(ONE);

                        if (dp == null) dp = DECIMAL_PLACES;
                        else intCheck(dp, 0, MAX);

                        k = mathceil(dp / LOG_BASE);

                        if (CRYPTO) {

                            // Browsers supporting crypto.getRandomValues.
                            if (crypto.getRandomValues) {

                                a = crypto.getRandomValues(new Uint32Array(k *= 2));

                                for (; i < k;) {

                                    // 53 bits:
                                    // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
                                    // 11111 11111111 11111111 11111111 11100000 00000000 00000000
                                    // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
                                    //                                     11111 11111111 11111111
                                    // 0x20000 is 2^21.
                                    v = a[i] * 0x20000 + (a[i + 1] >>> 11);

                                    // Rejection sampling:
                                    // 0 <= v < 9007199254740992
                                    // Probability that v >= 9e15, is
                                    // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
                                    if (v >= 9e15) {
                                        b = crypto.getRandomValues(new Uint32Array(2));
                                        a[i] = b[0];
                                        a[i + 1] = b[1];
                                    } else {

                                        // 0 <= v <= 8999999999999999
                                        // 0 <= (v % 1e14) <= 99999999999999
                                        c.push(v % 1e14);
                                        i += 2;
                                    }
                                }
                                i = k / 2;

                                // Node.js supporting crypto.randomBytes.
                            } else if (crypto.randomBytes) {

                                // buffer
                                a = crypto.randomBytes(k *= 7);

                                for (; i < k;) {

                                    // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
                                    // 0x100000000 is 2^32, 0x1000000 is 2^24
                                    // 11111 11111111 11111111 11111111 11111111 11111111 11111111
                                    // 0 <= v < 9007199254740992
                                    v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +
                                        (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +
                                        (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];

                                    if (v >= 9e15) {
                                        crypto.randomBytes(7).copy(a, i);
                                    } else {

                                        // 0 <= (v % 1e14) <= 99999999999999
                                        c.push(v % 1e14);
                                        i += 7;
                                    }
                                }
                                i = k / 7;
                            } else {
                                CRYPTO = false;
                                throw Error
                                (bignumberError + 'crypto unavailable');
                            }
                        }

                        // Use Math.random.
                        if (!CRYPTO) {

                            for (; i < k;) {
                                v = random53bitInt();
                                if (v < 9e15) c[i++] = v % 1e14;
                            }
                        }

                        k = c[--i];
                        dp %= LOG_BASE;

                        // Convert trailing digits to zeros according to dp.
                        if (k && dp) {
                            v = POWS_TEN[LOG_BASE - dp];
                            c[i] = mathfloor(k / v) * v;
                        }

                        // Remove trailing elements which are zero.
                        for (; c[i] === 0; c.pop(), i--);

                        // Zero?
                        if (i < 0) {
                            c = [e = 0];
                        } else {

                            // Remove leading elements which are zero and adjust exponent accordingly.
                            for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);

                            // Count the digits of the first element of c to determine leading zeros, and...
                            for (i = 1, v = c[0]; v >= 10; v /= 10, i++);

                            // adjust the exponent accordingly.
                            if (i < LOG_BASE) e -= LOG_BASE - i;
                        }

                        rand.e = e;
                        rand.c = c;
                        return rand;
                    };
                })();


                // PRIVATE FUNCTIONS


                // Called by BigNumber and BigNumber.prototype.toString.
                convertBase = (function () {
                    var decimal = '0123456789';

                    /*
       * Convert string of baseIn to an array of numbers of baseOut.
       * Eg. toBaseOut('255', 10, 16) returns [15, 15].
       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
       */
                    function toBaseOut(str, baseIn, baseOut, alphabet) {
                        var j,
                            arr = [0],
                            arrL,
                            i = 0,
                            len = str.length;

                        for (; i < len;) {
                            for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);

                            arr[0] += alphabet.indexOf(str.charAt(i++));

                            for (j = 0; j < arr.length; j++) {

                                if (arr[j] > baseOut - 1) {
                                    if (arr[j + 1] == null) arr[j + 1] = 0;
                                    arr[j + 1] += arr[j] / baseOut | 0;
                                    arr[j] %= baseOut;
                                }
                            }
                        }

                        return arr.reverse();
                    }

                    // Convert a numeric string of baseIn to a numeric string of baseOut.
                    // If the caller is toString, we are converting from base 10 to baseOut.
                    // If the caller is BigNumber, we are converting from baseIn to base 10.
                    return function (str, baseIn, baseOut, sign, callerIsToString) {
                        var alphabet, d, e, k, r, x, xc, y,
                            i = str.indexOf('.'),
                            dp = DECIMAL_PLACES,
                            rm = ROUNDING_MODE;

                        // Non-integer.
                        if (i >= 0) {
                            k = POW_PRECISION;

                            // Unlimited precision.
                            POW_PRECISION = 0;
                            str = str.replace('.', '');
                            y = new BigNumber(baseIn);
                            x = y.pow(str.length - i);
                            POW_PRECISION = k;

                            // Convert str as if an integer, then restore the fraction part by dividing the
                            // result by its base raised to a power.

                            y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),
                                10, baseOut, decimal);
                            y.e = y.c.length;
                        }

                        // Convert the number as integer.

                        xc = toBaseOut(str, baseIn, baseOut, callerIsToString
                            ? (alphabet = ALPHABET, decimal)
                            : (alphabet = decimal, ALPHABET));

                        // xc now represents str as an integer and converted to baseOut. e is the exponent.
                        e = k = xc.length;

                        // Remove trailing zeros.
                        for (; xc[--k] == 0; xc.pop());

                        // Zero?
                        if (!xc[0]) return alphabet.charAt(0);

                        // Does str represent an integer? If so, no need for the division.
                        if (i < 0) {
                            --e;
                        } else {
                            x.c = xc;
                            x.e = e;

                            // The sign is needed for correct rounding.
                            x.s = sign;
                            x = div(x, y, dp, rm, baseOut);
                            xc = x.c;
                            r = x.r;
                            e = x.e;
                        }

                        // xc now represents str converted to baseOut.

                        // THe index of the rounding digit.
                        d = e + dp + 1;

                        // The rounding digit: the digit to the right of the digit that may be rounded up.
                        i = xc[d];

                        // Look at the rounding digits and mode to determine whether to round up.

                        k = baseOut / 2;
                        r = r || d < 0 || xc[d + 1] != null;

                        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
                            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
                            rm == (x.s < 0 ? 8 : 7));

                        // If the index of the rounding digit is not greater than zero, or xc represents
                        // zero, then the result of the base conversion is zero or, if rounding up, a value
                        // such as 0.00001.
                        if (d < 1 || !xc[0]) {

                            // 1^-dp or 0
                            str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0))
                                : alphabet.charAt(0);
                        } else {

                            // Truncate xc to the required number of decimal places.
                            xc.length = d;

                            // Round up?
                            if (r) {

                                // Rounding up may mean the previous digit has to be rounded up and so on.
                                for (--baseOut; ++xc[--d] > baseOut;) {
                                    xc[d] = 0;

                                    if (!d) {
                                        ++e;
                                        xc = [1].concat(xc);
                                    }
                                }
                            }

                            // Determine trailing zeros.
                            for (k = xc.length; !xc[--k];);

                            // E.g. [4, 11, 15] becomes 4bf.
                            for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));

                            // Add leading zeros, decimal point and trailing zeros as required.
                            str = toFixedPoint(str, e, alphabet.charAt(0));
                        }

                        // The caller will add the sign.
                        return str;
                    };
                })();


                // Perform division in the specified base. Called by div and convertBase.
                div = (function () {

                    // Assume non-zero x and k.
                    function multiply(x, k, base) {
                        var m, temp, xlo, xhi,
                            carry = 0,
                            i = x.length,
                            klo = k % SQRT_BASE,
                            khi = k / SQRT_BASE | 0;

                        for (x = x.slice(); i--;) {
                            xlo = x[i] % SQRT_BASE;
                            xhi = x[i] / SQRT_BASE | 0;
                            m = khi * xlo + xhi * klo;
                            temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;
                            carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
                            x[i] = temp % base;
                        }

                        if (carry) x = [carry].concat(x);

                        return x;
                    }

                    function compare(a, b, aL, bL) {
                        var i, cmp;

                        if (aL != bL) {
                            cmp = aL > bL ? 1 : -1;
                        } else {

                            for (i = cmp = 0; i < aL; i++) {

                                if (a[i] != b[i]) {
                                    cmp = a[i] > b[i] ? 1 : -1;
                                    break;
                                }
                            }
                        }

                        return cmp;
                    }

                    function subtract(a, b, aL, base) {
                        var i = 0;

                        // Subtract b from a.
                        for (; aL--;) {
                            a[aL] -= i;
                            i = a[aL] < b[aL] ? 1 : 0;
                            a[aL] = i * base + a[aL] - b[aL];
                        }

                        // Remove leading zeros.
                        for (; !a[0] && a.length > 1; a.splice(0, 1));
                    }

                    // x: dividend, y: divisor.
                    return function (x, y, dp, rm, base) {
                        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
                            yL, yz,
                            s = x.s == y.s ? 1 : -1,
                            xc = x.c,
                            yc = y.c;

                        // Either NaN, Infinity or 0?
                        if (!xc || !xc[0] || !yc || !yc[0]) {

                            return new BigNumber(

                                // Return NaN if either NaN, or both Infinity or 0.
                                !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :

                                    // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                                    xc && xc[0] == 0 || !yc ? s * 0 : s / 0
                            );
                        }

                        q = new BigNumber(s);
                        qc = q.c = [];
                        e = x.e - y.e;
                        s = dp + e + 1;

                        if (!base) {
                            base = BASE;
                            e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
                            s = s / LOG_BASE | 0;
                        }

                        // Result exponent may be one less then the current value of e.
                        // The coefficients of the BigNumbers from convertBase may have trailing zeros.
                        for (i = 0; yc[i] == (xc[i] || 0); i++);

                        if (yc[i] > (xc[i] || 0)) e--;

                        if (s < 0) {
                            qc.push(1);
                            more = true;
                        } else {
                            xL = xc.length;
                            yL = yc.length;
                            i = 0;
                            s += 2;

                            // Normalise xc and yc so highest order digit of yc is >= base / 2.

                            n = mathfloor(base / (yc[0] + 1));

                            // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
                            // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
                            if (n > 1) {
                                yc = multiply(yc, n, base);
                                xc = multiply(xc, n, base);
                                yL = yc.length;
                                xL = xc.length;
                            }

                            xi = yL;
                            rem = xc.slice(0, yL);
                            remL = rem.length;

                            // Add zeros to make remainder as long as divisor.
                            for (; remL < yL; rem[remL++] = 0);
                            yz = yc.slice();
                            yz = [0].concat(yz);
                            yc0 = yc[0];
                            if (yc[1] >= base / 2) yc0++;
                            // Not necessary, but to prevent trial digit n > base, when using base 3.
                            // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;

                            do {
                                n = 0;

                                // Compare divisor and remainder.
                                cmp = compare(yc, rem, yL, remL);

                                // If divisor < remainder.
                                if (cmp < 0) {

                                    // Calculate trial digit, n.

                                    rem0 = rem[0];
                                    if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

                                    // n is how many times the divisor goes into the current remainder.
                                    n = mathfloor(rem0 / yc0);

                                    //  Algorithm:
                                    //  product = divisor multiplied by trial digit (n).
                                    //  Compare product and remainder.
                                    //  If product is greater than remainder:
                                    //    Subtract divisor from product, decrement trial digit.
                                    //  Subtract product from remainder.
                                    //  If product was less than remainder at the last compare:
                                    //    Compare new remainder and divisor.
                                    //    If remainder is greater than divisor:
                                    //      Subtract divisor from remainder, increment trial digit.

                                    if (n > 1) {

                                        // n may be > base only when base is 3.
                                        if (n >= base) n = base - 1;

                                        // product = divisor * trial digit.
                                        prod = multiply(yc, n, base);
                                        prodL = prod.length;
                                        remL = rem.length;

                                        // Compare product and remainder.
                                        // If product > remainder then trial digit n too high.
                                        // n is 1 too high about 5% of the time, and is not known to have
                                        // ever been more than 1 too high.
                                        while (compare(prod, rem, prodL, remL) == 1) {
                                            n--;

                                            // Subtract divisor from product.
                                            subtract(prod, yL < prodL ? yz : yc, prodL, base);
                                            prodL = prod.length;
                                            cmp = 1;
                                        }
                                    } else {

                                        // n is 0 or 1, cmp is -1.
                                        // If n is 0, there is no need to compare yc and rem again below,
                                        // so change cmp to 1 to avoid it.
                                        // If n is 1, leave cmp as -1, so yc and rem are compared again.
                                        if (n == 0) {

                                            // divisor < remainder, so n must be at least 1.
                                            cmp = n = 1;
                                        }

                                        // product = divisor
                                        prod = yc.slice();
                                        prodL = prod.length;
                                    }

                                    if (prodL < remL) prod = [0].concat(prod);

                                    // Subtract product from remainder.
                                    subtract(rem, prod, remL, base);
                                    remL = rem.length;

                                    // If product was < remainder.
                                    if (cmp == -1) {

                                        // Compare divisor and new remainder.
                                        // If divisor < new remainder, subtract divisor from remainder.
                                        // Trial digit n too low.
                                        // n is 1 too low about 5% of the time, and very rarely 2 too low.
                                        while (compare(yc, rem, yL, remL) < 1) {
                                            n++;

                                            // Subtract divisor from remainder.
                                            subtract(rem, yL < remL ? yz : yc, remL, base);
                                            remL = rem.length;
                                        }
                                    }
                                } else if (cmp === 0) {
                                    n++;
                                    rem = [0];
                                } // else cmp === 1 and n will be 0

                                // Add the next digit, n, to the result array.
                                qc[i++] = n;

                                // Update the remainder.
                                if (rem[0]) {
                                    rem[remL++] = xc[xi] || 0;
                                } else {
                                    rem = [xc[xi]];
                                    remL = 1;
                                }
                            } while ((xi++ < xL || rem[0] != null) && s--);

                            more = rem[0] != null;

                            // Leading zero?
                            if (!qc[0]) qc.splice(0, 1);
                        }

                        if (base == BASE) {

                            // To calculate q.e, first get the number of digits of qc[0].
                            for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);

                            round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);

                            // Caller is convertBase.
                        } else {
                            q.e = e;
                            q.r = +more;
                        }

                        return q;
                    };
                })();


                /*
     * Return a string representing the value of BigNumber n in fixed-point or exponential
     * notation rounded to the specified decimal places or significant digits.
     *
     * n: a BigNumber.
     * i: the index of the last digit required (i.e. the digit that may be rounded up).
     * rm: the rounding mode.
     * id: 1 (toExponential) or 2 (toPrecision).
     */
                function format(n, i, rm, id) {
                    var c0, e, ne, len, str;

                    if (rm == null) rm = ROUNDING_MODE;
                    else intCheck(rm, 0, 8);

                    if (!n.c) return n.toString();

                    c0 = n.c[0];
                    ne = n.e;

                    if (i == null) {
                        str = coeffToString(n.c);
                        str = id == 1 || id == 2 && ne <= TO_EXP_NEG
                            ? toExponential(str, ne)
                            : toFixedPoint(str, ne, '0');
                    } else {
                        n = round(new BigNumber(n), i, rm);

                        // n.e may have changed if the value was rounded up.
                        e = n.e;

                        str = coeffToString(n.c);
                        len = str.length;

                        // toPrecision returns exponential notation if the number of significant digits
                        // specified is less than the number of digits necessary to represent the integer
                        // part of the value in fixed-point notation.

                        // Exponential notation.
                        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {

                            // Append zeros?
                            for (; len < i; str += '0', len++);
                            str = toExponential(str, e);

                            // Fixed-point notation.
                        } else {
                            i -= ne;
                            str = toFixedPoint(str, e, '0');

                            // Append zeros?
                            if (e + 1 > len) {
                                if (--i > 0) for (str += '.'; i--; str += '0');
                            } else {
                                i += e - len;
                                if (i > 0) {
                                    if (e + 1 == len) str += '.';
                                    for (; i--; str += '0');
                                }
                            }
                        }
                    }

                    return n.s < 0 && c0 ? '-' + str : str;
                }


                // Handle BigNumber.max and BigNumber.min.
                function maxOrMin(args, method) {
                    var m, n,
                        i = 0;

                    if (isArray(args[0])) args = args[0];
                    m = new BigNumber(args[0]);

                    for (; ++i < args.length;) {
                        n = new BigNumber(args[i]);

                        // If any number is NaN, return NaN.
                        if (!n.s) {
                            m = n;
                            break;
                        } else if (method.call(m, n)) {
                            m = n;
                        }
                    }

                    return m;
                }


                /*
     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
     * Called by minus, plus and times.
     */
                function normalise(n, c, e) {
                    var i = 1,
                        j = c.length;

                    // Remove trailing zeros.
                    for (; !c[--j]; c.pop());

                    // Calculate the base 10 exponent. First get the number of digits of c[0].
                    for (j = c[0]; j >= 10; j /= 10, i++);

                    // Overflow?
                    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {

                        // Infinity.
                        n.c = n.e = null;

                        // Underflow?
                    } else if (e < MIN_EXP) {

                        // Zero.
                        n.c = [n.e = 0];
                    } else {
                        n.e = e;
                        n.c = c;
                    }

                    return n;
                }


                // Handle values that fail the validity test in BigNumber.
                parseNumeric = (function () {
                    var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
                        dotAfter = /^([^.]+)\.$/,
                        dotBefore = /^\.([^.]+)$/,
                        isInfinityOrNaN = /^-?(Infinity|NaN)$/,
                        whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

                    return function (x, str, isNum, b) {
                        var base,
                            s = isNum ? str : str.replace(whitespaceOrPlus, '');

                        // No exception on ±Infinity or NaN.
                        if (isInfinityOrNaN.test(s)) {
                            x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
                            x.c = x.e = null;
                        } else {
                            if (!isNum) {

                                // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
                                s = s.replace(basePrefix, function (m, p1, p2) {
                                    base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
                                    return !b || b == base ? p1 : m;
                                });

                                if (b) {
                                    base = b;

                                    // E.g. '1.' to '1', '.1' to '0.1'
                                    s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
                                }

                                if (str != s) return new BigNumber(s, base);
                            }

                            // '[BigNumber Error] Not a number: {n}'
                            // '[BigNumber Error] Not a base {b} number: {n}'
                            if (BigNumber.DEBUG) {
                                throw Error
                                (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);
                            }

                            // NaN
                            x.c = x.e = x.s = null;
                        }
                    }
                })();


                /*
     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
     * If r is truthy, it is known that there are more digits after the rounding digit.
     */
                function round(x, sd, rm, r) {
                    var d, i, j, k, n, ni, rd,
                        xc = x.c,
                        pows10 = POWS_TEN;

                    // if x is not Infinity or NaN...
                    if (xc) {

                        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
                        // n is a base 1e14 number, the value of the element of array x.c containing rd.
                        // ni is the index of n within x.c.
                        // d is the number of digits of n.
                        // i is the index of rd within n including leading zeros.
                        // j is the actual index of rd within n (if < 0, rd is a leading zero).
                        out: {

                            // Get the number of digits of the first element of xc.
                            for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);
                            i = sd - d;

                            // If the rounding digit is in the first element of xc...
                            if (i < 0) {
                                i += LOG_BASE;
                                j = sd;
                                n = xc[ni = 0];

                                // Get the rounding digit at index j of n.
                                rd = n / pows10[d - j - 1] % 10 | 0;
                            } else {
                                ni = mathceil((i + 1) / LOG_BASE);

                                if (ni >= xc.length) {

                                    if (r) {

                                        // Needed by sqrt.
                                        for (; xc.length <= ni; xc.push(0));
                                        n = rd = 0;
                                        d = 1;
                                        i %= LOG_BASE;
                                        j = i - LOG_BASE + 1;
                                    } else {
                                        break out;
                                    }
                                } else {
                                    n = k = xc[ni];

                                    // Get the number of digits of n.
                                    for (d = 1; k >= 10; k /= 10, d++);

                                    // Get the index of rd within n.
                                    i %= LOG_BASE;

                                    // Get the index of rd within n, adjusted for leading zeros.
                                    // The number of leading zeros of n is given by LOG_BASE - d.
                                    j = i - LOG_BASE + d;

                                    // Get the rounding digit at index j of n.
                                    rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
                                }
                            }

                            r = r || sd < 0 ||

                                // Are there any non-zero digits after the rounding digit?
                                // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
                                // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
                                xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);

                            r = rm < 4
                                ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
                                : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&

                                // Check whether the digit to the left of the rounding digit is odd.
                                ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||
                                rm == (x.s < 0 ? 8 : 7));

                            if (sd < 1 || !xc[0]) {
                                xc.length = 0;

                                if (r) {

                                    // Convert sd to decimal places.
                                    sd -= x.e + 1;

                                    // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                                    xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                                    x.e = -sd || 0;
                                } else {

                                    // Zero.
                                    xc[0] = x.e = 0;
                                }

                                return x;
                            }

                            // Remove excess digits.
                            if (i == 0) {
                                xc.length = ni;
                                k = 1;
                                ni--;
                            } else {
                                xc.length = ni + 1;
                                k = pows10[LOG_BASE - i];

                                // E.g. 56700 becomes 56000 if 7 is the rounding digit.
                                // j > 0 means i > number of leading zeros of n.
                                xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
                            }

                            // Round up?
                            if (r) {

                                for (; ;) {

                                    // If the digit to be rounded up is in the first element of xc...
                                    if (ni == 0) {

                                        // i will be the length of xc[0] before k is added.
                                        for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);
                                        j = xc[0] += k;
                                        for (k = 1; j >= 10; j /= 10, k++);

                                        // if i != k the length has increased.
                                        if (i != k) {
                                            x.e++;
                                            if (xc[0] == BASE) xc[0] = 1;
                                        }

                                        break;
                                    } else {
                                        xc[ni] += k;
                                        if (xc[ni] != BASE) break;
                                        xc[ni--] = 0;
                                        k = 1;
                                    }
                                }
                            }

                            // Remove trailing zeros.
                            for (i = xc.length; xc[--i] === 0; xc.pop());
                        }

                        // Overflow? Infinity.
                        if (x.e > MAX_EXP) {
                            x.c = x.e = null;

                            // Underflow? Zero.
                        } else if (x.e < MIN_EXP) {
                            x.c = [x.e = 0];
                        }
                    }

                    return x;
                }


                // PROTOTYPE/INSTANCE METHODS


                /*
     * Return a new BigNumber whose value is the absolute value of this BigNumber.
     */
                P.absoluteValue = P.abs = function () {
                    var x = new BigNumber(this);
                    if (x.s < 0) x.s = 1;
                    return x;
                };


                /*
     * Return
     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
     *   0 if they have the same value,
     *   or null if the value of either is NaN.
     */
                P.comparedTo = function (y, b) {
                    return compare(this, new BigNumber(y, b));
                };


                /*
     * If dp is undefined or null or true or false, return the number of decimal places of the
     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
     *
     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
     * ROUNDING_MODE if rm is omitted.
     *
     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */
                P.decimalPlaces = P.dp = function (dp, rm) {
                    var c, n, v,
                        x = this;

                    if (dp != null) {
                        intCheck(dp, 0, MAX);
                        if (rm == null) rm = ROUNDING_MODE;
                        else intCheck(rm, 0, 8);

                        return round(new BigNumber(x), dp + x.e + 1, rm);
                    }

                    if (!(c = x.c)) return null;
                    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;

                    // Subtract the number of trailing zeros of the last number.
                    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);
                    if (n < 0) n = 0;

                    return n;
                };


                /*
     *  n / 0 = I
     *  n / N = N
     *  n / I = 0
     *  0 / n = 0
     *  0 / 0 = N
     *  0 / N = N
     *  0 / I = 0
     *  N / n = N
     *  N / 0 = N
     *  N / N = N
     *  N / I = N
     *  I / n = I
     *  I / 0 = I
     *  I / N = N
     *  I / I = N
     *
     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
     */
                P.dividedBy = P.div = function (y, b) {
                    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
                };


                /*
     * Return a new BigNumber whose value is the integer part of dividing the value of this
     * BigNumber by the value of BigNumber(y, b).
     */
                P.dividedToIntegerBy = P.idiv = function (y, b) {
                    return div(this, new BigNumber(y, b), 0, 1);
                };


                /*
     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
     *
     * If m is present, return the result modulo m.
     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
     *
     * The modular power operation works efficiently when x, n, and m are integers, otherwise it
     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
     *
     * n {number|string|BigNumber} The exponent. An integer.
     * [m] {number|string|BigNumber} The modulus.
     *
     * '[BigNumber Error] Exponent not an integer: {n}'
     */
                P.exponentiatedBy = P.pow = function (n, m) {
                    var half, isModExp, k, more, nIsBig, nIsNeg, nIsOdd, y,
                        x = this;

                    n = new BigNumber(n);

                    // Allow NaN and ±Infinity, but not other non-integers.
                    if (n.c && !n.isInteger()) {
                        throw Error
                        (bignumberError + 'Exponent not an integer: ' + n);
                    }

                    if (m != null) m = new BigNumber(m);

                    // Exponent of MAX_SAFE_INTEGER is 15.
                    nIsBig = n.e > 14;

                    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.
                    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {

                        // The sign of the result of pow when x is negative depends on the evenness of n.
                        // If +n overflows to ±Infinity, the evenness of n would be not be known.
                        y = new BigNumber(Math.pow(+x.valueOf(), nIsBig ? 2 - isOdd(n) : +n));
                        return m ? y.mod(m) : y;
                    }

                    nIsNeg = n.s < 0;

                    if (m) {

                        // x % m returns NaN if abs(m) is zero, or m is NaN.
                        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);

                        isModExp = !nIsNeg && x.isInteger() && m.isInteger();

                        if (isModExp) x = x.mod(m);

                        // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
                        // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
                    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0
                        // [1, 240000000]
                        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7
                        // [80000000000000]  [99999750000000]
                        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {

                        // If x is negative and n is odd, k = -0, else k = 0.
                        k = x.s < 0 && isOdd(n) ? -0 : 0;

                        // If x >= 1, k = ±Infinity.
                        if (x.e > -1) k = 1 / k;

                        // If n is negative return ±0, else return ±Infinity.
                        return new BigNumber(nIsNeg ? 1 / k : k);

                    } else if (POW_PRECISION) {

                        // Truncating each coefficient array to a length of k after each multiplication
                        // equates to truncating significant digits to POW_PRECISION + [28, 41],
                        // i.e. there will be a minimum of 28 guard digits retained.
                        k = mathceil(POW_PRECISION / LOG_BASE + 2);
                    }

                    if (nIsBig) {
                        half = new BigNumber(0.5);
                        nIsOdd = isOdd(n);
                    } else {
                        nIsOdd = n % 2;
                    }

                    if (nIsNeg) n.s = 1;

                    y = new BigNumber(ONE);

                    // Performs 54 loop iterations for n of 9007199254740991.
                    for (; ;) {

                        if (nIsOdd) {
                            y = y.times(x);
                            if (!y.c) break;

                            if (k) {
                                if (y.c.length > k) y.c.length = k;
                            } else if (isModExp) {
                                y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
                            }
                        }

                        if (nIsBig) {
                            n = n.times(half);
                            round(n, n.e + 1, 1);
                            if (!n.c[0]) break;
                            nIsBig = n.e > 14;
                            nIsOdd = isOdd(n);
                        } else {
                            n = mathfloor(n / 2);
                            if (!n) break;
                            nIsOdd = n % 2;
                        }

                        x = x.times(x);

                        if (k) {
                            if (x.c && x.c.length > k) x.c.length = k;
                        } else if (isModExp) {
                            x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
                        }
                    }

                    if (isModExp) return y;
                    if (nIsNeg) y = ONE.div(y);

                    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
                };


                /*
     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
     *
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
     */
                P.integerValue = function (rm) {
                    var n = new BigNumber(this);
                    if (rm == null) rm = ROUNDING_MODE;
                    else intCheck(rm, 0, 8);
                    return round(n, n.e + 1, rm);
                };


                /*
     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
     * otherwise return false.
     */
                P.isEqualTo = P.eq = function (y, b) {
                    return compare(this, new BigNumber(y, b)) === 0;
                };


                /*
     * Return true if the value of this BigNumber is a finite number, otherwise return false.
     */
                P.isFinite = function () {
                    return !!this.c;
                };


                /*
     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
     * otherwise return false.
     */
                P.isGreaterThan = P.gt = function (y, b) {
                    return compare(this, new BigNumber(y, b)) > 0;
                };


                /*
     * Return true if the value of this BigNumber is greater than or equal to the value of
     * BigNumber(y, b), otherwise return false.
     */
                P.isGreaterThanOrEqualTo = P.gte = function (y, b) {
                    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;

                };


                /*
     * Return true if the value of this BigNumber is an integer, otherwise return false.
     */
                P.isInteger = function () {
                    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
                };


                /*
     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
     * otherwise return false.
     */
                P.isLessThan = P.lt = function (y, b) {
                    return compare(this, new BigNumber(y, b)) < 0;
                };


                /*
     * Return true if the value of this BigNumber is less than or equal to the value of
     * BigNumber(y, b), otherwise return false.
     */
                P.isLessThanOrEqualTo = P.lte = function (y, b) {
                    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
                };


                /*
     * Return true if the value of this BigNumber is NaN, otherwise return false.
     */
                P.isNaN = function () {
                    return !this.s;
                };


                /*
     * Return true if the value of this BigNumber is negative, otherwise return false.
     */
                P.isNegative = function () {
                    return this.s < 0;
                };


                /*
     * Return true if the value of this BigNumber is positive, otherwise return false.
     */
                P.isPositive = function () {
                    return this.s > 0;
                };


                /*
     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
     */
                P.isZero = function () {
                    return !!this.c && this.c[0] == 0;
                };


                /*
     *  n - 0 = n
     *  n - N = N
     *  n - I = -I
     *  0 - n = -n
     *  0 - 0 = 0
     *  0 - N = N
     *  0 - I = -I
     *  N - n = N
     *  N - 0 = N
     *  N - N = N
     *  N - I = N
     *  I - n = I
     *  I - 0 = I
     *  I - N = N
     *  I - I = N
     *
     * Return a new BigNumber whose value is the value of this BigNumber minus the value of
     * BigNumber(y, b).
     */
                P.minus = function (y, b) {
                    var i, j, t, xLTy,
                        x = this,
                        a = x.s;

                    y = new BigNumber(y, b);
                    b = y.s;

                    // Either NaN?
                    if (!a || !b) return new BigNumber(NaN);

                    // Signs differ?
                    if (a != b) {
                        y.s = -b;
                        return x.plus(y);
                    }

                    var xe = x.e / LOG_BASE,
                        ye = y.e / LOG_BASE,
                        xc = x.c,
                        yc = y.c;

                    if (!xe || !ye) {

                        // Either Infinity?
                        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);

                        // Either zero?
                        if (!xc[0] || !yc[0]) {

                            // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                            return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :

                                // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                                ROUNDING_MODE == 3 ? -0 : 0);
                        }
                    }

                    xe = bitFloor(xe);
                    ye = bitFloor(ye);
                    xc = xc.slice();

                    // Determine which is the bigger number.
                    if (a = xe - ye) {

                        if (xLTy = a < 0) {
                            a = -a;
                            t = xc;
                        } else {
                            ye = xe;
                            t = yc;
                        }

                        t.reverse();

                        // Prepend zeros to equalise exponents.
                        for (b = a; b--; t.push(0));
                        t.reverse();
                    } else {

                        // Exponents equal. Check digit by digit.
                        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

                        for (a = b = 0; b < j; b++) {

                            if (xc[b] != yc[b]) {
                                xLTy = xc[b] < yc[b];
                                break;
                            }
                        }
                    }

                    // x < y? Point xc to the array of the bigger number.
                    if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

                    b = (j = yc.length) - (i = xc.length);

                    // Append zeros to xc if shorter.
                    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
                    if (b > 0) for (; b--; xc[i++] = 0);
                    b = BASE - 1;

                    // Subtract yc from xc.
                    for (; j > a;) {

                        if (xc[--j] < yc[j]) {
                            for (i = j; i && !xc[--i]; xc[i] = b);
                            --xc[i];
                            xc[j] += BASE;
                        }

                        xc[j] -= yc[j];
                    }

                    // Remove leading zeros and adjust exponent accordingly.
                    for (; xc[0] == 0; xc.splice(0, 1), --ye);

                    // Zero?
                    if (!xc[0]) {

                        // Following IEEE 754 (2008) 6.3,
                        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
                        y.s = ROUNDING_MODE == 3 ? -1 : 1;
                        y.c = [y.e = 0];
                        return y;
                    }

                    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
                    // for finite x and y.
                    return normalise(y, xc, ye);
                };


                /*
     *   n % 0 =  N
     *   n % N =  N
     *   n % I =  n
     *   0 % n =  0
     *  -0 % n = -0
     *   0 % 0 =  N
     *   0 % N =  N
     *   0 % I =  0
     *   N % n =  N
     *   N % 0 =  N
     *   N % N =  N
     *   N % I =  N
     *   I % n =  N
     *   I % 0 =  N
     *   I % N =  N
     *   I % I =  N
     *
     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
     * BigNumber(y, b). The result depends on the value of MODULO_MODE.
     */
                P.modulo = P.mod = function (y, b) {
                    var q, s,
                        x = this;

                    y = new BigNumber(y, b);

                    // Return NaN if x is Infinity or NaN, or y is NaN or zero.
                    if (!x.c || !y.s || y.c && !y.c[0]) {
                        return new BigNumber(NaN);

                        // Return x if y is Infinity or x is zero.
                    } else if (!y.c || x.c && !x.c[0]) {
                        return new BigNumber(x);
                    }

                    if (MODULO_MODE == 9) {

                        // Euclidian division: q = sign(y) * floor(x / abs(y))
                        // r = x - qy    where  0 <= r < abs(y)
                        s = y.s;
                        y.s = 1;
                        q = div(x, y, 0, 3);
                        y.s = s;
                        q.s *= s;
                    } else {
                        q = div(x, y, 0, MODULO_MODE);
                    }

                    y = x.minus(q.times(y));

                    // To match JavaScript %, ensure sign of zero is sign of dividend.
                    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;

                    return y;
                };


                /*
     *  n * 0 = 0
     *  n * N = N
     *  n * I = I
     *  0 * n = 0
     *  0 * 0 = 0
     *  0 * N = N
     *  0 * I = N
     *  N * n = N
     *  N * 0 = N
     *  N * N = N
     *  N * I = N
     *  I * n = I
     *  I * 0 = N
     *  I * N = N
     *  I * I = I
     *
     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
     * of BigNumber(y, b).
     */
                P.multipliedBy = P.times = function (y, b) {
                    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
                        base, sqrtBase,
                        x = this,
                        xc = x.c,
                        yc = (y = new BigNumber(y, b)).c;

                    // Either NaN, ±Infinity or ±0?
                    if (!xc || !yc || !xc[0] || !yc[0]) {

                        // Return NaN if either is NaN, or one is 0 and the other is Infinity.
                        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
                            y.c = y.e = y.s = null;
                        } else {
                            y.s *= x.s;

                            // Return ±Infinity if either is ±Infinity.
                            if (!xc || !yc) {
                                y.c = y.e = null;

                                // Return ±0 if either is ±0.
                            } else {
                                y.c = [0];
                                y.e = 0;
                            }
                        }

                        return y;
                    }

                    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
                    y.s *= x.s;
                    xcL = xc.length;
                    ycL = yc.length;

                    // Ensure xc points to longer array and xcL to its length.
                    if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

                    // Initialise the result array with zeros.
                    for (i = xcL + ycL, zc = []; i--; zc.push(0));

                    base = BASE;
                    sqrtBase = SQRT_BASE;

                    for (i = ycL; --i >= 0;) {
                        c = 0;
                        ylo = yc[i] % sqrtBase;
                        yhi = yc[i] / sqrtBase | 0;

                        for (k = xcL, j = i + k; j > i;) {
                            xlo = xc[--k] % sqrtBase;
                            xhi = xc[k] / sqrtBase | 0;
                            m = yhi * xlo + xhi * ylo;
                            xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;
                            c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
                            zc[j--] = xlo % base;
                        }

                        zc[j] = c;
                    }

                    if (c) {
                        ++e;
                    } else {
                        zc.splice(0, 1);
                    }

                    return normalise(y, zc, e);
                };


                /*
     * Return a new BigNumber whose value is the value of this BigNumber negated,
     * i.e. multiplied by -1.
     */
                P.negated = function () {
                    var x = new BigNumber(this);
                    x.s = -x.s || null;
                    return x;
                };


                /*
     *  n + 0 = n
     *  n + N = N
     *  n + I = I
     *  0 + n = n
     *  0 + 0 = 0
     *  0 + N = N
     *  0 + I = I
     *  N + n = N
     *  N + 0 = N
     *  N + N = N
     *  N + I = N
     *  I + n = I
     *  I + 0 = I
     *  I + N = N
     *  I + I = I
     *
     * Return a new BigNumber whose value is the value of this BigNumber plus the value of
     * BigNumber(y, b).
     */
                P.plus = function (y, b) {
                    var t,
                        x = this,
                        a = x.s;

                    y = new BigNumber(y, b);
                    b = y.s;

                    // Either NaN?
                    if (!a || !b) return new BigNumber(NaN);

                    // Signs differ?
                    if (a != b) {
                        y.s = -b;
                        return x.minus(y);
                    }

                    var xe = x.e / LOG_BASE,
                        ye = y.e / LOG_BASE,
                        xc = x.c,
                        yc = y.c;

                    if (!xe || !ye) {

                        // Return ±Infinity if either ±Infinity.
                        if (!xc || !yc) return new BigNumber(a / 0);

                        // Either zero?
                        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
                    }

                    xe = bitFloor(xe);
                    ye = bitFloor(ye);
                    xc = xc.slice();

                    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
                    if (a = xe - ye) {
                        if (a > 0) {
                            ye = xe;
                            t = yc;
                        } else {
                            a = -a;
                            t = xc;
                        }

                        t.reverse();
                        for (; a--; t.push(0));
                        t.reverse();
                    }

                    a = xc.length;
                    b = yc.length;

                    // Point xc to the longer array, and b to the shorter length.
                    if (a - b < 0) t = yc, yc = xc, xc = t, b = a;

                    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
                    for (a = 0; b;) {
                        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
                        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
                    }

                    if (a) {
                        xc = [a].concat(xc);
                        ++ye;
                    }

                    // No need to check for zero, as +x + +y != 0 && -x + -y != 0
                    // ye = MAX_EXP + 1 possible
                    return normalise(y, xc, ye);
                };


                /*
     * If sd is undefined or null or true or false, return the number of significant digits of
     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
     * If sd is true include integer-part trailing zeros in the count.
     *
     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
     * ROUNDING_MODE if rm is omitted.
     *
     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
     *                     boolean: whether to count integer-part trailing zeros: true or false.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
     */
                P.precision = P.sd = function (sd, rm) {
                    var c, n, v,
                        x = this;

                    if (sd != null && sd !== !!sd) {
                        intCheck(sd, 1, MAX);
                        if (rm == null) rm = ROUNDING_MODE;
                        else intCheck(rm, 0, 8);

                        return round(new BigNumber(x), sd, rm);
                    }

                    if (!(c = x.c)) return null;
                    v = c.length - 1;
                    n = v * LOG_BASE + 1;

                    if (v = c[v]) {

                        // Subtract the number of trailing zeros of the last element.
                        for (; v % 10 == 0; v /= 10, n--);

                        // Add the number of digits of the first element.
                        for (v = c[0]; v >= 10; v /= 10, n++);
                    }

                    if (sd && x.e + 1 > n) n = x.e + 1;

                    return n;
                };


                /*
     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
     *
     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
     */
                P.shiftedBy = function (k) {
                    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
                    return this.times('1e' + k);
                };


                /*
     *  sqrt(-n) =  N
     *  sqrt(N) =  N
     *  sqrt(-I) =  N
     *  sqrt(I) =  I
     *  sqrt(0) =  0
     *  sqrt(-0) = -0
     *
     * Return a new BigNumber whose value is the square root of the value of this BigNumber,
     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
     */
                P.squareRoot = P.sqrt = function () {
                    var m, n, r, rep, t,
                        x = this,
                        c = x.c,
                        s = x.s,
                        e = x.e,
                        dp = DECIMAL_PLACES + 4,
                        half = new BigNumber('0.5');

                    // Negative/NaN/Infinity/zero?
                    if (s !== 1 || !c || !c[0]) {
                        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
                    }

                    // Initial estimate.
                    s = Math.sqrt(+x);

                    // Math.sqrt underflow/overflow?
                    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
                    if (s == 0 || s == 1 / 0) {
                        n = coeffToString(c);
                        if ((n.length + e) % 2 == 0) n += '0';
                        s = Math.sqrt(n);
                        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

                        if (s == 1 / 0) {
                            n = '1e' + e;
                        } else {
                            n = s.toExponential();
                            n = n.slice(0, n.indexOf('e') + 1) + e;
                        }

                        r = new BigNumber(n);
                    } else {
                        r = new BigNumber(s + '');
                    }

                    // Check for zero.
                    // r could be zero if MIN_EXP is changed after the this value was created.
                    // This would cause a division by zero (x/t) and hence Infinity below, which would cause
                    // coeffToString to throw.
                    if (r.c[0]) {
                        e = r.e;
                        s = e + dp;
                        if (s < 3) s = 0;

                        // Newton-Raphson iteration.
                        for (; ;) {
                            t = r;
                            r = half.times(t.plus(div(x, t, dp, 1)));

                            if (coeffToString(t.c  ).slice(0, s) === (n =
                                coeffToString(r.c)).slice(0, s)) {

                                // The exponent of r may here be one less than the final result exponent,
                                // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
                                // are indexed correctly.
                                if (r.e < e) --s;
                                n = n.slice(s - 3, s + 1);

                                // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
                                // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
                                // iteration.
                                if (n == '9999' || !rep && n == '4999') {

                                    // On the first iteration only, check to see if rounding up gives the
                                    // exact result as the nines may infinitely repeat.
                                    if (!rep) {
                                        round(t, t.e + DECIMAL_PLACES + 2, 0);

                                        if (t.times(t).eq(x)) {
                                            r = t;
                                            break;
                                        }
                                    }

                                    dp += 4;
                                    s += 4;
                                    rep = 1;
                                } else {

                                    // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
                                    // result. If not, then there are further digits and m will be truthy.
                                    if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

                                        // Truncate to the first rounding digit.
                                        round(r, r.e + DECIMAL_PLACES + 2, 1);
                                        m = !r.times(r).eq(x);
                                    }

                                    break;
                                }
                            }
                        }
                    }

                    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
                };


                /*
     * Return a string representing the value of this BigNumber in exponential notation and
     * rounded using ROUNDING_MODE to dp fixed decimal places.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */
                P.toExponential = function (dp, rm) {
                    if (dp != null) {
                        intCheck(dp, 0, MAX);
                        dp++;
                    }
                    return format(this, dp, rm, 1);
                };


                /*
     * Return a string representing the value of this BigNumber in fixed-point notation rounding
     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
     *
     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
     * but e.g. (-0.00001).toFixed(0) is '-0'.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */
                P.toFixed = function (dp, rm) {
                    if (dp != null) {
                        intCheck(dp, 0, MAX);
                        dp = dp + this.e + 1;
                    }
                    return format(this, dp, rm);
                };


                /*
     * Return a string representing the value of this BigNumber in fixed-point notation rounded
     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
     * of the FORMAT object (see BigNumber.set).
     *
     * FORMAT = {
     *      decimalSeparator : '.',
     *      groupSeparator : ',',
     *      groupSize : 3,
     *      secondaryGroupSize : 0,
     *      fractionGroupSeparator : '\xA0',    // non-breaking space
     *      fractionGroupSize : 0
     * };
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */
                P.toFormat = function (dp, rm) {
                    var str = this.toFixed(dp, rm);

                    if (this.c) {
                        var i,
                            arr = str.split('.'),
                            g1 = +FORMAT.groupSize,
                            g2 = +FORMAT.secondaryGroupSize,
                            groupSeparator = FORMAT.groupSeparator,
                            intPart = arr[0],
                            fractionPart = arr[1],
                            isNeg = this.s < 0,
                            intDigits = isNeg ? intPart.slice(1) : intPart,
                            len = intDigits.length;

                        if (g2) i = g1, g1 = g2, g2 = i, len -= i;

                        if (g1 > 0 && len > 0) {
                            i = len % g1 || g1;
                            intPart = intDigits.substr(0, i);

                            for (; i < len; i += g1) {
                                intPart += groupSeparator + intDigits.substr(i, g1);
                            }

                            if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
                            if (isNeg) intPart = '-' + intPart;
                        }

                        str = fractionPart
                            ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize)
                            ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'),
                                '$&' + FORMAT.fractionGroupSeparator)
                            : fractionPart)
                            : intPart;
                    }

                    return str;
                };


                /*
     * Return a string array representing the value of this BigNumber as a simple fraction with
     * an integer numerator and an integer denominator. The denominator will be a positive
     * non-zero value less than or equal to the specified maximum denominator. If a maximum
     * denominator is not specified, the denominator will be the lowest value necessary to
     * represent the number exactly.
     *
     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
     *
     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
     */
                P.toFraction = function (md) {
                    var arr, d, d0, d1, d2, e, exp, n, n0, n1, q, s,
                        x = this,
                        xc = x.c;

                    if (md != null) {
                        n = new BigNumber(md);

                        // Throw if md is less than one or is not an integer, unless it is Infinity.
                        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
                            throw Error
                            (bignumberError + 'Argument ' +
                                (n.isInteger() ? 'out of range: ' : 'not an integer: ') + md);
                        }
                    }

                    if (!xc) return x.toString();

                    d = new BigNumber(ONE);
                    n1 = d0 = new BigNumber(ONE);
                    d1 = n0 = new BigNumber(ONE);
                    s = coeffToString(xc);

                    // Determine initial denominator.
                    // d is a power of 10 and the minimum max denominator that specifies the value exactly.
                    e = d.e = s.length - x.e - 1;
                    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
                    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;

                    exp = MAX_EXP;
                    MAX_EXP = 1 / 0;
                    n = new BigNumber(s);

                    // n0 = d1 = 0
                    n0.c[0] = 0;

                    for (; ;)  {
                        q = div(n, d, 0, 1);
                        d2 = d0.plus(q.times(d1));
                        if (d2.comparedTo(md) == 1) break;
                        d0 = d1;
                        d1 = d2;
                        n1 = n0.plus(q.times(d2 = n1));
                        n0 = d2;
                        d = n.minus(q.times(d2 = d));
                        n = d2;
                    }

                    d2 = div(md.minus(d0), d1, 0, 1);
                    n0 = n0.plus(d2.times(n1));
                    d0 = d0.plus(d2.times(d1));
                    n0.s = n1.s = x.s;
                    e *= 2;

                    // Determine which fraction is closer to x, n0/d0 or n1/d1
                    arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
                        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1
                        ? [n1.toString(), d1.toString()]
                        : [n0.toString(), d0.toString()];

                    MAX_EXP = exp;
                    return arr;
                };


                /*
     * Return the value of this BigNumber converted to a number primitive.
     */
                P.toNumber = function () {
                    return +this;
                };


                /*
     * Return a string representing the value of this BigNumber rounded to sd significant digits
     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
     * necessary to represent the integer part of the value in fixed-point notation, then use
     * exponential notation.
     *
     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
     */
                P.toPrecision = function (sd, rm) {
                    if (sd != null) intCheck(sd, 1, MAX);
                    return format(this, sd, rm, 2);
                };


                /*
     * Return a string representing the value of this BigNumber in base b, or base 10 if b is
     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
     * TO_EXP_NEG, return exponential notation.
     *
     * [b] {number} Integer, 2 to ALPHABET.length inclusive.
     *
     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
     */
                P.toString = function (b) {
                    var str,
                        n = this,
                        s = n.s,
                        e = n.e;

                    // Infinity or NaN?
                    if (e === null) {

                        if (s) {
                            str = 'Infinity';
                            if (s < 0) str = '-' + str;
                        } else {
                            str = 'NaN';
                        }
                    } else {
                        str = coeffToString(n.c);

                        if (b == null) {
                            str = e <= TO_EXP_NEG || e >= TO_EXP_POS
                                ? toExponential(str, e)
                                : toFixedPoint(str, e, '0');
                        } else {
                            intCheck(b, 2, ALPHABET.length, 'Base');
                            str = convertBase(toFixedPoint(str, e, '0'), 10, b, s, true);
                        }

                        if (s < 0 && n.c[0]) str = '-' + str;
                    }

                    return str;
                };


                /*
     * Return as toString, but do not accept a base argument, and include the minus sign for
     * negative zero.
     */
                P.valueOf = P.toJSON = function () {
                    var str,
                        n = this,
                        e = n.e;

                    if (e === null) return n.toString();

                    str = coeffToString(n.c);

                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS
                        ? toExponential(str, e)
                        : toFixedPoint(str, e, '0');

                    return n.s < 0 ? '-' + str : str;
                };


                P._isBigNumber = true;

                if (configObject != null) BigNumber.set(configObject);

                return BigNumber;
            }


            // PRIVATE HELPER FUNCTIONS


            function bitFloor(n) {
                var i = n | 0;
                return n > 0 || n === i ? i : i - 1;
            }


            // Return a coefficient array as a string of base 10 digits.
            function coeffToString(a) {
                var s, z,
                    i = 1,
                    j = a.length,
                    r = a[0] + '';

                for (; i < j;) {
                    s = a[i++] + '';
                    z = LOG_BASE - s.length;
                    for (; z--; s = '0' + s);
                    r += s;
                }

                // Determine trailing zeros.
                for (j = r.length; r.charCodeAt(--j) === 48;);
                return r.slice(0, j + 1 || 1);
            }


            // Compare the value of BigNumbers x and y.
            function compare(x, y) {
                var a, b,
                    xc = x.c,
                    yc = y.c,
                    i = x.s,
                    j = y.s,
                    k = x.e,
                    l = y.e;

                // Either NaN?
                if (!i || !j) return null;

                a = xc && !xc[0];
                b = yc && !yc[0];

                // Either zero?
                if (a || b) return a ? b ? 0 : -j : i;

                // Signs differ?
                if (i != j) return i;

                a = i < 0;
                b = k == l;

                // Either Infinity?
                if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;

                // Compare exponents.
                if (!b) return k > l ^ a ? 1 : -1;

                j = (k = xc.length) < (l = yc.length) ? k : l;

                // Compare digit by digit.
                for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;

                // Compare lengths.
                return k == l ? 0 : k > l ^ a ? 1 : -1;
            }


            /*
   * Check that n is a primitive number, an integer, and in range, otherwise throw.
   */
            function intCheck(n, min, max, name) {
                if (n < min || n > max || n !== (n < 0 ? mathceil(n) : mathfloor(n))) {
                    throw Error
                    (bignumberError + (name || 'Argument') + (typeof n == 'number'
                        ? n < min || n > max ? ' out of range: ' : ' not an integer: '
                        : ' not a primitive number: ') + n);
                }
            }


            function isArray(obj) {
                return Object.prototype.toString.call(obj) == '[object Array]';
            }


            // Assumes finite n.
            function isOdd(n) {
                var k = n.c.length - 1;
                return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
            }


            function toExponential(str, e) {
                return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +
                    (e < 0 ? 'e' : 'e+') + e;
            }


            function toFixedPoint(str, e, z) {
                var len, zs;

                // Negative exponent?
                if (e < 0) {

                    // Prepend zeros.
                    for (zs = z + '.'; ++e; zs += z);
                    str = zs + str;

                    // Positive exponent
                } else {
                    len = str.length;

                    // Append zeros.
                    if (++e > len) {
                        for (zs = z, e -= len; --e; zs += z);
                        str += zs;
                    } else if (e < len) {
                        str = str.slice(0, e) + '.' + str.slice(e);
                    }
                }

                return str;
            }


            // EXPORT


            BigNumber = clone();
            BigNumber['default'] = BigNumber.BigNumber = BigNumber;

            // AMD.
            if (typeof define == 'function' && define.amd) {
                define(function () { return BigNumber; });

                // Node.js and other environments that support module.exports.
            } else if (typeof module != 'undefined' && module.exports) {
                module.exports = BigNumber;

                // Browser.
            } else {
                if (!globalObject) {
                    globalObject = typeof self != 'undefined' && self ? self : window;
                }

                globalObject.BigNumber = BigNumber;
            }
        })(this);

    },{}],"/bytetrade-js/node_modules/bip39/index.js":[function(require,module,exports){
        var Buffer = require('safe-buffer').Buffer
        var createHash = require('create-hash')
        var pbkdf2 = require('pbkdf2').pbkdf2Sync
        var randomBytes = require('randombytes')

// use unorm until String.prototype.normalize gets better browser support
        var unorm = require('unorm')

        var CHINESE_SIMPLIFIED_WORDLIST = require('./wordlists/chinese_simplified.json')
        var CHINESE_TRADITIONAL_WORDLIST = require('./wordlists/chinese_traditional.json')
        var ENGLISH_WORDLIST = require('./wordlists/english.json')
        var FRENCH_WORDLIST = require('./wordlists/french.json')
        var ITALIAN_WORDLIST = require('./wordlists/italian.json')
        var JAPANESE_WORDLIST = require('./wordlists/japanese.json')
        var KOREAN_WORDLIST = require('./wordlists/korean.json')
        var SPANISH_WORDLIST = require('./wordlists/spanish.json')
        var DEFAULT_WORDLIST = ENGLISH_WORDLIST

        var INVALID_MNEMONIC = 'Invalid mnemonic'
        var INVALID_ENTROPY = 'Invalid entropy'
        var INVALID_CHECKSUM = 'Invalid mnemonic checksum'

        function lpad (str, padString, length) {
            while (str.length < length) str = padString + str
            return str
        }

        function binaryToByte (bin) {
            return parseInt(bin, 2)
        }

        function bytesToBinary (bytes) {
            return bytes.map(function (x) {
                return lpad(x.toString(2), '0', 8)
            }).join('')
        }

        function deriveChecksumBits (entropyBuffer) {
            var ENT = entropyBuffer.length * 8
            var CS = ENT / 32
            var hash = createHash('sha256').update(entropyBuffer).digest()

            return bytesToBinary([].slice.call(hash)).slice(0, CS)
        }

        function salt (password) {
            return 'mnemonic' + (password || '')
        }

        function mnemonicToSeed (mnemonic, password) {
            var mnemonicBuffer = Buffer.from(unorm.nfkd(mnemonic), 'utf8')
            var saltBuffer = Buffer.from(salt(unorm.nfkd(password)), 'utf8')

            return pbkdf2(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512')
        }

        function mnemonicToSeedHex (mnemonic, password) {
            return mnemonicToSeed(mnemonic, password).toString('hex')
        }

        function mnemonicToEntropy (mnemonic, wordlist) {
            wordlist = wordlist || DEFAULT_WORDLIST

            var words = unorm.nfkd(mnemonic).split(' ')
            if (words.length % 3 !== 0) throw new Error(INVALID_MNEMONIC)

            // convert word indices to 11 bit binary strings
            var bits = words.map(function (word) {
                var index = wordlist.indexOf(word)
                if (index === -1) throw new Error(INVALID_MNEMONIC)

                return lpad(index.toString(2), '0', 11)
            }).join('')

            // split the binary string into ENT/CS
            var dividerIndex = Math.floor(bits.length / 33) * 32
            var entropyBits = bits.slice(0, dividerIndex)
            var checksumBits = bits.slice(dividerIndex)

            // calculate the checksum and compare
            var entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte)
            if (entropyBytes.length < 16) throw new Error(INVALID_ENTROPY)
            if (entropyBytes.length > 32) throw new Error(INVALID_ENTROPY)
            if (entropyBytes.length % 4 !== 0) throw new Error(INVALID_ENTROPY)

            var entropy = Buffer.from(entropyBytes)
            var newChecksum = deriveChecksumBits(entropy)
            if (newChecksum !== checksumBits) throw new Error(INVALID_CHECKSUM)

            return entropy.toString('hex')
        }

        function entropyToMnemonic (entropy, wordlist) {
            if (!Buffer.isBuffer(entropy)) entropy = Buffer.from(entropy, 'hex')
            wordlist = wordlist || DEFAULT_WORDLIST

            // 128 <= ENT <= 256
            if (entropy.length < 16) throw new TypeError(INVALID_ENTROPY)
            if (entropy.length > 32) throw new TypeError(INVALID_ENTROPY)
            if (entropy.length % 4 !== 0) throw new TypeError(INVALID_ENTROPY)

            var entropyBits = bytesToBinary([].slice.call(entropy))
            var checksumBits = deriveChecksumBits(entropy)

            var bits = entropyBits + checksumBits
            var chunks = bits.match(/(.{1,11})/g)
            var words = chunks.map(function (binary) {
                var index = binaryToByte(binary)
                return wordlist[index]
            })

            return wordlist === JAPANESE_WORDLIST ? words.join('\u3000') : words.join(' ')
        }

        function generateMnemonic (strength, rng, wordlist) {
            strength = strength || 128
            if (strength % 32 !== 0) throw new TypeError(INVALID_ENTROPY)
            rng = rng || randomBytes

            return entropyToMnemonic(rng(strength / 8), wordlist)
        }

        function validateMnemonic (mnemonic, wordlist) {
            try {
                mnemonicToEntropy(mnemonic, wordlist)
            } catch (e) {
                return false
            }

            return true
        }

        module.exports = {
            mnemonicToSeed: mnemonicToSeed,
            mnemonicToSeedHex: mnemonicToSeedHex,
            mnemonicToEntropy: mnemonicToEntropy,
            entropyToMnemonic: entropyToMnemonic,
            generateMnemonic: generateMnemonic,
            validateMnemonic: validateMnemonic,
            wordlists: {
                EN: ENGLISH_WORDLIST,
                JA: JAPANESE_WORDLIST,

                chinese_simplified: CHINESE_SIMPLIFIED_WORDLIST,
                chinese_traditional: CHINESE_TRADITIONAL_WORDLIST,
                english: ENGLISH_WORDLIST,
                french: FRENCH_WORDLIST,
                italian: ITALIAN_WORDLIST,
                japanese: JAPANESE_WORDLIST,
                korean: KOREAN_WORDLIST,
                spanish: SPANISH_WORDLIST
            }
        }

    },{"./wordlists/chinese_simplified.json":"/bytetrade-js/node_modules/bip39/wordlists/chinese_simplified.json","./wordlists/chinese_traditional.json":"/bytetrade-js/node_modules/bip39/wordlists/chinese_traditional.json","./wordlists/english.json":"/bytetrade-js/node_modules/bip39/wordlists/english.json","./wordlists/french.json":"/bytetrade-js/node_modules/bip39/wordlists/french.json","./wordlists/italian.json":"/bytetrade-js/node_modules/bip39/wordlists/italian.json","./wordlists/japanese.json":"/bytetrade-js/node_modules/bip39/wordlists/japanese.json","./wordlists/korean.json":"/bytetrade-js/node_modules/bip39/wordlists/korean.json","./wordlists/spanish.json":"/bytetrade-js/node_modules/bip39/wordlists/spanish.json","create-hash":"/bytetrade-js/node_modules/create-hash/browser.js","pbkdf2":"/bytetrade-js/node_modules/pbkdf2/browser.js","randombytes":"/bytetrade-js/node_modules/randombytes/browser.js","safe-buffer":"/bytetrade-js/node_modules/safe-buffer/index.js","unorm":"/bytetrade-js/node_modules/unorm/lib/unorm.js"}],"/bytetrade-js/node_modules/bip39/wordlists/chinese_simplified.json":[function(require,module,exports){
        module.exports=[
            "的",
            "歇"
        ]

    },{}],"/bytetrade-js/node_modules/bip39/wordlists/chinese_traditional.json":[function(require,module,exports){
        module.exports=[
            "的",
            "歇"
        ]

    },{}],"/bytetrade-js/node_modules/bip39/wordlists/english.json":[function(require,module,exports){
        module.exports=[
        ]

    },{}],"/bytetrade-js/node_modules/bip39/wordlists/french.json":[function(require,module,exports){
        module.exports=[
            "abaisser",
            "zeste",
            "zoologie"
        ]

    },{}],"/bytetrade-js/node_modules/bip39/wordlists/italian.json":[function(require,module,exports){
        module.exports=[
            "abaco",
            "zulu",
            "zuppa"
        ]

    },{}],"/bytetrade-js/node_modules/bip39/wordlists/japanese.json":[function(require,module,exports){
        module.exports=[
            "あいこくしん",
            "われる"
        ]

    },{}],"/bytetrade-js/node_modules/bip39/wordlists/korean.json":[function(require,module,exports){
        module.exports=[
            "가격",
            "힘껏"
        ]

    },{}],"/bytetrade-js/node_modules/bip39/wordlists/spanish.json":[function(require,module,exports){
        module.exports=[
            "ábaco",
            "zumo",
            "zurdo"
        ]

    },{}],"/bytetrade-js/node_modules/bitsharesjs-ws/cjs/index.js":[function(require,module,exports){
        "use strict";

        exports.__esModule = true;
        exports.Manager = exports.ChainConfig = exports.Apis = undefined;

        var _ApiInstances = require("./src/ApiInstances");

        var _ApiInstances2 = _interopRequireDefault(_ApiInstances);

        var _ConnectionManager = require("./src/ConnectionManager");

        var _ConnectionManager2 = _interopRequireDefault(_ConnectionManager);

        var _ChainConfig = require("./src/ChainConfig");

        var _ChainConfig2 = _interopRequireDefault(_ChainConfig);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        exports.Apis = _ApiInstances2.default;
        exports.ChainConfig = _ChainConfig2.default;
        exports.Manager = _ConnectionManager2.default;
    },{"./src/ApiInstances":"/bytetrade-js/node_modules/bitsharesjs-ws/cjs/src/ApiInstances.js","./src/ChainConfig":"/bytetrade-js/node_modules/bitsharesjs-ws/cjs/src/ChainConfig.js","./src/ConnectionManager":"/bytetrade-js/node_modules/bitsharesjs-ws/cjs/src/ConnectionManager.js"}],"/bytetrade-js/node_modules/bitsharesjs-ws/cjs/src/ApiInstances.js":[function(require,module,exports){
        (function (global){
            "use strict";

            exports.__esModule = true;

            var _ChainWebSocket = require("./ChainWebSocket");

            var _ChainWebSocket2 = _interopRequireDefault(_ChainWebSocket);

            var _GrapheneApi = require("./GrapheneApi");

            var _GrapheneApi2 = _interopRequireDefault(_GrapheneApi);

            var _ChainConfig = require("./ChainConfig");

            var _ChainConfig2 = _interopRequireDefault(_ChainConfig);

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

            function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // var { List } = require("immutable");


            if (global) {
                global.inst = "";
            } else {
                var _inst = void 0;
            };
            var autoReconnect = false; // by default don't use reconnecting-websocket
            /**
             Configure: configure as follows `Apis.instance("ws://localhost:8090").init_promise`.  This returns a promise, once resolved the connection is ready.

             Import: import { Apis } from "@graphene/chain"

             Short-hand: Apis.db.method("parm1", 2, 3, ...).  Returns a promise with results.

             Additional usage: Apis.instance().db_api().exec("method", ["method", "parm1", 2, 3, ...]).  Returns a promise with results.
             */

            var Apis = function () {
                function Apis() {
                    _classCallCheck(this, Apis);
                }

                Apis.setRpcConnectionStatusCallback = function setRpcConnectionStatusCallback(callback) {
                    this.statusCb = callback;
                    if (inst) inst.setRpcConnectionStatusCallback(callback);
                };

                /**
                 @arg {boolean} auto means automatic reconnect if possible( browser case), default true
                 */


                Apis.setAutoReconnect = function setAutoReconnect(auto) {
                    autoReconnect = auto;
                };

                /**
                 @arg {string} cs is only provided in the first call
                 @return {Apis} singleton .. Check Apis.instance().init_promise to know when the connection is established
                 */


                Apis.reset = function reset() {
                    var cs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "ws://localhost:8090";
                    var connect = arguments[1];
                    var connectTimeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4000;

                    var _this = this;

                    var optionalApis = arguments[3];
                    var closeCb = arguments[4];

                    return this.close().then(function () {
                        inst = new Apis();
                        inst.setRpcConnectionStatusCallback(_this.statusCb);

                        if (inst && connect) {
                            inst.connect(cs, connectTimeout, optionalApis, closeCb);
                        }

                        return inst;
                    });
                };

                Apis.instance = function instance() {
                    var cs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "ws://localhost:8090";
                    var connect = arguments[1];
                    var connectTimeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4000;
                    var optionalApis = arguments[3];
                    var closeCb = arguments[4];

                    if (!inst) {
                        inst = new Apis();
                        inst.setRpcConnectionStatusCallback(this.statusCb);
                    }

                    if (inst && connect) {
                        inst.connect(cs, connectTimeout, optionalApis);
                    }
                    if (closeCb) inst.closeCb = closeCb;
                    return inst;
                };

                Apis.chainId = function chainId() {
                    return this.instance().chain_id;
                };

                Apis.close = function close() {
                    if (inst) {
                        return new Promise(function (res) {
                            inst.close().then(function () {
                                inst = null;
                                res();
                            });
                        });
                    }

                    return Promise.resolve();
                };
                // db: (method, ...args) => Apis.instance().db_api().exec(method, toStrings(args)),
                // network: (method, ...args) => Apis.instance().network_api().exec(method, toStrings(args)),
                // history: (method, ...args) => Apis.instance().history_api().exec(method, toStrings(args)),
                // crypto: (method, ...args) => Apis.instance().crypto_api().exec(method, toStrings(args))
                // orders: (method, ...args) => Apis.instance().orders_api().exec(method, toStrings(args))


                /** @arg {string} connection .. */
                Apis.prototype.connect = function connect(cs, connectTimeout) {
                    var _this2 = this;

                    var optionalApis = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : { enableCrypto: false, enableOrders: false };

                    // console.log("INFO\tApiInstances\tconnect\t", cs);
                    this.url = cs;
                    var rpc_user = "",
                        rpc_password = "";
                    if (typeof window !== "undefined" && window.location && window.location.protocol === "https:" && cs.indexOf("wss://") < 0) {
                        throw new Error("Secure domains require wss connection");
                    }

                    if (this.ws_rpc) {
                        this.ws_rpc.statusCb = null;
                        this.ws_rpc.keepAliveCb = null;
                        this.ws_rpc.on_close = null;
                        this.ws_rpc.on_reconnect = null;
                    }
                    this.ws_rpc = new _ChainWebSocket2.default(cs, this.statusCb, connectTimeout, autoReconnect, function (closed) {
                        if (_this2._db && !closed) {
                            _this2._db.exec('get_objects', [['2.1.0']]).catch(function (e) {});
                        }
                    });

                    this.init_promise = this.ws_rpc.login(rpc_user, rpc_password).then(function () {
                        //console.log("Connected to API node:", cs);
                        _this2._db = new _GrapheneApi2.default(_this2.ws_rpc, "database");
                        _this2._net = new _GrapheneApi2.default(_this2.ws_rpc, "network_broadcast");
                        _this2._hist = new _GrapheneApi2.default(_this2.ws_rpc, "history");
                        if (optionalApis.enableOrders) _this2._orders = new _GrapheneApi2.default(_this2.ws_rpc, "orders");
                        if (optionalApis.enableCrypto) _this2._crypt = new _GrapheneApi2.default(_this2.ws_rpc, "crypto");
                        var db_promise = _this2._db.init().then(function () {
                            //https://github.com/cryptonomex/graphene/wiki/chain-locked-tx
                            return _this2._db.exec("get_chain_id", []).then(function (_chain_id) {
                                _this2.chain_id = _chain_id;
                                return _ChainConfig2.default.setChainId(_chain_id);
                                //DEBUG console.log("chain_id1",this.chain_id)
                            });
                        });
                        _this2.ws_rpc.on_reconnect = function () {
                            if (!_this2.ws_rpc) return;
                            _this2.ws_rpc.login("", "").then(function () {
                                _this2._db.init().then(function () {
                                    if (_this2.statusCb) _this2.statusCb("reconnect");
                                });
                                _this2._net.init();
                                _this2._hist.init();
                                if (optionalApis.enableOrders) _this2._orders.init();
                                if (optionalApis.enableCrypto) _this2._crypt.init();
                            });
                        };
                        _this2.ws_rpc.on_close = function () {
                            _this2.close().then(function () {
                                if (_this2.closeCb) _this2.closeCb();
                            });
                        };
                        var initPromises = [db_promise, _this2._net.init(), _this2._hist.init()];

                        if (optionalApis.enableOrders) initPromises.push(_this2._orders.init());
                        if (optionalApis.enableCrypto) initPromises.push(_this2._crypt.init());
                        return Promise.all(initPromises);
                    }).catch(function (err) {
                        console.error(cs, "Failed to initialize with error", err && err.message);
                        return _this2.close().then(function () {
                            throw err;
                        });
                    });
                };

                Apis.prototype.close = function close() {
                    var _this3 = this;

                    if (this.ws_rpc && this.ws_rpc.ws.readyState === 1) {
                        return this.ws_rpc.close().then(function () {
                            _this3.ws_rpc = null;
                        });
                    };
                    this.ws_rpc = null;
                    return Promise.resolve();
                };

                Apis.prototype.db_api = function db_api() {
                    return this._db;
                };

                Apis.prototype.network_api = function network_api() {
                    return this._net;
                };

                Apis.prototype.history_api = function history_api() {
                    return this._hist;
                };

                Apis.prototype.crypto_api = function crypto_api() {
                    return this._crypt;
                };

                Apis.prototype.orders_api = function orders_api() {
                    return this._orders;
                };

                Apis.prototype.setRpcConnectionStatusCallback = function setRpcConnectionStatusCallback(callback) {
                    this.statusCb = callback;
                };

                return Apis;
            }();

            Apis.db = new Proxy(Apis, {
                get: function get(apis, method) {
                    return function () {
                        return apis.instance().db_api().exec(method, [].concat(Array.prototype.slice.call(arguments)));
                    };
                }
            });
            Apis.network = new Proxy(Apis, {
                get: function get(apis, method) {
                    return function () {
                        return apis.instance().network_api().exec(method, [].concat(Array.prototype.slice.call(arguments)));
                    };
                }
            });
            Apis.history = new Proxy(Apis, {
                get: function get(apis, method) {
                    return function () {
                        return apis.instance().history_api().exec(method, [].concat(Array.prototype.slice.call(arguments)));
                    };
                }
            });
            Apis.crypto = new Proxy(Apis, {
                get: function get(apis, method) {
                    return function () {
                        return apis.instance().crypto_api().exec(method, [].concat(Array.prototype.slice.call(arguments)));
                    };
                }
            });
            Apis.orders = new Proxy(Apis, {
                get: function get(apis, method) {
                    return function () {
                        return apis.instance().orders_api().exec(method, [].concat(Array.prototype.slice.call(arguments)));
                    };
                }
            });
            exports.default = Apis;
            module.exports = exports["default"];
        }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

    },{"./ChainConfig":"/bytetrade-js/node_modules/bitsharesjs-ws/cjs/src/ChainConfig.js","./ChainWebSocket":"/bytetrade-js/node_modules/bitsharesjs-ws/cjs/src/ChainWebSocket.js","./GrapheneApi":"/bytetrade-js/node_modules/bitsharesjs-ws/cjs/src/GrapheneApi.js"}],"/bytetrade-js/node_modules/bitsharesjs-ws/cjs/src/ChainConfig.js":[function(require,module,exports){
        (function (process){
            "use strict";

            exports.__esModule = true;
            var _this = void 0;

            var ecc_config = {
                address_prefix: process.env.npm_config__graphene_ecc_default_address_prefix || "GPH"
            };

            _this = {
                core_asset: "CORE",
                address_prefix: "GPH",
                expire_in_secs: 15,
                expire_in_secs_proposal: 24 * 60 * 60,
                review_in_secs_committee: 24 * 60 * 60,
                networks: {
                    BitShares: {
                        core_asset: "BTS",
                        address_prefix: "BTS",
                        chain_id: "4018d7844c78f6a6c41c6a552b898022310fc5dec06da467ee7905a8dad512c8"
                    },
                    Muse: {
                        core_asset: "MUSE",
                        address_prefix: "MUSE",
                        chain_id: "45ad2d3f9ef92a49b55c2227eb06123f613bb35dd08bd876f2aea21925a67a67"
                    },
                    Test: {
                        core_asset: "TEST",
                        address_prefix: "TEST",
                        chain_id: "39f5e2ede1f8bc1a3a54a7914414e3779e33193f1f5693510e73cb7a87617447"
                    },
                    Obelisk: {
                        core_asset: "GOV",
                        address_prefix: "FEW",
                        chain_id: "1cfde7c388b9e8ac06462d68aadbd966b58f88797637d9af805b4560b0e9661e"
                    }
                },

                /** Set a few properties for known chain IDs. */
                setChainId: function setChainId(chain_id) {

                    var i = void 0,
                        len = void 0,
                        network = void 0,
                        network_name = void 0,
                        ref = void 0;
                    ref = Object.keys(_this.networks);

                    for (i = 0, len = ref.length; i < len; i++) {

                        network_name = ref[i];
                        network = _this.networks[network_name];

                        if (network.chain_id === chain_id) {

                            _this.network_name = network_name;

                            if (network.address_prefix) {
                                _this.address_prefix = network.address_prefix;
                                ecc_config.address_prefix = network.address_prefix;
                            }

                            // console.log("INFO    Configured for", network_name, ":", network.core_asset, "\n");

                            return {
                                network_name: network_name,
                                network: network
                            };
                        }
                    }

                    if (!_this.network_name) {
                        console.log("Unknown chain id (this may be a testnet)", chain_id);
                    }
                },

                reset: function reset() {
                    _this.core_asset = "CORE";
                    _this.address_prefix = "GPH";
                    ecc_config.address_prefix = "GPH";
                    _this.expire_in_secs = 15;
                    _this.expire_in_secs_proposal = 24 * 60 * 60;

                    console.log("Chain config reset");
                },

                setPrefix: function setPrefix() {
                    var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "GPH";

                    _this.address_prefix = prefix;
                    ecc_config.address_prefix = prefix;
                }
            };

            exports.default = _this;
            module.exports = exports["default"];
        }).call(this,require('_process'))

    },{"_process":"/bytetrade-js/node_modules/process/browser.js"}],"/bytetrade-js/node_modules/bitsharesjs-ws/cjs/src/ChainWebSocket.js":[function(require,module,exports){
        (function (process){
            "use strict";

            exports.__esModule = true;

            function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

            var WebSocketClient = void 0;
            if (typeof WebSocket === "undefined" && !process.env.browser) {
                WebSocketClient = require("ws");
            } else {
                WebSocketClient = WebSocket;
            }

            var SOCKET_DEBUG = false;

            function getWebSocketClient(autoReconnect) {
                if (!autoReconnect && typeof WebSocket !== "undefined" && typeof document !== "undefined") {
                    return WebSocket;
                }
                return WebSocketClient;
            }

            var keep_alive_interval = 5000;
            var max_send_life = 5;
            var max_recv_life = max_send_life * 2;

            var ChainWebSocket = function () {
                function ChainWebSocket(ws_server, statusCb) {
                    var connectTimeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5000;

                    var _this = this;

                    var autoReconnect = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
                    var keepAliveCb = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

                    _classCallCheck(this, ChainWebSocket);

                    this.url = ws_server;
                    this.statusCb = statusCb;
                    this.connectionTimeout = setTimeout(function () {
                        if (_this.current_reject) {
                            var reject = _this.current_reject;
                            _this.current_reject = null;
                            _this.close();
                            reject(new Error("Connection attempt timed out after " + connectTimeout / 1000 + "s"));
                        }
                    }, connectTimeout);

                    this.current_reject = null;
                    this.on_reconnect = null;
                    this.closed = false;
                    this.send_life = max_send_life;
                    this.recv_life = max_recv_life;
                    this.keepAliveCb = keepAliveCb;
                    this.connect_promise = new Promise(function (resolve, reject) {
                        _this.current_reject = reject;
                        var WsClient = getWebSocketClient(autoReconnect);
                        try {
                            _this.ws = new WsClient(ws_server);
                        } catch (error) {
                            _this.ws = { readyState: 3, close: function close() {} }; // DISCONNECTED
                            reject(new Error("Invalid url", ws_server, " closed"));
                            // return this.close().then(() => {
                            //     console.log("Invalid url", ws_server, " closed");
                            //     // throw new Error("Invalid url", ws_server, " closed")
                            //     // return this.current_reject(Error("Invalid websocket url: " + ws_server));
                            // })
                        }

                        _this.ws.onopen = function () {
                            clearTimeout(_this.connectionTimeout);
                            if (_this.statusCb) _this.statusCb("open");
                            if (_this.on_reconnect) _this.on_reconnect();
                            _this.keepalive_timer = setInterval(function () {

                                _this.recv_life--;
                                if (_this.recv_life == 0) {
                                    console.error(_this.url + ' connection is dead, terminating ws');
                                    _this.close();
                                    // clearInterval(this.keepalive_timer);
                                    // this.keepalive_timer = undefined;
                                    return;
                                }
                                _this.send_life--;
                                if (_this.send_life == 0) {
                                    // this.ws.ping('', false, true);
                                    if (_this.keepAliveCb) {
                                        _this.keepAliveCb(_this.closed);
                                    }
                                    _this.send_life = max_send_life;
                                }
                            }, 5000);
                            _this.current_reject = null;
                            resolve();
                        };
                        _this.ws.onerror = function (error) {
                            if (_this.keepalive_timer) {
                                clearInterval(_this.keepalive_timer);
                                _this.keepalive_timer = undefined;
                            }
                            clearTimeout(_this.connectionTimeout);
                            if (_this.statusCb) _this.statusCb("error");

                            if (_this.current_reject) {
                                _this.current_reject(error);
                            }
                        };
                        _this.ws.onmessage = function (message) {
                            _this.recv_life = max_recv_life;
                            _this.listener(JSON.parse(message.data));
                        };
                        _this.ws.onclose = function () {
                            _this.closed = true;
                            if (_this.keepalive_timer) {
                                clearInterval(_this.keepalive_timer);
                                _this.keepalive_timer = undefined;
                            }
                            var err = new Error('connection closed');
                            for (var cbId = _this.responseCbId + 1; cbId <= _this.cbId; cbId += 1) {
                                _this.cbs[cbId].reject(err);
                            }
                            if (_this.statusCb) _this.statusCb("closed");
                            if (_this._closeCb) _this._closeCb();
                            if (_this.on_close) _this.on_close();
                        };
                    });
                    this.cbId = 0;
                    this.responseCbId = 0;
                    this.cbs = {};
                    this.subs = {};
                    this.unsub = {};
                }

                ChainWebSocket.prototype.call = function call(params) {
                    var _this2 = this;

                    if (this.ws.readyState !== 1) {
                        return Promise.reject(new Error('websocket state error:' + this.ws.readyState));
                    }
                    var method = params[1];
                    if (SOCKET_DEBUG) console.log("[ChainWebSocket] >---- call ----->  \"id\":" + (this.cbId + 1), JSON.stringify(params));

                    this.cbId += 1;

                    if (method === "set_subscribe_callback" || method === "subscribe_to_market" || method === "broadcast_transaction_with_callback" || method === "set_pending_transaction_callback") {
                        // Store callback in subs map
                        this.subs[this.cbId] = {
                            callback: params[2][0]
                        };

                        // Replace callback with the callback id
                        params[2][0] = this.cbId;
                    }

                    if (method === "unsubscribe_from_market" || method === "unsubscribe_from_accounts") {
                        if (typeof params[2][0] !== "function") {
                            throw new Error("First parameter of unsub must be the original callback");
                        }

                        var unSubCb = params[2].splice(0, 1)[0];

                        // Find the corresponding subscription
                        for (var id in this.subs) {
                            if (this.subs[id].callback === unSubCb) {
                                this.unsub[this.cbId] = id;
                                break;
                            }
                        }
                    }

                    var request = {
                        method: "call",
                        params: params
                    };
                    request.id = this.cbId;
                    this.send_life = max_send_life;

                    return new Promise(function (resolve, reject) {
                        _this2.cbs[_this2.cbId] = {
                            time: new Date(),
                            resolve: resolve,
                            reject: reject
                        };
                        _this2.ws.send(JSON.stringify(request));
                    });
                };

                ChainWebSocket.prototype.listener = function listener(response) {
                    if (SOCKET_DEBUG) console.log("[ChainWebSocket] <---- reply ----<", JSON.stringify(response));

                    var sub = false,
                        callback = null;

                    if (response.method === "notice") {
                        sub = true;
                        response.id = response.params[0];
                    }

                    if (!sub) {
                        callback = this.cbs[response.id];
                        this.responseCbId = response.id;
                    } else {
                        callback = this.subs[response.id].callback;
                    }

                    if (callback && !sub) {
                        if (response.error) {
                            callback.reject(response.error);
                        } else {
                            callback.resolve(response.result);
                        }
                        delete this.cbs[response.id];

                        if (this.unsub[response.id]) {
                            delete this.subs[this.unsub[response.id]];
                            delete this.unsub[response.id];
                        }
                    } else if (callback && sub) {
                        callback(response.params[1]);
                    } else {
                        console.log("Warning: unknown websocket response: ", response);
                    }
                };

                ChainWebSocket.prototype.login = function login(user, password) {
                    var _this3 = this;

                    return this.connect_promise.then(function () {
                        return _this3.call([1, "login", [user, password]]);
                    });
                };

                ChainWebSocket.prototype.close = function close() {
                    var _this4 = this;

                    return new Promise(function (res) {
                        clearInterval(_this4.keepalive_timer);
                        _this4.keepalive_timer = undefined;
                        _this4._closeCb = function () {
                            res();
                            _this4._closeCb = null;
                        };
                        if (!_this4.ws) {
                            console.log("Websocket already cleared", _this4);
                            return res();
                        }
                        if (_this4.ws.terminate) {
                            _this4.ws.terminate();
                        } else {
                            _this4.ws.close();
                        }
                        if (_this4.ws.readyState === 3) res();
                    });
                };

                return ChainWebSocket;
            }();

            exports.default = ChainWebSocket;
            module.exports = exports["default"];
        }).call(this,require('_process'))

    },{"_process":"/bytetrade-js/node_modules/process/browser.js","ws":"/bytetrade-js/node_modules/browser-resolve/empty.js"}],"/bytetrade-js/node_modules/bitsharesjs-ws/cjs/src/ConnectionManager.js":[function(require,module,exports){
        "use strict";

        exports.__esModule = true;

        var _ApiInstances = require("./ApiInstances");

        var _ApiInstances2 = _interopRequireDefault(_ApiInstances);

        var _ChainWebSocket = require("./ChainWebSocket");

        var _ChainWebSocket2 = _interopRequireDefault(_ChainWebSocket);

        function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        var Manager = function () {
            function Manager(_ref) {
                var url = _ref.url,
                    urls = _ref.urls,
                    autoFallback = _ref.autoFallback,
                    closeCb = _ref.closeCb,
                    optionalApis = _ref.optionalApis,
                    urlChangeCallback = _ref.urlChangeCallback;

                _classCallCheck(this, Manager);

                this.url = url;
                this.urls = urls.filter(function (a) {
                    return a !== url;
                });
                this.autoFallback = autoFallback;
                this.closeCb = closeCb;
                this.optionalApis = optionalApis || {};
                this.isConnected = false;
                this.urlChangeCallback = urlChangeCallback;
            }

            Manager.prototype.setCloseCb = function setCloseCb(cb) {
                this.closeCb = cb;
            };

            Manager.close = function close() {
                return _ApiInstances2.default.close();
            };

            Manager.prototype.logFailure = function logFailure(method, url, err) {
                var message = err && err.message ? err.message : "";
                console.error(method, "Failed to connect to " + url + (message ? " Error: " + JSON.stringify(message) : ""));
            };

            Manager.prototype._onClose = function _onClose() {
                this.isConnected = false;
                if (this.closeCb) {
                    this.closeCb();
                    this.setCloseCb(null);
                }
                if (this.autoFallback) {
                    this.connectWithFallback();
                };
            };

            Manager.prototype.connect = function connect() {
                var _this = this;

                var _connect = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

                var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.url;

                return new Promise(function (resolve, reject) {
                    _ApiInstances2.default.instance(url, _connect, undefined, _this.optionalApis, _this._onClose.bind(_this)).init_promise.then(function (res) {
                        _this.url = url;
                        _this.isConnected = true;
                        resolve(res);
                    }).catch(function (err) {
                        _ApiInstances2.default.close().then(function () {
                            reject(err);
                        });
                    });
                });
            };

            Manager.prototype.connectWithFallback = function connectWithFallback() {
                var connect = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
                var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.url;
                var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

                var _this2 = this;

                var resolve = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
                var reject = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

                if (reject && index > this.urls.length) return reject(new Error("Tried " + index + " connections, none of which worked: " + JSON.stringify(this.urls.concat(this.url))));
                var fallback = function fallback(err, resolve, reject) {
                    if (_this2.urlChangeCallback) _this2.urlChangeCallback(_this2.urls[index]);
                    return _this2.connectWithFallback(connect, _this2.urls[index], index + 1, resolve, reject);
                };
                if (resolve && reject) {
                    return this.connect(connect, url).then(resolve).catch(function (err) {
                        fallback(err, resolve, reject);
                    });
                } else {
                    return new Promise(function (resolve, reject) {
                        _this2.connect(connect, undefined).then(resolve).catch(function (err) {
                            fallback(err, resolve, reject);
                        });
                    });
                }
            };

            Manager.prototype.checkConnections = function checkConnections() {
                var rpc_user = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
                var rpc_password = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

                var _this3 = this;

                var resolve = arguments[2];
                var reject = arguments[3];

                var connectionStartTimes = {};
                var checkFunction = function checkFunction(resolve, reject) {
                    var fullList = _this3.urls.concat(_this3.url);
                    var connectionPromises = [];

                    fullList.forEach(function (url) {
                        /* Use default timeout and no reconnecting-websocket */
                        var conn = new _ChainWebSocket2.default(url, function () {}, undefined, false);
                        connectionStartTimes[url] = new Date().getTime();
                        connectionPromises.push(function () {
                            return conn.login(rpc_user, rpc_password).then(function (data) {
                                var _result;

                                var result = (_result = {}, _result[url] = new Date().getTime() - connectionStartTimes[url], _result);
                                return conn.close().then(function () {
                                    return result;
                                });
                            }).catch(function (err) {
                                _this3.logFailure("checkConnections", url, err);
                                if (url === _this3.url) {
                                    _this3.url = _this3.urls[0];
                                } else {
                                    _this3.urls = _this3.urls.filter(function (a) {
                                        return a !== url;
                                    });
                                }
                                return conn.close().then(function () {
                                    return null;
                                });
                            });
                        });
                    });

                    Promise.all(connectionPromises.map(function (a) {
                        return a();
                    })).then(function (res) {
                        var final = res.filter(function (a) {
                            return !!a;
                        }).sort(function (a, b) {
                            return Object.values(a)[0] - Object.values(b)[0];
                        }).reduce(function (f, a) {
                            var key = Object.keys(a)[0];
                            f[key] = a[key];
                            return f;
                        }, {});

                        console.log("Checked " + res.length + " connections, " + (res.length - Object.keys(final).length) + " failed");
                        return resolve(final);
                    }).catch(function () {
                        return _this3.checkConnections(rpc_user, rpc_password, resolve, reject);
                    });
                };

                if (resolve && reject) {
                    checkFunction(resolve, reject);
                } else {
                    return new Promise(checkFunction);
                }
            };

            return Manager;
        }();

        exports.default = Manager;
        module.exports = exports["default"];
    },{"./ApiInstances":"/bytetrade-js/node_modules/bitsharesjs-ws/cjs/src/ApiInstances.js","./ChainWebSocket":"/bytetrade-js/node_modules/bitsharesjs-ws/cjs/src/ChainWebSocket.js"}],"/bytetrade-js/node_modules/bitsharesjs-ws/cjs/src/GrapheneApi.js":[function(require,module,exports){
        "use strict";

        exports.__esModule = true;

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        var GrapheneApi = function () {
            function GrapheneApi(ws_rpc, api_name) {
                _classCallCheck(this, GrapheneApi);

                this.ws_rpc = ws_rpc;
                this.api_name = api_name;
            }

            GrapheneApi.prototype.init = function init() {
                var self = this;
                return this.ws_rpc.call([1, this.api_name, []]).then(function (response) {
                    //console.log("[GrapheneApi.js:11] ----- GrapheneApi.init ----->", this.api_name, response);
                    self.api_id = response;
                    return self;
                });
            };

            GrapheneApi.prototype.exec = function exec(method, params) {
                return this.ws_rpc.call([this.api_id, method, params]).catch(function (error) {
                    // console.log("!!! GrapheneApi error: ", method, params, error, JSON.stringify(error));
                    throw error;
                });
            };

            return GrapheneApi;
        }();

        exports.default = GrapheneApi;
        module.exports = exports["default"];
    },{}],"/bytetrade-js/node_modules/browser-resolve/empty.js":[function(require,module,exports){

    },{}],"/bytetrade-js/node_modules/browserify/node_modules/string_decoder/index.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

        var Buffer = require('buffer').Buffer;

        var isBufferEncoding = Buffer.isEncoding
            || function(encoding) {
                switch (encoding && encoding.toLowerCase()) {
                    case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
                    default: return false;
                }
            }


        function assertEncoding(encoding) {
            if (encoding && !isBufferEncoding(encoding)) {
                throw new Error('Unknown encoding: ' + encoding);
            }
        }

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
        var StringDecoder = exports.StringDecoder = function(encoding) {
            this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
            assertEncoding(encoding);
            switch (this.encoding) {
                case 'utf8':
                    // CESU-8 represents each of Surrogate Pair by 3-bytes
                    this.surrogateSize = 3;
                    break;
                case 'ucs2':
                case 'utf16le':
                    // UTF-16 represents each of Surrogate Pair by 2-bytes
                    this.surrogateSize = 2;
                    this.detectIncompleteChar = utf16DetectIncompleteChar;
                    break;
                case 'base64':
                    // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
                    this.surrogateSize = 3;
                    this.detectIncompleteChar = base64DetectIncompleteChar;
                    break;
                default:
                    this.write = passThroughWrite;
                    return;
            }

            // Enough space to store all bytes of a single character. UTF-8 needs 4
            // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
            this.charBuffer = new Buffer(6);
            // Number of bytes received for the current incomplete multi-byte character.
            this.charReceived = 0;
            // Number of bytes expected for the current incomplete multi-byte character.
            this.charLength = 0;
        };


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
        StringDecoder.prototype.write = function(buffer) {
            var charStr = '';
            // if our last write ended with an incomplete multibyte character
            while (this.charLength) {
                // determine how many remaining bytes this buffer has to offer for this char
                var available = (buffer.length >= this.charLength - this.charReceived) ?
                    this.charLength - this.charReceived :
                    buffer.length;

                // add the new bytes to the char buffer
                buffer.copy(this.charBuffer, this.charReceived, 0, available);
                this.charReceived += available;

                if (this.charReceived < this.charLength) {
                    // still not enough chars in this buffer? wait for more ...
                    return '';
                }

                // remove bytes belonging to the current character from the buffer
                buffer = buffer.slice(available, buffer.length);

                // get the character that was split
                charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

                // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
                var charCode = charStr.charCodeAt(charStr.length - 1);
                if (charCode >= 0xD800 && charCode <= 0xDBFF) {
                    this.charLength += this.surrogateSize;
                    charStr = '';
                    continue;
                }
                this.charReceived = this.charLength = 0;

                // if there are no more bytes in this buffer, just emit our char
                if (buffer.length === 0) {
                    return charStr;
                }
                break;
            }

            // determine and set charLength / charReceived
            this.detectIncompleteChar(buffer);

            var end = buffer.length;
            if (this.charLength) {
                // buffer the incomplete character bytes we got
                buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
                end -= this.charReceived;
            }

            charStr += buffer.toString(this.encoding, 0, end);

            var end = charStr.length - 1;
            var charCode = charStr.charCodeAt(end);
            // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
            if (charCode >= 0xD800 && charCode <= 0xDBFF) {
                var size = this.surrogateSize;
                this.charLength += size;
                this.charReceived += size;
                this.charBuffer.copy(this.charBuffer, size, 0, size);
                buffer.copy(this.charBuffer, 0, 0, size);
                return charStr.substring(0, end);
            }

            // or just emit the charStr
            return charStr;
        };

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
        StringDecoder.prototype.detectIncompleteChar = function(buffer) {
            // determine how many bytes we have to check at the end of this buffer
            var i = (buffer.length >= 3) ? 3 : buffer.length;

            // Figure out if one of the last i bytes of our buffer announces an
            // incomplete char.
            for (; i > 0; i--) {
                var c = buffer[buffer.length - i];

                // See http://en.wikipedia.org/wiki/UTF-8#Description

                // 110XXXXX
                if (i == 1 && c >> 5 == 0x06) {
                    this.charLength = 2;
                    break;
                }

                // 1110XXXX
                if (i <= 2 && c >> 4 == 0x0E) {
                    this.charLength = 3;
                    break;
                }

                // 11110XXX
                if (i <= 3 && c >> 3 == 0x1E) {
                    this.charLength = 4;
                    break;
                }
            }
            this.charReceived = i;
        };

        StringDecoder.prototype.end = function(buffer) {
            var res = '';
            if (buffer && buffer.length)
                res = this.write(buffer);

            if (this.charReceived) {
                var cr = this.charReceived;
                var buf = this.charBuffer;
                var enc = this.encoding;
                res += buf.slice(0, cr).toString(enc);
            }

            return res;
        };

        function passThroughWrite(buffer) {
            return buffer.toString(this.encoding);
        }

        function utf16DetectIncompleteChar(buffer) {
            this.charReceived = buffer.length % 2;
            this.charLength = this.charReceived ? 2 : 0;
        }

        function base64DetectIncompleteChar(buffer) {
            this.charReceived = buffer.length % 3;
            this.charLength = this.charReceived ? 3 : 0;
        }

    },{"buffer":"/bytetrade-js/node_modules/buffer/index.js"}],"/bytetrade-js/node_modules/bs58/index.js":[function(require,module,exports){
        var basex = require('base-x')
        var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'

        module.exports = basex(ALPHABET)

    },{"base-x":"/bytetrade-js/node_modules/base-x/index.js"}],"/bytetrade-js/node_modules/buffer/index.js":[function(require,module,exports){
        (function (global){
            /*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
            /* eslint-disable no-proto */

            'use strict'

            var base64 = require('base64-js')
            var ieee754 = require('ieee754')
            var isArray = require('isarray')

            exports.Buffer = Buffer
            exports.SlowBuffer = SlowBuffer
            exports.INSPECT_MAX_BYTES = 50

            /**
             * If `Buffer.TYPED_ARRAY_SUPPORT`:
             *   === true    Use Uint8Array implementation (fastest)
             *   === false   Use Object implementation (most compatible, even IE6)
             *
             * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
             * Opera 11.6+, iOS 4.2+.
             *
             * Due to various browser bugs, sometimes the Object implementation will be used even
             * when the browser supports typed arrays.
             *
             * Note:
             *
             *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
             *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
             *
             *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
             *
             *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
             *     incorrect length in some situations.

             * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
             * get the Object implementation, which is slower but behaves correctly.
             */
            Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
                ? global.TYPED_ARRAY_SUPPORT
                : typedArraySupport()

            /*
 * Export kMaxLength after typed array support is determined.
 */
            exports.kMaxLength = kMaxLength()

            function typedArraySupport () {
                try {
                    var arr = new Uint8Array(1)
                    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
                    return arr.foo() === 42 && // typed array instances can be augmented
                        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
                        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
                } catch (e) {
                    return false
                }
            }

            function kMaxLength () {
                return Buffer.TYPED_ARRAY_SUPPORT
                    ? 0x7fffffff
                    : 0x3fffffff
            }

            function createBuffer (that, length) {
                if (kMaxLength() < length) {
                    throw new RangeError('Invalid typed array length')
                }
                if (Buffer.TYPED_ARRAY_SUPPORT) {
                    // Return an augmented `Uint8Array` instance, for best performance
                    that = new Uint8Array(length)
                    that.__proto__ = Buffer.prototype
                } else {
                    // Fallback: Return an object instance of the Buffer class
                    if (that === null) {
                        that = new Buffer(length)
                    }
                    that.length = length
                }

                return that
            }

            /**
             * The Buffer constructor returns instances of `Uint8Array` that have their
             * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
             * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
             * and the `Uint8Array` methods. Square bracket notation works as expected -- it
             * returns a single octet.
             *
             * The `Uint8Array` prototype remains unmodified.
             */

            function Buffer (arg, encodingOrOffset, length) {
                if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
                    return new Buffer(arg, encodingOrOffset, length)
                }

                // Common case.
                if (typeof arg === 'number') {
                    if (typeof encodingOrOffset === 'string') {
                        throw new Error(
                            'If encoding is specified then the first argument must be a string'
                        )
                    }
                    return allocUnsafe(this, arg)
                }
                return from(this, arg, encodingOrOffset, length)
            }

            Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
            Buffer._augment = function (arr) {
                arr.__proto__ = Buffer.prototype
                return arr
            }

            function from (that, value, encodingOrOffset, length) {
                if (typeof value === 'number') {
                    throw new TypeError('"value" argument must not be a number')
                }

                if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
                    return fromArrayBuffer(that, value, encodingOrOffset, length)
                }

                if (typeof value === 'string') {
                    return fromString(that, value, encodingOrOffset)
                }

                return fromObject(that, value)
            }

            /**
             * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
             * if value is a number.
             * Buffer.from(str[, encoding])
             * Buffer.from(array)
             * Buffer.from(buffer)
             * Buffer.from(arrayBuffer[, byteOffset[, length]])
             **/
            Buffer.from = function (value, encodingOrOffset, length) {
                return from(null, value, encodingOrOffset, length)
            }

            if (Buffer.TYPED_ARRAY_SUPPORT) {
                Buffer.prototype.__proto__ = Uint8Array.prototype
                Buffer.__proto__ = Uint8Array
                if (typeof Symbol !== 'undefined' && Symbol.species &&
                    Buffer[Symbol.species] === Buffer) {
                    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
                    Object.defineProperty(Buffer, Symbol.species, {
                        value: null,
                        configurable: true
                    })
                }
            }

            function assertSize (size) {
                if (typeof size !== 'number') {
                    throw new TypeError('"size" argument must be a number')
                } else if (size < 0) {
                    throw new RangeError('"size" argument must not be negative')
                }
            }

            function alloc (that, size, fill, encoding) {
                assertSize(size)
                if (size <= 0) {
                    return createBuffer(that, size)
                }
                if (fill !== undefined) {
                    // Only pay attention to encoding if it's a string. This
                    // prevents accidentally sending in a number that would
                    // be interpretted as a start offset.
                    return typeof encoding === 'string'
                        ? createBuffer(that, size).fill(fill, encoding)
                        : createBuffer(that, size).fill(fill)
                }
                return createBuffer(that, size)
            }

            /**
             * Creates a new filled Buffer instance.
             * alloc(size[, fill[, encoding]])
             **/
            Buffer.alloc = function (size, fill, encoding) {
                return alloc(null, size, fill, encoding)
            }

            function allocUnsafe (that, size) {
                assertSize(size)
                that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
                if (!Buffer.TYPED_ARRAY_SUPPORT) {
                    for (var i = 0; i < size; ++i) {
                        that[i] = 0
                    }
                }
                return that
            }

            /**
             * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
             * */
            Buffer.allocUnsafe = function (size) {
                return allocUnsafe(null, size)
            }
            /**
             * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
             */
            Buffer.allocUnsafeSlow = function (size) {
                return allocUnsafe(null, size)
            }

            function fromString (that, string, encoding) {
                if (typeof encoding !== 'string' || encoding === '') {
                    encoding = 'utf8'
                }

                if (!Buffer.isEncoding(encoding)) {
                    throw new TypeError('"encoding" must be a valid string encoding')
                }

                var length = byteLength(string, encoding) | 0
                that = createBuffer(that, length)

                var actual = that.write(string, encoding)

                if (actual !== length) {
                    // Writing a hex string, for example, that contains invalid characters will
                    // cause everything after the first invalid character to be ignored. (e.g.
                    // 'abxxcd' will be treated as 'ab')
                    that = that.slice(0, actual)
                }

                return that
            }

            function fromArrayLike (that, array) {
                var length = array.length < 0 ? 0 : checked(array.length) | 0
                that = createBuffer(that, length)
                for (var i = 0; i < length; i += 1) {
                    that[i] = array[i] & 255
                }
                return that
            }

            function fromArrayBuffer (that, array, byteOffset, length) {
                array.byteLength // this throws if `array` is not a valid ArrayBuffer

                if (byteOffset < 0 || array.byteLength < byteOffset) {
                    throw new RangeError('\'offset\' is out of bounds')
                }

                if (array.byteLength < byteOffset + (length || 0)) {
                    throw new RangeError('\'length\' is out of bounds')
                }

                if (byteOffset === undefined && length === undefined) {
                    array = new Uint8Array(array)
                } else if (length === undefined) {
                    array = new Uint8Array(array, byteOffset)
                } else {
                    array = new Uint8Array(array, byteOffset, length)
                }

                if (Buffer.TYPED_ARRAY_SUPPORT) {
                    // Return an augmented `Uint8Array` instance, for best performance
                    that = array
                    that.__proto__ = Buffer.prototype
                } else {
                    // Fallback: Return an object instance of the Buffer class
                    that = fromArrayLike(that, array)
                }
                return that
            }

            function fromObject (that, obj) {
                if (Buffer.isBuffer(obj)) {
                    var len = checked(obj.length) | 0
                    that = createBuffer(that, len)

                    if (that.length === 0) {
                        return that
                    }

                    obj.copy(that, 0, 0, len)
                    return that
                }

                if (obj) {
                    if ((typeof ArrayBuffer !== 'undefined' &&
                        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
                        if (typeof obj.length !== 'number' || isnan(obj.length)) {
                            return createBuffer(that, 0)
                        }
                        return fromArrayLike(that, obj)
                    }

                    if (obj.type === 'Buffer' && isArray(obj.data)) {
                        return fromArrayLike(that, obj.data)
                    }
                }

                throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
            }

            function checked (length) {
                // Note: cannot use `length < kMaxLength()` here because that fails when
                // length is NaN (which is otherwise coerced to zero.)
                if (length >= kMaxLength()) {
                    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                        'size: 0x' + kMaxLength().toString(16) + ' bytes')
                }
                return length | 0
            }

            function SlowBuffer (length) {
                if (+length != length) { // eslint-disable-line eqeqeq
                    length = 0
                }
                return Buffer.alloc(+length)
            }

            Buffer.isBuffer = function isBuffer (b) {
                return !!(b != null && b._isBuffer)
            }

            Buffer.compare = function compare (a, b) {
                if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
                    throw new TypeError('Arguments must be Buffers')
                }

                if (a === b) return 0

                var x = a.length
                var y = b.length

                for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                    if (a[i] !== b[i]) {
                        x = a[i]
                        y = b[i]
                        break
                    }
                }

                if (x < y) return -1
                if (y < x) return 1
                return 0
            }

            Buffer.isEncoding = function isEncoding (encoding) {
                switch (String(encoding).toLowerCase()) {
                    case 'hex':
                    case 'utf8':
                    case 'utf-8':
                    case 'ascii':
                    case 'latin1':
                    case 'binary':
                    case 'base64':
                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                        return true
                    default:
                        return false
                }
            }

            Buffer.concat = function concat (list, length) {
                if (!isArray(list)) {
                    throw new TypeError('"list" argument must be an Array of Buffers')
                }

                if (list.length === 0) {
                    return Buffer.alloc(0)
                }

                var i
                if (length === undefined) {
                    length = 0
                    for (i = 0; i < list.length; ++i) {
                        length += list[i].length
                    }
                }

                var buffer = Buffer.allocUnsafe(length)
                var pos = 0
                for (i = 0; i < list.length; ++i) {
                    var buf = list[i]
                    if (!Buffer.isBuffer(buf)) {
                        throw new TypeError('"list" argument must be an Array of Buffers')
                    }
                    buf.copy(buffer, pos)
                    pos += buf.length
                }
                return buffer
            }

            function byteLength (string, encoding) {
                if (Buffer.isBuffer(string)) {
                    return string.length
                }
                if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
                    (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
                    return string.byteLength
                }
                if (typeof string !== 'string') {
                    string = '' + string
                }

                var len = string.length
                if (len === 0) return 0

                // Use a for loop to avoid recursion
                var loweredCase = false
                for (;;) {
                    switch (encoding) {
                        case 'ascii':
                        case 'latin1':
                        case 'binary':
                            return len
                        case 'utf8':
                        case 'utf-8':
                        case undefined:
                            return utf8ToBytes(string).length
                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return len * 2
                        case 'hex':
                            return len >>> 1
                        case 'base64':
                            return base64ToBytes(string).length
                        default:
                            if (loweredCase) return utf8ToBytes(string).length // assume utf8
                            encoding = ('' + encoding).toLowerCase()
                            loweredCase = true
                    }
                }
            }
            Buffer.byteLength = byteLength

            function slowToString (encoding, start, end) {
                var loweredCase = false

                // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
                // property of a typed array.

                // This behaves neither like String nor Uint8Array in that we set start/end
                // to their upper/lower bounds if the value passed is out of range.
                // undefined is handled specially as per ECMA-262 6th Edition,
                // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
                if (start === undefined || start < 0) {
                    start = 0
                }
                // Return early if start > this.length. Done here to prevent potential uint32
                // coercion fail below.
                if (start > this.length) {
                    return ''
                }

                if (end === undefined || end > this.length) {
                    end = this.length
                }

                if (end <= 0) {
                    return ''
                }

                // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
                end >>>= 0
                start >>>= 0

                if (end <= start) {
                    return ''
                }

                if (!encoding) encoding = 'utf8'

                while (true) {
                    switch (encoding) {
                        case 'hex':
                            return hexSlice(this, start, end)

                        case 'utf8':
                        case 'utf-8':
                            return utf8Slice(this, start, end)

                        case 'ascii':
                            return asciiSlice(this, start, end)

                        case 'latin1':
                        case 'binary':
                            return latin1Slice(this, start, end)

                        case 'base64':
                            return base64Slice(this, start, end)

                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return utf16leSlice(this, start, end)

                        default:
                            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                            encoding = (encoding + '').toLowerCase()
                            loweredCase = true
                    }
                }
            }

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
            Buffer.prototype._isBuffer = true

            function swap (b, n, m) {
                var i = b[n]
                b[n] = b[m]
                b[m] = i
            }

            Buffer.prototype.swap16 = function swap16 () {
                var len = this.length
                if (len % 2 !== 0) {
                    throw new RangeError('Buffer size must be a multiple of 16-bits')
                }
                for (var i = 0; i < len; i += 2) {
                    swap(this, i, i + 1)
                }
                return this
            }

            Buffer.prototype.swap32 = function swap32 () {
                var len = this.length
                if (len % 4 !== 0) {
                    throw new RangeError('Buffer size must be a multiple of 32-bits')
                }
                for (var i = 0; i < len; i += 4) {
                    swap(this, i, i + 3)
                    swap(this, i + 1, i + 2)
                }
                return this
            }

            Buffer.prototype.swap64 = function swap64 () {
                var len = this.length
                if (len % 8 !== 0) {
                    throw new RangeError('Buffer size must be a multiple of 64-bits')
                }
                for (var i = 0; i < len; i += 8) {
                    swap(this, i, i + 7)
                    swap(this, i + 1, i + 6)
                    swap(this, i + 2, i + 5)
                    swap(this, i + 3, i + 4)
                }
                return this
            }

            Buffer.prototype.toString = function toString () {
                var length = this.length | 0
                if (length === 0) return ''
                if (arguments.length === 0) return utf8Slice(this, 0, length)
                return slowToString.apply(this, arguments)
            }

            Buffer.prototype.equals = function equals (b) {
                if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
                if (this === b) return true
                return Buffer.compare(this, b) === 0
            }

            Buffer.prototype.inspect = function inspect () {
                var str = ''
                var max = exports.INSPECT_MAX_BYTES
                if (this.length > 0) {
                    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
                    if (this.length > max) str += ' ... '
                }
                return '<Buffer ' + str + '>'
            }

            Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
                if (!Buffer.isBuffer(target)) {
                    throw new TypeError('Argument must be a Buffer')
                }

                if (start === undefined) {
                    start = 0
                }
                if (end === undefined) {
                    end = target ? target.length : 0
                }
                if (thisStart === undefined) {
                    thisStart = 0
                }
                if (thisEnd === undefined) {
                    thisEnd = this.length
                }

                if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
                    throw new RangeError('out of range index')
                }

                if (thisStart >= thisEnd && start >= end) {
                    return 0
                }
                if (thisStart >= thisEnd) {
                    return -1
                }
                if (start >= end) {
                    return 1
                }

                start >>>= 0
                end >>>= 0
                thisStart >>>= 0
                thisEnd >>>= 0

                if (this === target) return 0

                var x = thisEnd - thisStart
                var y = end - start
                var len = Math.min(x, y)

                var thisCopy = this.slice(thisStart, thisEnd)
                var targetCopy = target.slice(start, end)

                for (var i = 0; i < len; ++i) {
                    if (thisCopy[i] !== targetCopy[i]) {
                        x = thisCopy[i]
                        y = targetCopy[i]
                        break
                    }
                }

                if (x < y) return -1
                if (y < x) return 1
                return 0
            }

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
            function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
                // Empty buffer means no match
                if (buffer.length === 0) return -1

                // Normalize byteOffset
                if (typeof byteOffset === 'string') {
                    encoding = byteOffset
                    byteOffset = 0
                } else if (byteOffset > 0x7fffffff) {
                    byteOffset = 0x7fffffff
                } else if (byteOffset < -0x80000000) {
                    byteOffset = -0x80000000
                }
                byteOffset = +byteOffset  // Coerce to Number.
                if (isNaN(byteOffset)) {
                    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
                    byteOffset = dir ? 0 : (buffer.length - 1)
                }

                // Normalize byteOffset: negative offsets start from the end of the buffer
                if (byteOffset < 0) byteOffset = buffer.length + byteOffset
                if (byteOffset >= buffer.length) {
                    if (dir) return -1
                    else byteOffset = buffer.length - 1
                } else if (byteOffset < 0) {
                    if (dir) byteOffset = 0
                    else return -1
                }

                // Normalize val
                if (typeof val === 'string') {
                    val = Buffer.from(val, encoding)
                }

                // Finally, search either indexOf (if dir is true) or lastIndexOf
                if (Buffer.isBuffer(val)) {
                    // Special case: looking for empty string/buffer always fails
                    if (val.length === 0) {
                        return -1
                    }
                    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
                } else if (typeof val === 'number') {
                    val = val & 0xFF // Search for a byte value [0-255]
                    if (Buffer.TYPED_ARRAY_SUPPORT &&
                        typeof Uint8Array.prototype.indexOf === 'function') {
                        if (dir) {
                            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
                        } else {
                            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
                        }
                    }
                    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
                }

                throw new TypeError('val must be string, number or Buffer')
            }

            function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
                var indexSize = 1
                var arrLength = arr.length
                var valLength = val.length

                if (encoding !== undefined) {
                    encoding = String(encoding).toLowerCase()
                    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
                        encoding === 'utf16le' || encoding === 'utf-16le') {
                        if (arr.length < 2 || val.length < 2) {
                            return -1
                        }
                        indexSize = 2
                        arrLength /= 2
                        valLength /= 2
                        byteOffset /= 2
                    }
                }

                function read (buf, i) {
                    if (indexSize === 1) {
                        return buf[i]
                    } else {
                        return buf.readUInt16BE(i * indexSize)
                    }
                }

                var i
                if (dir) {
                    var foundIndex = -1
                    for (i = byteOffset; i < arrLength; i++) {
                        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                            if (foundIndex === -1) foundIndex = i
                            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
                        } else {
                            if (foundIndex !== -1) i -= i - foundIndex
                            foundIndex = -1
                        }
                    }
                } else {
                    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
                    for (i = byteOffset; i >= 0; i--) {
                        var found = true
                        for (var j = 0; j < valLength; j++) {
                            if (read(arr, i + j) !== read(val, j)) {
                                found = false
                                break
                            }
                        }
                        if (found) return i
                    }
                }

                return -1
            }

            Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
                return this.indexOf(val, byteOffset, encoding) !== -1
            }

            Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
                return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
            }

            Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
                return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
            }

            function hexWrite (buf, string, offset, length) {
                offset = Number(offset) || 0
                var remaining = buf.length - offset
                if (!length) {
                    length = remaining
                } else {
                    length = Number(length)
                    if (length > remaining) {
                        length = remaining
                    }
                }

                // must be an even number of digits
                var strLen = string.length
                if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

                if (length > strLen / 2) {
                    length = strLen / 2
                }
                for (var i = 0; i < length; ++i) {
                    var parsed = parseInt(string.substr(i * 2, 2), 16)
                    if (isNaN(parsed)) return i
                    buf[offset + i] = parsed
                }
                return i
            }

            function utf8Write (buf, string, offset, length) {
                return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
            }

            function asciiWrite (buf, string, offset, length) {
                return blitBuffer(asciiToBytes(string), buf, offset, length)
            }

            function latin1Write (buf, string, offset, length) {
                return asciiWrite(buf, string, offset, length)
            }

            function base64Write (buf, string, offset, length) {
                return blitBuffer(base64ToBytes(string), buf, offset, length)
            }

            function ucs2Write (buf, string, offset, length) {
                return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
            }

            Buffer.prototype.write = function write (string, offset, length, encoding) {
                // Buffer#write(string)
                if (offset === undefined) {
                    encoding = 'utf8'
                    length = this.length
                    offset = 0
                    // Buffer#write(string, encoding)
                } else if (length === undefined && typeof offset === 'string') {
                    encoding = offset
                    length = this.length
                    offset = 0
                    // Buffer#write(string, offset[, length][, encoding])
                } else if (isFinite(offset)) {
                    offset = offset | 0
                    if (isFinite(length)) {
                        length = length | 0
                        if (encoding === undefined) encoding = 'utf8'
                    } else {
                        encoding = length
                        length = undefined
                    }
                    // legacy write(string, encoding, offset, length) - remove in v0.13
                } else {
                    throw new Error(
                        'Buffer.write(string, encoding, offset[, length]) is no longer supported'
                    )
                }

                var remaining = this.length - offset
                if (length === undefined || length > remaining) length = remaining

                if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
                    throw new RangeError('Attempt to write outside buffer bounds')
                }

                if (!encoding) encoding = 'utf8'

                var loweredCase = false
                for (;;) {
                    switch (encoding) {
                        case 'hex':
                            return hexWrite(this, string, offset, length)

                        case 'utf8':
                        case 'utf-8':
                            return utf8Write(this, string, offset, length)

                        case 'ascii':
                            return asciiWrite(this, string, offset, length)

                        case 'latin1':
                        case 'binary':
                            return latin1Write(this, string, offset, length)

                        case 'base64':
                            // Warning: maxLength not taken into account in base64Write
                            return base64Write(this, string, offset, length)

                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return ucs2Write(this, string, offset, length)

                        default:
                            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                            encoding = ('' + encoding).toLowerCase()
                            loweredCase = true
                    }
                }
            }

            Buffer.prototype.toJSON = function toJSON () {
                return {
                    type: 'Buffer',
                    data: Array.prototype.slice.call(this._arr || this, 0)
                }
            }

            function base64Slice (buf, start, end) {
                if (start === 0 && end === buf.length) {
                    return base64.fromByteArray(buf)
                } else {
                    return base64.fromByteArray(buf.slice(start, end))
                }
            }

            function utf8Slice (buf, start, end) {
                end = Math.min(buf.length, end)
                var res = []

                var i = start
                while (i < end) {
                    var firstByte = buf[i]
                    var codePoint = null
                    var bytesPerSequence = (firstByte > 0xEF) ? 4
                        : (firstByte > 0xDF) ? 3
                            : (firstByte > 0xBF) ? 2
                                : 1

                    if (i + bytesPerSequence <= end) {
                        var secondByte, thirdByte, fourthByte, tempCodePoint

                        switch (bytesPerSequence) {
                            case 1:
                                if (firstByte < 0x80) {
                                    codePoint = firstByte
                                }
                                break
                            case 2:
                                secondByte = buf[i + 1]
                                if ((secondByte & 0xC0) === 0x80) {
                                    tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
                                    if (tempCodePoint > 0x7F) {
                                        codePoint = tempCodePoint
                                    }
                                }
                                break
                            case 3:
                                secondByte = buf[i + 1]
                                thirdByte = buf[i + 2]
                                if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                                    tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
                                    if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                                        codePoint = tempCodePoint
                                    }
                                }
                                break
                            case 4:
                                secondByte = buf[i + 1]
                                thirdByte = buf[i + 2]
                                fourthByte = buf[i + 3]
                                if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                                    tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
                                    if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                                        codePoint = tempCodePoint
                                    }
                                }
                        }
                    }

                    if (codePoint === null) {
                        // we did not generate a valid codePoint so insert a
                        // replacement char (U+FFFD) and advance only 1 byte
                        codePoint = 0xFFFD
                        bytesPerSequence = 1
                    } else if (codePoint > 0xFFFF) {
                        // encode to utf16 (surrogate pair dance)
                        codePoint -= 0x10000
                        res.push(codePoint >>> 10 & 0x3FF | 0xD800)
                        codePoint = 0xDC00 | codePoint & 0x3FF
                    }

                    res.push(codePoint)
                    i += bytesPerSequence
                }

                return decodeCodePointsArray(res)
            }

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
            var MAX_ARGUMENTS_LENGTH = 0x1000

            function decodeCodePointsArray (codePoints) {
                var len = codePoints.length
                if (len <= MAX_ARGUMENTS_LENGTH) {
                    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
                }

                // Decode in chunks to avoid "call stack size exceeded".
                var res = ''
                var i = 0
                while (i < len) {
                    res += String.fromCharCode.apply(
                        String,
                        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
                    )
                }
                return res
            }

            function asciiSlice (buf, start, end) {
                var ret = ''
                end = Math.min(buf.length, end)

                for (var i = start; i < end; ++i) {
                    ret += String.fromCharCode(buf[i] & 0x7F)
                }
                return ret
            }

            function latin1Slice (buf, start, end) {
                var ret = ''
                end = Math.min(buf.length, end)

                for (var i = start; i < end; ++i) {
                    ret += String.fromCharCode(buf[i])
                }
                return ret
            }

            function hexSlice (buf, start, end) {
                var len = buf.length

                if (!start || start < 0) start = 0
                if (!end || end < 0 || end > len) end = len

                var out = ''
                for (var i = start; i < end; ++i) {
                    out += toHex(buf[i])
                }
                return out
            }

            function utf16leSlice (buf, start, end) {
                var bytes = buf.slice(start, end)
                var res = ''
                for (var i = 0; i < bytes.length; i += 2) {
                    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
                }
                return res
            }

            Buffer.prototype.slice = function slice (start, end) {
                var len = this.length
                start = ~~start
                end = end === undefined ? len : ~~end

                if (start < 0) {
                    start += len
                    if (start < 0) start = 0
                } else if (start > len) {
                    start = len
                }

                if (end < 0) {
                    end += len
                    if (end < 0) end = 0
                } else if (end > len) {
                    end = len
                }

                if (end < start) end = start

                var newBuf
                if (Buffer.TYPED_ARRAY_SUPPORT) {
                    newBuf = this.subarray(start, end)
                    newBuf.__proto__ = Buffer.prototype
                } else {
                    var sliceLen = end - start
                    newBuf = new Buffer(sliceLen, undefined)
                    for (var i = 0; i < sliceLen; ++i) {
                        newBuf[i] = this[i + start]
                    }
                }

                return newBuf
            }

            /*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
            function checkOffset (offset, ext, length) {
                if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
                if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
            }

            Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
                offset = offset | 0
                byteLength = byteLength | 0
                if (!noAssert) checkOffset(offset, byteLength, this.length)

                var val = this[offset]
                var mul = 1
                var i = 0
                while (++i < byteLength && (mul *= 0x100)) {
                    val += this[offset + i] * mul
                }

                return val
            }

            Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
                offset = offset | 0
                byteLength = byteLength | 0
                if (!noAssert) {
                    checkOffset(offset, byteLength, this.length)
                }

                var val = this[offset + --byteLength]
                var mul = 1
                while (byteLength > 0 && (mul *= 0x100)) {
                    val += this[offset + --byteLength] * mul
                }

                return val
            }

            Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
                if (!noAssert) checkOffset(offset, 1, this.length)
                return this[offset]
            }

            Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
                if (!noAssert) checkOffset(offset, 2, this.length)
                return this[offset] | (this[offset + 1] << 8)
            }

            Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
                if (!noAssert) checkOffset(offset, 2, this.length)
                return (this[offset] << 8) | this[offset + 1]
            }

            Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
                if (!noAssert) checkOffset(offset, 4, this.length)

                return ((this[offset]) |
                    (this[offset + 1] << 8) |
                    (this[offset + 2] << 16)) +
                    (this[offset + 3] * 0x1000000)
            }

            Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
                if (!noAssert) checkOffset(offset, 4, this.length)

                return (this[offset] * 0x1000000) +
                    ((this[offset + 1] << 16) |
                        (this[offset + 2] << 8) |
                        this[offset + 3])
            }

            Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
                offset = offset | 0
                byteLength = byteLength | 0
                if (!noAssert) checkOffset(offset, byteLength, this.length)

                var val = this[offset]
                var mul = 1
                var i = 0
                while (++i < byteLength && (mul *= 0x100)) {
                    val += this[offset + i] * mul
                }
                mul *= 0x80

                if (val >= mul) val -= Math.pow(2, 8 * byteLength)

                return val
            }

            Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
                offset = offset | 0
                byteLength = byteLength | 0
                if (!noAssert) checkOffset(offset, byteLength, this.length)

                var i = byteLength
                var mul = 1
                var val = this[offset + --i]
                while (i > 0 && (mul *= 0x100)) {
                    val += this[offset + --i] * mul
                }
                mul *= 0x80

                if (val >= mul) val -= Math.pow(2, 8 * byteLength)

                return val
            }

            Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
                if (!noAssert) checkOffset(offset, 1, this.length)
                if (!(this[offset] & 0x80)) return (this[offset])
                return ((0xff - this[offset] + 1) * -1)
            }

            Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
                if (!noAssert) checkOffset(offset, 2, this.length)
                var val = this[offset] | (this[offset + 1] << 8)
                return (val & 0x8000) ? val | 0xFFFF0000 : val
            }

            Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
                if (!noAssert) checkOffset(offset, 2, this.length)
                var val = this[offset + 1] | (this[offset] << 8)
                return (val & 0x8000) ? val | 0xFFFF0000 : val
            }

            Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
                if (!noAssert) checkOffset(offset, 4, this.length)

                return (this[offset]) |
                    (this[offset + 1] << 8) |
                    (this[offset + 2] << 16) |
                    (this[offset + 3] << 24)
            }

            Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
                if (!noAssert) checkOffset(offset, 4, this.length)

                return (this[offset] << 24) |
                    (this[offset + 1] << 16) |
                    (this[offset + 2] << 8) |
                    (this[offset + 3])
            }

            Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
                if (!noAssert) checkOffset(offset, 4, this.length)
                return ieee754.read(this, offset, true, 23, 4)
            }

            Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
                if (!noAssert) checkOffset(offset, 4, this.length)
                return ieee754.read(this, offset, false, 23, 4)
            }

            Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
                if (!noAssert) checkOffset(offset, 8, this.length)
                return ieee754.read(this, offset, true, 52, 8)
            }

            Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
                if (!noAssert) checkOffset(offset, 8, this.length)
                return ieee754.read(this, offset, false, 52, 8)
            }

            function checkInt (buf, value, offset, ext, max, min) {
                if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
                if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
                if (offset + ext > buf.length) throw new RangeError('Index out of range')
            }

            Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
                value = +value
                offset = offset | 0
                byteLength = byteLength | 0
                if (!noAssert) {
                    var maxBytes = Math.pow(2, 8 * byteLength) - 1
                    checkInt(this, value, offset, byteLength, maxBytes, 0)
                }

                var mul = 1
                var i = 0
                this[offset] = value & 0xFF
                while (++i < byteLength && (mul *= 0x100)) {
                    this[offset + i] = (value / mul) & 0xFF
                }

                return offset + byteLength
            }

            Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
                value = +value
                offset = offset | 0
                byteLength = byteLength | 0
                if (!noAssert) {
                    var maxBytes = Math.pow(2, 8 * byteLength) - 1
                    checkInt(this, value, offset, byteLength, maxBytes, 0)
                }

                var i = byteLength - 1
                var mul = 1
                this[offset + i] = value & 0xFF
                while (--i >= 0 && (mul *= 0x100)) {
                    this[offset + i] = (value / mul) & 0xFF
                }

                return offset + byteLength
            }

            Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
                value = +value
                offset = offset | 0
                if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
                if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
                this[offset] = (value & 0xff)
                return offset + 1
            }

            function objectWriteUInt16 (buf, value, offset, littleEndian) {
                if (value < 0) value = 0xffff + value + 1
                for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
                    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
                        (littleEndian ? i : 1 - i) * 8
                }
            }

            Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
                value = +value
                offset = offset | 0
                if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
                if (Buffer.TYPED_ARRAY_SUPPORT) {
                    this[offset] = (value & 0xff)
                    this[offset + 1] = (value >>> 8)
                } else {
                    objectWriteUInt16(this, value, offset, true)
                }
                return offset + 2
            }

            Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
                value = +value
                offset = offset | 0
                if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
                if (Buffer.TYPED_ARRAY_SUPPORT) {
                    this[offset] = (value >>> 8)
                    this[offset + 1] = (value & 0xff)
                } else {
                    objectWriteUInt16(this, value, offset, false)
                }
                return offset + 2
            }

            function objectWriteUInt32 (buf, value, offset, littleEndian) {
                if (value < 0) value = 0xffffffff + value + 1
                for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
                    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
                }
            }

            Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
                value = +value
                offset = offset | 0
                if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
                if (Buffer.TYPED_ARRAY_SUPPORT) {
                    this[offset + 3] = (value >>> 24)
                    this[offset + 2] = (value >>> 16)
                    this[offset + 1] = (value >>> 8)
                    this[offset] = (value & 0xff)
                } else {
                    objectWriteUInt32(this, value, offset, true)
                }
                return offset + 4
            }

            Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
                value = +value
                offset = offset | 0
                if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
                if (Buffer.TYPED_ARRAY_SUPPORT) {
                    this[offset] = (value >>> 24)
                    this[offset + 1] = (value >>> 16)
                    this[offset + 2] = (value >>> 8)
                    this[offset + 3] = (value & 0xff)
                } else {
                    objectWriteUInt32(this, value, offset, false)
                }
                return offset + 4
            }

            Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
                value = +value
                offset = offset | 0
                if (!noAssert) {
                    var limit = Math.pow(2, 8 * byteLength - 1)

                    checkInt(this, value, offset, byteLength, limit - 1, -limit)
                }

                var i = 0
                var mul = 1
                var sub = 0
                this[offset] = value & 0xFF
                while (++i < byteLength && (mul *= 0x100)) {
                    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                        sub = 1
                    }
                    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
                }

                return offset + byteLength
            }

            Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
                value = +value
                offset = offset | 0
                if (!noAssert) {
                    var limit = Math.pow(2, 8 * byteLength - 1)

                    checkInt(this, value, offset, byteLength, limit - 1, -limit)
                }

                var i = byteLength - 1
                var mul = 1
                var sub = 0
                this[offset + i] = value & 0xFF
                while (--i >= 0 && (mul *= 0x100)) {
                    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                        sub = 1
                    }
                    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
                }

                return offset + byteLength
            }

            Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
                value = +value
                offset = offset | 0
                if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
                if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
                if (value < 0) value = 0xff + value + 1
                this[offset] = (value & 0xff)
                return offset + 1
            }

            Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
                value = +value
                offset = offset | 0
                if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
                if (Buffer.TYPED_ARRAY_SUPPORT) {
                    this[offset] = (value & 0xff)
                    this[offset + 1] = (value >>> 8)
                } else {
                    objectWriteUInt16(this, value, offset, true)
                }
                return offset + 2
            }

            Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
                value = +value
                offset = offset | 0
                if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
                if (Buffer.TYPED_ARRAY_SUPPORT) {
                    this[offset] = (value >>> 8)
                    this[offset + 1] = (value & 0xff)
                } else {
                    objectWriteUInt16(this, value, offset, false)
                }
                return offset + 2
            }

            Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
                value = +value
                offset = offset | 0
                if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
                if (Buffer.TYPED_ARRAY_SUPPORT) {
                    this[offset] = (value & 0xff)
                    this[offset + 1] = (value >>> 8)
                    this[offset + 2] = (value >>> 16)
                    this[offset + 3] = (value >>> 24)
                } else {
                    objectWriteUInt32(this, value, offset, true)
                }
                return offset + 4
            }

            Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
                value = +value
                offset = offset | 0
                if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
                if (value < 0) value = 0xffffffff + value + 1
                if (Buffer.TYPED_ARRAY_SUPPORT) {
                    this[offset] = (value >>> 24)
                    this[offset + 1] = (value >>> 16)
                    this[offset + 2] = (value >>> 8)
                    this[offset + 3] = (value & 0xff)
                } else {
                    objectWriteUInt32(this, value, offset, false)
                }
                return offset + 4
            }

            function checkIEEE754 (buf, value, offset, ext, max, min) {
                if (offset + ext > buf.length) throw new RangeError('Index out of range')
                if (offset < 0) throw new RangeError('Index out of range')
            }

            function writeFloat (buf, value, offset, littleEndian, noAssert) {
                if (!noAssert) {
                    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
                }
                ieee754.write(buf, value, offset, littleEndian, 23, 4)
                return offset + 4
            }

            Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
                return writeFloat(this, value, offset, true, noAssert)
            }

            Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
                return writeFloat(this, value, offset, false, noAssert)
            }

            function writeDouble (buf, value, offset, littleEndian, noAssert) {
                if (!noAssert) {
                    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
                }
                ieee754.write(buf, value, offset, littleEndian, 52, 8)
                return offset + 8
            }

            Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
                return writeDouble(this, value, offset, true, noAssert)
            }

            Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
                return writeDouble(this, value, offset, false, noAssert)
            }

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
            Buffer.prototype.copy = function copy (target, targetStart, start, end) {
                if (!start) start = 0
                if (!end && end !== 0) end = this.length
                if (targetStart >= target.length) targetStart = target.length
                if (!targetStart) targetStart = 0
                if (end > 0 && end < start) end = start

                // Copy 0 bytes; we're done
                if (end === start) return 0
                if (target.length === 0 || this.length === 0) return 0

                // Fatal error conditions
                if (targetStart < 0) {
                    throw new RangeError('targetStart out of bounds')
                }
                if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
                if (end < 0) throw new RangeError('sourceEnd out of bounds')

                // Are we oob?
                if (end > this.length) end = this.length
                if (target.length - targetStart < end - start) {
                    end = target.length - targetStart + start
                }

                var len = end - start
                var i

                if (this === target && start < targetStart && targetStart < end) {
                    // descending copy from end
                    for (i = len - 1; i >= 0; --i) {
                        target[i + targetStart] = this[i + start]
                    }
                } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
                    // ascending copy from start
                    for (i = 0; i < len; ++i) {
                        target[i + targetStart] = this[i + start]
                    }
                } else {
                    Uint8Array.prototype.set.call(
                        target,
                        this.subarray(start, start + len),
                        targetStart
                    )
                }

                return len
            }

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
            Buffer.prototype.fill = function fill (val, start, end, encoding) {
                // Handle string cases:
                if (typeof val === 'string') {
                    if (typeof start === 'string') {
                        encoding = start
                        start = 0
                        end = this.length
                    } else if (typeof end === 'string') {
                        encoding = end
                        end = this.length
                    }
                    if (val.length === 1) {
                        var code = val.charCodeAt(0)
                        if (code < 256) {
                            val = code
                        }
                    }
                    if (encoding !== undefined && typeof encoding !== 'string') {
                        throw new TypeError('encoding must be a string')
                    }
                    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
                        throw new TypeError('Unknown encoding: ' + encoding)
                    }
                } else if (typeof val === 'number') {
                    val = val & 255
                }

                // Invalid ranges are not set to a default, so can range check early.
                if (start < 0 || this.length < start || this.length < end) {
                    throw new RangeError('Out of range index')
                }

                if (end <= start) {
                    return this
                }

                start = start >>> 0
                end = end === undefined ? this.length : end >>> 0

                if (!val) val = 0

                var i
                if (typeof val === 'number') {
                    for (i = start; i < end; ++i) {
                        this[i] = val
                    }
                } else {
                    var bytes = Buffer.isBuffer(val)
                        ? val
                        : utf8ToBytes(new Buffer(val, encoding).toString())
                    var len = bytes.length
                    for (i = 0; i < end - start; ++i) {
                        this[i + start] = bytes[i % len]
                    }
                }

                return this
            }

// HELPER FUNCTIONS
// ================

            var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

            function base64clean (str) {
                // Node strips out invalid characters like \n and \t from the string, base64-js does not
                str = stringtrim(str).replace(INVALID_BASE64_RE, '')
                // Node converts strings with length < 2 to ''
                if (str.length < 2) return ''
                // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
                while (str.length % 4 !== 0) {
                    str = str + '='
                }
                return str
            }

            function stringtrim (str) {
                if (str.trim) return str.trim()
                return str.replace(/^\s+|\s+$/g, '')
            }

            function toHex (n) {
                if (n < 16) return '0' + n.toString(16)
                return n.toString(16)
            }

            function utf8ToBytes (string, units) {
                units = units || Infinity
                var codePoint
                var length = string.length
                var leadSurrogate = null
                var bytes = []

                for (var i = 0; i < length; ++i) {
                    codePoint = string.charCodeAt(i)

                    // is surrogate component
                    if (codePoint > 0xD7FF && codePoint < 0xE000) {
                        // last char was a lead
                        if (!leadSurrogate) {
                            // no lead yet
                            if (codePoint > 0xDBFF) {
                                // unexpected trail
                                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                                continue
                            } else if (i + 1 === length) {
                                // unpaired lead
                                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                                continue
                            }

                            // valid lead
                            leadSurrogate = codePoint

                            continue
                        }

                        // 2 leads in a row
                        if (codePoint < 0xDC00) {
                            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                            leadSurrogate = codePoint
                            continue
                        }

                        // valid surrogate pair
                        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
                    } else if (leadSurrogate) {
                        // valid bmp char, but last char was a lead
                        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                    }

                    leadSurrogate = null

                    // encode utf8
                    if (codePoint < 0x80) {
                        if ((units -= 1) < 0) break
                        bytes.push(codePoint)
                    } else if (codePoint < 0x800) {
                        if ((units -= 2) < 0) break
                        bytes.push(
                            codePoint >> 0x6 | 0xC0,
                            codePoint & 0x3F | 0x80
                        )
                    } else if (codePoint < 0x10000) {
                        if ((units -= 3) < 0) break
                        bytes.push(
                            codePoint >> 0xC | 0xE0,
                            codePoint >> 0x6 & 0x3F | 0x80,
                            codePoint & 0x3F | 0x80
                        )
                    } else if (codePoint < 0x110000) {
                        if ((units -= 4) < 0) break
                        bytes.push(
                            codePoint >> 0x12 | 0xF0,
                            codePoint >> 0xC & 0x3F | 0x80,
                            codePoint >> 0x6 & 0x3F | 0x80,
                            codePoint & 0x3F | 0x80
                        )
                    } else {
                        throw new Error('Invalid code point')
                    }
                }

                return bytes
            }

            function asciiToBytes (str) {
                var byteArray = []
                for (var i = 0; i < str.length; ++i) {
                    // Node's code seems to be doing this and not & 0x7F..
                    byteArray.push(str.charCodeAt(i) & 0xFF)
                }
                return byteArray
            }

            function utf16leToBytes (str, units) {
                var c, hi, lo
                var byteArray = []
                for (var i = 0; i < str.length; ++i) {
                    if ((units -= 2) < 0) break

                    c = str.charCodeAt(i)
                    hi = c >> 8
                    lo = c % 256
                    byteArray.push(lo)
                    byteArray.push(hi)
                }

                return byteArray
            }

            function base64ToBytes (str) {
                return base64.toByteArray(base64clean(str))
            }

            function blitBuffer (src, dst, offset, length) {
                for (var i = 0; i < length; ++i) {
                    if ((i + offset >= dst.length) || (i >= src.length)) break
                    dst[i + offset] = src[i]
                }
                return i
            }

            function isnan (val) {
                return val !== val // eslint-disable-line no-self-compare
            }

        }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

    },{"base64-js":"/bytetrade-js/node_modules/base64-js/index.js","ieee754":"/bytetrade-js/node_modules/ieee754/index.js","isarray":"/bytetrade-js/node_modules/isarray/index.js"}],"/bytetrade-js/node_modules/bytebuffer/dist/bytebuffer.js":[function(require,module,exports){
        /*
 Copyright 2013-2014 Daniel Wirtz <dcode@dcode.io>

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

        /**
         * @license bytebuffer.js (c) 2015 Daniel Wirtz <dcode@dcode.io>
         * Backing buffer: ArrayBuffer, Accessor: Uint8Array
         * Released under the Apache License, Version 2.0
         * see: https://github.com/dcodeIO/bytebuffer.js for details
         */
        (function(global, factory) {

            /* AMD */ if (typeof define === 'function' && define["amd"])
                define(["long"], factory);
            /* CommonJS */ else if (typeof require === 'function' && typeof module === "object" && module && module["exports"])
                module['exports'] = (function() {
                    var Long; try { Long = require("long"); } catch (e) {}
                    return factory(Long);
                })();
            /* Global */ else
                (global["dcodeIO"] = global["dcodeIO"] || {})["ByteBuffer"] = factory(global["dcodeIO"]["Long"]);

        })(this, function(Long) {
            "use strict";

            /**
             * Constructs a new ByteBuffer.
             * @class The swiss army knife for binary data in JavaScript.
             * @exports ByteBuffer
             * @constructor
             * @param {number=} capacity Initial capacity. Defaults to {@link ByteBuffer.DEFAULT_CAPACITY}.
             * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
             *  {@link ByteBuffer.DEFAULT_ENDIAN}.
             * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
             *  {@link ByteBuffer.DEFAULT_NOASSERT}.
             * @expose
             */
            var ByteBuffer = function(capacity, littleEndian, noAssert) {
                if (typeof capacity === 'undefined')
                    capacity = ByteBuffer.DEFAULT_CAPACITY;
                if (typeof littleEndian === 'undefined')
                    littleEndian = ByteBuffer.DEFAULT_ENDIAN;
                if (typeof noAssert === 'undefined')
                    noAssert = ByteBuffer.DEFAULT_NOASSERT;
                if (!noAssert) {
                    capacity = capacity | 0;
                    if (capacity < 0)
                        throw RangeError("Illegal capacity");
                    littleEndian = !!littleEndian;
                    noAssert = !!noAssert;
                }

                /**
                 * Backing ArrayBuffer.
                 * @type {!ArrayBuffer}
                 * @expose
                 */
                this.buffer = capacity === 0 ? EMPTY_BUFFER : new ArrayBuffer(capacity);

                /**
                 * Uint8Array utilized to manipulate the backing buffer. Becomes `null` if the backing buffer has a capacity of `0`.
                 * @type {?Uint8Array}
                 * @expose
                 */
                this.view = capacity === 0 ? null : new Uint8Array(this.buffer);

                /**
                 * Absolute read/write offset.
                 * @type {number}
                 * @expose
                 * @see ByteBuffer#flip
                 * @see ByteBuffer#clear
                 */
                this.offset = 0;

                /**
                 * Marked offset.
                 * @type {number}
                 * @expose
                 * @see ByteBuffer#mark
                 * @see ByteBuffer#reset
                 */
                this.markedOffset = -1;

                /**
                 * Absolute limit of the contained data. Set to the backing buffer's capacity upon allocation.
                 * @type {number}
                 * @expose
                 * @see ByteBuffer#flip
                 * @see ByteBuffer#clear
                 */
                this.limit = capacity;

                /**
                 * Whether to use little endian byte order, defaults to `false` for big endian.
                 * @type {boolean}
                 * @expose
                 */
                this.littleEndian = littleEndian;

                /**
                 * Whether to skip assertions of offsets and values, defaults to `false`.
                 * @type {boolean}
                 * @expose
                 */
                this.noAssert = noAssert;
            };

            /**
             * ByteBuffer version.
             * @type {string}
             * @const
             * @expose
             */
            ByteBuffer.VERSION = "5.0.1";

            /**
             * Little endian constant that can be used instead of its boolean value. Evaluates to `true`.
             * @type {boolean}
             * @const
             * @expose
             */
            ByteBuffer.LITTLE_ENDIAN = true;

            /**
             * Big endian constant that can be used instead of its boolean value. Evaluates to `false`.
             * @type {boolean}
             * @const
             * @expose
             */
            ByteBuffer.BIG_ENDIAN = false;

            /**
             * Default initial capacity of `16`.
             * @type {number}
             * @expose
             */
            ByteBuffer.DEFAULT_CAPACITY = 16;

            /**
             * Default endianess of `false` for big endian.
             * @type {boolean}
             * @expose
             */
            ByteBuffer.DEFAULT_ENDIAN = ByteBuffer.BIG_ENDIAN;

            /**
             * Default no assertions flag of `false`.
             * @type {boolean}
             * @expose
             */
            ByteBuffer.DEFAULT_NOASSERT = false;

            /**
             * A `Long` class for representing a 64-bit two's-complement integer value. May be `null` if Long.js has not been loaded
             *  and int64 support is not available.
             * @type {?Long}
             * @const
             * @see https://github.com/dcodeIO/long.js
             * @expose
             */
            ByteBuffer.Long = Long || null;

            /**
             * @alias ByteBuffer.prototype
             * @inner
             */
            var ByteBufferPrototype = ByteBuffer.prototype;

            /**
             * An indicator used to reliably determine if an object is a ByteBuffer or not.
             * @type {boolean}
             * @const
             * @expose
             * @private
             */
            ByteBufferPrototype.__isByteBuffer__;

            Object.defineProperty(ByteBufferPrototype, "__isByteBuffer__", {
                value: true,
                enumerable: false,
                configurable: false
            });

            // helpers

            /**
             * @type {!ArrayBuffer}
             * @inner
             */
            var EMPTY_BUFFER = new ArrayBuffer(0);

            /**
             * String.fromCharCode reference for compile-time renaming.
             * @type {function(...number):string}
             * @inner
             */
            var stringFromCharCode = String.fromCharCode;

            /**
             * Creates a source function for a string.
             * @param {string} s String to read from
             * @returns {function():number|null} Source function returning the next char code respectively `null` if there are
             *  no more characters left.
             * @throws {TypeError} If the argument is invalid
             * @inner
             */
            function stringSource(s) {
                var i=0; return function() {
                    return i < s.length ? s.charCodeAt(i++) : null;
                };
            }

            /**
             * Creates a destination function for a string.
             * @returns {function(number=):undefined|string} Destination function successively called with the next char code.
             *  Returns the final string when called without arguments.
             * @inner
             */
            function stringDestination() {
                var cs = [], ps = []; return function() {
                    if (arguments.length === 0)
                        return ps.join('')+stringFromCharCode.apply(String, cs);
                    if (cs.length + arguments.length > 1024)
                        ps.push(stringFromCharCode.apply(String, cs)),
                            cs.length = 0;
                    Array.prototype.push.apply(cs, arguments);
                };
            }

            /**
             * Gets the accessor type.
             * @returns {Function} `Buffer` under node.js, `Uint8Array` respectively `DataView` in the browser (classes)
             * @expose
             */
            ByteBuffer.accessor = function() {
                return Uint8Array;
            };
            /**
             * Allocates a new ByteBuffer backed by a buffer of the specified capacity.
             * @param {number=} capacity Initial capacity. Defaults to {@link ByteBuffer.DEFAULT_CAPACITY}.
             * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
             *  {@link ByteBuffer.DEFAULT_ENDIAN}.
             * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
             *  {@link ByteBuffer.DEFAULT_NOASSERT}.
             * @returns {!ByteBuffer}
             * @expose
             */
            ByteBuffer.allocate = function(capacity, littleEndian, noAssert) {
                return new ByteBuffer(capacity, littleEndian, noAssert);
            };

            /**
             * Concatenates multiple ByteBuffers into one.
             * @param {!Array.<!ByteBuffer|!ArrayBuffer|!Uint8Array|string>} buffers Buffers to concatenate
             * @param {(string|boolean)=} encoding String encoding if `buffers` contains a string ("base64", "hex", "binary",
             *  defaults to "utf8")
             * @param {boolean=} littleEndian Whether to use little or big endian byte order for the resulting ByteBuffer. Defaults
             *  to {@link ByteBuffer.DEFAULT_ENDIAN}.
             * @param {boolean=} noAssert Whether to skip assertions of offsets and values for the resulting ByteBuffer. Defaults to
             *  {@link ByteBuffer.DEFAULT_NOASSERT}.
             * @returns {!ByteBuffer} Concatenated ByteBuffer
             * @expose
             */
            ByteBuffer.concat = function(buffers, encoding, littleEndian, noAssert) {
                if (typeof encoding === 'boolean' || typeof encoding !== 'string') {
                    noAssert = littleEndian;
                    littleEndian = encoding;
                    encoding = undefined;
                }
                var capacity = 0;
                for (var i=0, k=buffers.length, length; i<k; ++i) {
                    if (!ByteBuffer.isByteBuffer(buffers[i]))
                        buffers[i] = ByteBuffer.wrap(buffers[i], encoding);
                    length = buffers[i].limit - buffers[i].offset;
                    if (length > 0) capacity += length;
                }
                if (capacity === 0)
                    return new ByteBuffer(0, littleEndian, noAssert);
                var bb = new ByteBuffer(capacity, littleEndian, noAssert),
                    bi;
                i=0; while (i<k) {
                    bi = buffers[i++];
                    length = bi.limit - bi.offset;
                    if (length <= 0) continue;
                    bb.view.set(bi.view.subarray(bi.offset, bi.limit), bb.offset);
                    bb.offset += length;
                }
                bb.limit = bb.offset;
                bb.offset = 0;
                return bb;
            };

            /**
             * Tests if the specified type is a ByteBuffer.
             * @param {*} bb ByteBuffer to test
             * @returns {boolean} `true` if it is a ByteBuffer, otherwise `false`
             * @expose
             */
            ByteBuffer.isByteBuffer = function(bb) {
                return (bb && bb["__isByteBuffer__"]) === true;
            };
            /**
             * Gets the backing buffer type.
             * @returns {Function} `Buffer` under node.js, `ArrayBuffer` in the browser (classes)
             * @expose
             */
            ByteBuffer.type = function() {
                return ArrayBuffer;
            };
            /**
             * Wraps a buffer or a string. Sets the allocated ByteBuffer's {@link ByteBuffer#offset} to `0` and its
             *  {@link ByteBuffer#limit} to the length of the wrapped data.
             * @param {!ByteBuffer|!ArrayBuffer|!Uint8Array|string|!Array.<number>} buffer Anything that can be wrapped
             * @param {(string|boolean)=} encoding String encoding if `buffer` is a string ("base64", "hex", "binary", defaults to
             *  "utf8")
             * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
             *  {@link ByteBuffer.DEFAULT_ENDIAN}.
             * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
             *  {@link ByteBuffer.DEFAULT_NOASSERT}.
             * @returns {!ByteBuffer} A ByteBuffer wrapping `buffer`
             * @expose
             */
            ByteBuffer.wrap = function(buffer, encoding, littleEndian, noAssert) {
                if (typeof encoding !== 'string') {
                    noAssert = littleEndian;
                    littleEndian = encoding;
                    encoding = undefined;
                }
                if (typeof buffer === 'string') {
                    if (typeof encoding === 'undefined')
                        encoding = "utf8";
                    switch (encoding) {
                        case "base64":
                            return ByteBuffer.fromBase64(buffer, littleEndian);
                        case "hex":
                            return ByteBuffer.fromHex(buffer, littleEndian);
                        case "binary":
                            return ByteBuffer.fromBinary(buffer, littleEndian);
                        case "utf8":
                            return ByteBuffer.fromUTF8(buffer, littleEndian);
                        case "debug":
                            return ByteBuffer.fromDebug(buffer, littleEndian);
                        default:
                            throw Error("Unsupported encoding: "+encoding);
                    }
                }
                if (buffer === null || typeof buffer !== 'object')
                    throw TypeError("Illegal buffer");
                var bb;
                if (ByteBuffer.isByteBuffer(buffer)) {
                    bb = ByteBufferPrototype.clone.call(buffer);
                    bb.markedOffset = -1;
                    return bb;
                }
                if (buffer instanceof Uint8Array) { // Extract ArrayBuffer from Uint8Array
                    bb = new ByteBuffer(0, littleEndian, noAssert);
                    if (buffer.length > 0) { // Avoid references to more than one EMPTY_BUFFER
                        bb.buffer = buffer.buffer;
                        bb.offset = buffer.byteOffset;
                        bb.limit = buffer.byteOffset + buffer.byteLength;
                        bb.view = new Uint8Array(buffer.buffer);
                    }
                } else if (buffer instanceof ArrayBuffer) { // Reuse ArrayBuffer
                    bb = new ByteBuffer(0, littleEndian, noAssert);
                    if (buffer.byteLength > 0) {
                        bb.buffer = buffer;
                        bb.offset = 0;
                        bb.limit = buffer.byteLength;
                        bb.view = buffer.byteLength > 0 ? new Uint8Array(buffer) : null;
                    }
                } else if (Object.prototype.toString.call(buffer) === "[object Array]") { // Create from octets
                    bb = new ByteBuffer(buffer.length, littleEndian, noAssert);
                    bb.limit = buffer.length;
                    for (var i=0; i<buffer.length; ++i)
                        bb.view[i] = buffer[i];
                } else
                    throw TypeError("Illegal buffer"); // Otherwise fail
                return bb;
            };

            /**
             * Writes the array as a bitset.
             * @param {Array<boolean>} value Array of booleans to write
             * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `length` if omitted.
             * @returns {!ByteBuffer}
             * @expose
             */
            ByteBufferPrototype.writeBitSet = function(value, offset) {
                var relative = typeof offset === 'undefined';
                if (relative) offset = this.offset;
                if (!this.noAssert) {
                    if (!(value instanceof Array))
                        throw TypeError("Illegal BitSet: Not an array");
                    if (typeof offset !== 'number' || offset % 1 !== 0)
                        throw TypeError("Illegal offset: "+offset+" (not an integer)");
                    offset >>>= 0;
                    if (offset < 0 || offset + 0 > this.buffer.byteLength)
                        throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
                }

                var start = offset,
                    bits = value.length,
                    bytes = (bits >> 3),
                    bit = 0,
                    k;

                offset += this.writeVarint32(bits,offset);

                while(bytes--) {
                    k = (!!value[bit++] & 1) |
                        ((!!value[bit++] & 1) << 1) |
                        ((!!value[bit++] & 1) << 2) |
                        ((!!value[bit++] & 1) << 3) |
                        ((!!value[bit++] & 1) << 4) |
                        ((!!value[bit++] & 1) << 5) |
                        ((!!value[bit++] & 1) << 6) |
                        ((!!value[bit++] & 1) << 7);
                    this.writeByte(k,offset++);
                }

                if(bit < bits) {
                    var m = 0; k = 0;
                    while(bit < bits) k = k | ((!!value[bit++] & 1) << (m++));
                    this.writeByte(k,offset++);
                }

                if (relative) {
                    this.offset = offset;
                    return this;
                }
                return offset - start;
            }

            /**
             * Reads a BitSet as an array of booleans.
             * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `length` if omitted.
             * @returns {Array<boolean>
             * @expose
             */
            ByteBufferPrototype.readBitSet = function(offset) {
                var relative = typeof offset === 'undefined';
                if (relative) offset = this.offset;

                var ret = this.readVarint32(offset),
                    bits = ret.value,
                    bytes = (bits >> 3),
                    bit = 0,
                    value = [],
                    k;

                offset += ret.length;

                while(bytes--) {
                    k = this.readByte(offset++);
                    value[bit++] = !!(k & 0x01);
                    value[bit++] = !!(k & 0x02);
                    value[bit++] = !!(k & 0x04);
                    value[bit++] = !!(k & 0x08);
                    value[bit++] = !!(k & 0x10);
                    value[bit++] = !!(k & 0x20);
                    value[bit++] = !!(k & 0x40);
                    value[bit++] = !!(k & 0x80);
                }

                if(bit < bits) {
                    var m = 0;
                    k = this.readByte(offset++);
                    while(bit < bits) value[bit++] = !!((k >> (m++)) & 1);
                }

                if (relative) {
                    this.offset = offset;
                }
                return value;
            }
            /**
             * Reads the specified number of bytes.
             * @param {number} length Number of bytes to read
             * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `length` if omitted.
             * @returns {!ByteBuffer}
             * @expose
             */
            ByteBufferPrototype.readBytes = function(length, offset) {
                var relative = typeof offset === 'undefined';
                if (relative) offset = this.offset;
                if (!this.noAssert) {
                    if (typeof offset !== 'number' || offset % 1 !== 0)
                        throw TypeError("Illegal offset: "+offset+" (not an integer)");
                    offset >>>= 0;
                    if (offset < 0 || offset + length > this.buffer.byteLength)
                        throw RangeError("Illegal offset: 0 <= "+offset+" (+"+length+") <= "+this.buffer.byteLength);
                }
                var slice = this.slice(offset, offset + length);
                if (relative) this.offset += length;
                return slice;
            };

            /**
             * Writes a payload of bytes. This is an alias of {@link ByteBuffer#append}.
             * @function
             * @param {!ByteBuffer|!ArrayBuffer|!Uint8Array|string} source Data to write. If `source` is a ByteBuffer, its offsets
             *  will be modified according to the performed read operation.
             * @param {(string|number)=} encoding Encoding if `data` is a string ("base64", "hex", "binary", defaults to "utf8")
             * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
             *  written if omitted.
             * @returns {!ByteBuffer} this
             * @expose
             */
            ByteBufferPrototype.writeBytes = ByteBufferPrototype.append;

            // types/ints/int8

            /**
             * Writes an 8bit signed integer.
             * @param {number} value Value to write
             * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
             * @returns {!ByteBuffer} this
             * @expose
             */
            ByteBufferPrototype.writeInt8 = function(value, offset) {
                var relative = typeof offset === 'undefined';
                if (relative) offset = this.offset;
                if (!this.noAssert) {
                    if (typeof value !== 'number' || value % 1 !== 0)
                        throw TypeError("Illegal value: "+value+" (not an integer)");
                    value |= 0;
                    if (typeof offset !== 'number' || offset % 1 !== 0)
                        throw TypeError("Illegal offset: "+offset+" (not an integer)");
                    offset >>>= 0;
                    if (offset < 0 || offset + 0 > this.buffer.byteLength)
                        throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
                }
                offset += 1;
                var capacity0 = this.buffer.byteLength;
                if (offset > capacity0)
                    this.resize((capacity0 *= 2) > offset ? capacity0 : offset);
                offset -= 1;
                this.view[offset] = value;
                if (relative) this.offset += 1;
                return this;
            };

            /**
             * Writes an 8bit signed integer. This is an alias of {@link ByteBuffer#writeInt8}.
             * @function
             * @param {number} value Value to write
             * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
             * @returns {!ByteBuffer} this
             * @expose
             */
            ByteBufferPrototype.writeByte = ByteBufferPrototype.writeInt8;

            /**
             * Reads an 8bit signed integer.
             * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
             * @returns {number} Value read
             * @expose
             */
            ByteBufferPrototype.readInt8 = function(offset) {
                var relative = typeof offset === 'undefined';
                if (relative) offset = this.offset;
                if (!this.noAssert) {
                    if (typeof offset !== 'number' || offset % 1 !== 0)
                        throw TypeError("Illegal offset: "+offset+" (not an integer)");
                    offset >>>= 0;
                    if (offset < 0 || offset + 1 > this.buffer.byteLength)
                        throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.byteLength);
                }
                var value = this.view[offset];
                if ((value & 0x80) === 0x80) value = -(0xFF - value + 1); // Cast to signed
                if (relative) this.offset += 1;
                return value;
            };

            /**
             * Reads an 8bit signed integer. This is an alias of {@link ByteBuffer#readInt8}.
             * @function
             * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
             * @returns {number} Value read
             * @expose
             */
            ByteBufferPrototype.readByte = ByteBufferPrototype.readInt8;

            /**
             * Writes an 8bit unsigned integer.
             * @param {number} value Value to write
             * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
             * @returns {!ByteBuffer} this
             * @expose
             */
            ByteBufferPrototype.writeUint8 = function(value, offset) {
                var relative = typeof offset === 'undefined';
                if (relative) offset = this.offset;
                if (!this.noAssert) {
                    if (typeof value !== 'number' || value % 1 !== 0)
                        throw TypeError("Illegal value: "+value+" (not an integer)");
                    value >>>= 0;
                    if (typeof offset !== 'number' || offset % 1 !== 0)
                        throw TypeError("Illegal offset: "+offset+" (not an integer)");
                    offset >>>= 0;
                    if (offset < 0 || offset + 0 > this.buffer.byteLength)
                        throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
                }
                offset += 1;
                var capacity1 = this.buffer.byteLength;
                if (offset > capacity1)
                    this.resize((capacity1 *= 2) > offset ? capacity1 : offset);
                offset -= 1;
                this.view[offset] = value;
                if (relative) this.offset += 1;
                return this;
            };

            /**
             * Writes an 8bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint8}.
             * @function
             * @param {number} value Value to write
             * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
             * @returns {!ByteBuffer} this
             * @expose
             */
            ByteBufferPrototype.writeUInt8 = ByteBufferPrototype.writeUint8;

            /**
             * Reads an 8bit unsigned integer.
             * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
             * @returns {number} Value read
             * @expose
             */
            ByteBufferPrototype.readUint8 = function(offset) {
                var relative = typeof offset === 'undefined';
                if (relative) offset = this.offset;
                if (!this.noAssert) {
                    if (typeof offset !== 'number' || offset % 1 !== 0)
                        throw TypeError("Illegal offset: "+offset+" (not an integer)");
                    offset >>>= 0;
                    if (offset < 0 || offset + 1 > this.buffer.byteLength)
                        throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.byteLength);
                }
                var value = this.view[offset];
                if (relative) this.offset += 1;
                return value;
            };

            /**
             * Reads an 8bit unsigned integer. This is an alias of {@link ByteBuffer#readUint8}.
             * @function
             * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
             * @returns {number} Value read
             * @expose
             */
            ByteBufferPrototype.readUInt8 = ByteBufferPrototype.readUint8;

            // types/ints/int16

            /**
             * Writes a 16bit signed integer.
             * @param {number} value Value to write
             * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
             * @throws {TypeError} If `offset` or `value` is not a valid number
             * @throws {RangeError} If `offset` is out of bounds
             * @expose
             */
            ByteBufferPrototype.writeInt16 = function(value, offset) {
                var relative = typeof offset === 'undefined';
                if (relative) offset = this.offset;
                if (!this.noAssert) {
                    if (typeof value !== 'number' || value % 1 !== 0)
                        throw TypeError("Illegal value: "+value+" (not an integer)");
                    value |= 0;
                    if (typeof offset !== 'number' || offset % 1 !== 0)
                        throw TypeError("Illegal offset: "+offset+" (not an integer)");
                    offset >>>= 0;
                    if (offset < 0 || offset + 0 > this.buffer.byteLength)
                        throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
                }
                offset += 2;
                var capacity2 = this.buffer.byteLength;
                if (offset > capacity2)
                    this.resize((capacity2 *= 2) > offset ? capacity2 : offset);
                offset -= 2;
                if (this.littleEndian) {
                    this.view[offset+1] = (value & 0xFF00) >>> 8;
                    this.view[offset  ] =  value & 0x00FF;
                } else {
                    this.view[offset]   = (value & 0xFF00) >>> 8;
                    this.view[offset+1] =  value & 0x00FF;
                }
                if (relative) this.offset += 2;
                return this;
            };

            /**
             * Writes a 16bit signed integer. This is an alias of {@link ByteBuffer#writeInt16}.
             * @function
             * @param {number} value Value to write
             * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
             * @throws {TypeError} If `offset` or `value` is not a valid number
             * @throws {RangeError} If `offset` is out of bounds
             * @expose
             */
            ByteBufferPrototype.writeShort = ByteBufferPrototype.writeInt16;

            /**
             * Reads a 16bit signed integer.
             * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
             * @returns {number} Value read
             * @throws {TypeError} If `offset` is not a valid number
             * @throws {RangeError} If `offset` is out of bounds
             * @expose
             */
            ByteBufferPrototype.readInt16 = function(offset) {
                var relative = typeof offset === 'undefined';
                if (relative) offset = this.offset;
                if (!this.noAssert) {
                    if (typeof offset !== 'number' || offset % 1 !== 0)
                        throw TypeError("Illegal offset: "+offset+" (not an integer)");
                    offset >>>= 0;
                    if (offset < 0 || offset + 2 > this.buffer.byteLength)
                        throw RangeError("Illegal offset: 0 <= "+offset+" (+"+2+") <= "+this.buffer.byteLength);
                }
                var value = 0;
                if (this.littleEndian) {
                    value  = this.view[offset  ];
                    value |= this.view[offset+1] << 8;
                } else {
                    value  = this.view[offset  ] << 8;
                    value |= this.view[offset+1];
                }
                if ((value & 0x8000) === 0x8000) value = -(0xFFFF - value + 1); // Cast to signed
                if (relative) this.offset += 2;
                return value;
            };

            /**
             * Reads a 16bit signed integer. This is an alias of {@link ByteBuffer#readInt16}.
             * @function
             * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
             * @returns {number} Value read
             * @throws {TypeError} If `offset` is not a valid number
             * @throws {RangeError} If `offset` is out of bounds
             * @expose
             */
            ByteBufferPrototype.readShort = ByteBufferPrototype.readInt16;

            /**
             * Writes a 16bit unsigned integer.
             * @param {number} value Value to write
             * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
             * @throws {TypeError} If `offset` or `value` is not a valid number
             * @throws {RangeError} If `offset` is out of bounds
             * @expose
             */
            ByteBufferPrototype.writeUint16 = function(value, offset) {
                var relative = typeof offset === 'undefined';
                if (relative) offset = this.offset;
                if (!this.noAssert) {
                    if (typeof value !== 'number' || value % 1 !== 0)
                        throw TypeError("Illegal value: "+value+" (not an integer)");
                    value >>>= 0;
                    if (typeof offset !== 'number' || offset % 1 !== 0)
                        throw TypeError("Illegal offset: "+offset+" (not an integer)");
                    offset >>>= 0;
                    if (offset < 0 || offset + 0 > this.buffer.byteLength)
                        throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
                }
                offset += 2;
                var capacity3 = this.buffer.byteLength;
                if (offset > capacity3)
                    this.resize((capacity3 *= 2) > offset ? capacity3 : offset);
                offset -= 2;
                if (this.littleEndian) {
                    this.view[offset+1] = (value & 0xFF00) >>> 8;
                    this.view[offset  ] =  value & 0x00FF;
                } else {
                    this.view[offset]   = (value & 0xFF00) >>> 8;
                    this.view[offset+1] =  value & 0x00FF;
                }
                if (relative) this.offset += 2;
                return this;
            };

            /**
             * Writes a 16bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint16}.
             * @function
             * @param {number} value Value to write
             * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
             * @throws {TypeError} If `offset` or `value` is not a valid number
             * @throws {RangeError} If `offset` is out of bounds
             * @expose
             */
            ByteBufferPrototype.writeUInt16 = ByteBufferPrototype.writeUint16;

            /**
             * Reads a 16bit unsigned integer.
             * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
             * @returns {number} Value read
             * @throws {TypeError} If `offset` is not a valid number
             * @throws {RangeError} If `offset` is out of bounds
             * @expose
             */
            ByteBufferPrototype.readUint16 = function(offset) {
                var relative = typeof offset === 'undefined';
                if (relative) offset = this.offset;
                if (!this.noAssert) {
                    if (typeof offset !== 'number' || offset % 1 !== 0)
                        throw TypeError("Illegal offset: "+offset+" (not an integer)");
                    offset >>>= 0;
                    if (offset < 0 || offset + 2 > this.buffer.byteLength)
                        throw RangeError("Illegal offset: 0 <= "+offset+" (+"+2+") <= "+this.buffer.byteLength);
                }
                var value = 0;
                if (this.littleEndian) {
                    value  = this.view[offset  ];
                    value |= this.view[offset+1] << 8;
                } else {
                    value  = this.view[offset  ] << 8;
                    value |= this.view[offset+1];
                }
                if (relative) this.offset += 2;
                return value;
            };

            /**
             * Reads a 16bit unsigned integer. This is an alias of {@link ByteBuffer#readUint16}.
             * @function
             * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
             * @returns {number} Value read
             * @throws {TypeError} If `offset` is not a valid number
             * @throws {RangeError} If `offset` is out of bounds
             * @expose
             */
            ByteBufferPrototype.readUInt16 = ByteBufferPrototype.readUint16;

            // types/ints/int32

            /**
             * Writes a 32bit signed integer.
             * @param {number} value Value to write
             * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
             * @expose
             */
            ByteBufferPrototype.writeInt32 = function(value, offset) {
                var relative = typeof offset === 'undefined';
                if (relative) offset = this.offset;
                if (!this.noAssert) {
                    if (typeof value !== 'number' || value % 1 !== 0)
                        throw TypeError("Illegal value: "+value+" (not an integer)");
                    value |= 0;
                    if (typeof offset !== 'number' || offset % 1 !== 0)
                        throw TypeError("Illegal offset: "+offset+" (not an integer)");
                    offset >>>= 0;
                    if (offset < 0 || offset + 0 > this.buffer.byteLength)
                        throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
                }
                offset += 4;
                var capacity4 = this.buffer.byteLength;
                if (offset > capacity4)
                    this.resize((capacity4 *= 2) > offset ? capacity4 : offset);
                offset -= 4;
                if (this.littleEndian) {
                    this.view[offset+3] = (value >>> 24) & 0xFF;
                    this.view[offset+2] = (value >>> 16) & 0xFF;
                    this.view[offset+1] = (value >>>  8) & 0xFF;
                    this.view[offset  ] =  value         & 0xFF;
                } else {
                    this.view[offset  ] = (value >>> 24) & 0xFF;
                    this.view[offset+1] = (value >>> 16) & 0xFF;
                    this.view[offset+2] = (value >>>  8) & 0xFF;
                    this.view[offset+3] =  value         & 0xFF;
                }
                if (relative) this.offset += 4;
                return this;
            };

            /**
             * Writes a 32bit signed integer. This is an alias of {@link ByteBuffer#writeInt32}.
             * @param {number} value Value to write
             * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
             * @expose
             */
            ByteBufferPrototype.writeInt = ByteBufferPrototype.writeInt32;

            /**
             * Reads a 32bit signed integer.
             * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
             * @returns {number} Value read
             * @expose
             */
            ByteBufferPrototype.readInt32 = function(offset) {
                var relative = typeof offset === 'undefined';
                if (relative) offset = this.offset;
                if (!this.noAssert) {
                    if (typeof offset !== 'number' || offset % 1 !== 0)
                        throw TypeError("Illegal offset: "+offset+" (not an integer)");
                    offset >>>= 0;
                    if (offset < 0 || offset + 4 > this.buffer.byteLength)
                        throw RangeError("Illegal offset: 0 <= "+offset+" (+"+4+") <= "+this.buffer.byteLength);
                }
                var value = 0;
                if (this.littleEndian) {
                    value  = this.view[offset+2] << 16;
                    value |= this.view[offset+1] <<  8;
                    value |= this.view[offset  ];
                    value += this.view[offset+3] << 24 >>> 0;
                } else {
                    value  = this.view[offset+1] << 16;
                    value |= this.view[offset+2] <<  8;
                    value |= this.view[offset+3];
                    value += this.view[offset  ] << 24 >>> 0;
                }
                value |= 0; // Cast to signed
                if (relative) this.offset += 4;
                return value;
            };

            /**
             * Reads a 32bit signed integer. This is an alias of {@link ByteBuffer#readInt32}.
             * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `4` if omitted.
             * @returns {number} Value read
             * @expose
             */
            ByteBufferPrototype.readInt = ByteBufferPrototype.readInt32;

            /**
             * Writes a 32bit unsigned integer.
             * @param {number} value Value to write
             * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
             * @expose
             */
            ByteBufferPrototype.writeUint32 = function(value, offset) {
                var relative = typeof offset === 'undefined';
                if (relative) offset = this.offset;
                if (!this.noAssert) {
                    if (typeof value !== 'number' || value % 1 !== 0)
                        throw TypeError("Illegal value: "+value+" (not an integer)");
                    value >>>= 0;
                    if (typeof offset !== 'number' || offset % 1 !== 0)
                        throw TypeError("Illegal offset: "+offset+" (not an integer)");
                    offset >>>= 0;
                    if (offset < 0 || offset + 0 > this.buffer.byteLength)
                        throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
                }
                offset += 4;
                var capacity5 = this.buffer.byteLength;
                if (offset > capacity5)
                    this.resize((capacity5 *= 2) > offset ? capacity5 : offset);
                offset -= 4;
                if (this.littleEndian) {
                    this.view[offset+3] = (value >>> 24) & 0xFF;
                    this.view[offset+2] = (value >>> 16) & 0xFF;
                    this.view[offset+1] = (value >>>  8) & 0xFF;
                    this.view[offset  ] =  value         & 0xFF;
                } else {
                    this.view[offset  ] = (value >>> 24) & 0xFF;
                    this.view[offset+1] = (value >>> 16) & 0xFF;
                    this.view[offset+2] = (value >>>  8) & 0xFF;
                    this.view[offset+3] =  value         & 0xFF;
                }
                if (relative) this.offset += 4;
                return this;
            };

            /**
             * Writes a 32bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint32}.
             * @function
             * @param {number} value Value to write
             * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
             * @expose
             */
            ByteBufferPrototype.writeUInt32 = ByteBufferPrototype.writeUint32;

            /**
             * Reads a 32bit unsigned integer.
             * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
             * @returns {number} Value read
             * @expose
             */
            ByteBufferPrototype.readUint32 = function(offset) {
                var relative = typeof offset === 'undefined';
                if (relative) offset = this.offset;
                if (!this.noAssert) {
                    if (typeof offset !== 'number' || offset % 1 !== 0)
                        throw TypeError("Illegal offset: "+offset+" (not an integer)");
                    offset >>>= 0;
                    if (offset < 0 || offset + 4 > this.buffer.byteLength)
                        throw RangeError("Illegal offset: 0 <= "+offset+" (+"+4+") <= "+this.buffer.byteLength);
                }
                var value = 0;
                if (this.littleEndian) {
                    value  = this.view[offset+2] << 16;
                    value |= this.view[offset+1] <<  8;
                    value |= this.view[offset  ];
                    value += this.view[offset+3] << 24 >>> 0;
                } else {
                    value  = this.view[offset+1] << 16;
                    value |= this.view[offset+2] <<  8;
                    value |= this.view[offset+3];
                    value += this.view[offset  ] << 24 >>> 0;
                }
                if (relative) this.offset += 4;
                return value;
            };

            /**
             * Reads a 32bit unsigned integer. This is an alias of {@link ByteBuffer#readUint32}.
             * @function
             * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
             * @returns {number} Value read
             * @expose
             */
            ByteBufferPrototype.readUInt32 = ByteBufferPrototype.readUint32;

            // types/ints/int64

            if (Long) {

                /**
                 * Writes a 64bit signed integer.
                 * @param {number|!Long} value Value to write
                 * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
                 * @returns {!ByteBuffer} this
                 * @expose
                 */
                ByteBufferPrototype.writeInt64 = function(value, offset) {
                    var relative = typeof offset === 'undefined';
                    if (relative) offset = this.offset;
                    if (!this.noAssert) {
                        if (typeof value === 'number')
                            value = Long.fromNumber(value);
                        else if (typeof value === 'string')
                            value = Long.fromString(value);
                        else if (!(value && value instanceof Long))
                            throw TypeError("Illegal value: "+value+" (not an integer or Long)");
                        if (typeof offset !== 'number' || offset % 1 !== 0)
                            throw TypeError("Illegal offset: "+offset+" (not an integer)");
                        offset >>>= 0;
                        if (offset < 0 || offset + 0 > this.buffer.byteLength)
                            throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
                    }
                    if (typeof value === 'number')
                        value = Long.fromNumber(value);
                    else if (typeof value === 'string')
                        value = Long.fromString(value);
                    offset += 8;
                    var capacity6 = this.buffer.byteLength;
                    if (offset > capacity6)
                        this.resize((capacity6 *= 2) > offset ? capacity6 : offset);
                    offset -= 8;
                    var lo = value.low,
                        hi = value.high;
                    if (this.littleEndian) {
                        this.view[offset+3] = (lo >>> 24) & 0xFF;
                        this.view[offset+2] = (lo >>> 16) & 0xFF;
                        this.view[offset+1] = (lo >>>  8) & 0xFF;
                        this.view[offset  ] =  lo         & 0xFF;
                        offset += 4;
                        this.view[offset+3] = (hi >>> 24) & 0xFF;
                        this.view[offset+2] = (hi >>> 16) & 0xFF;
                        this.view[offset+1] = (hi >>>  8) & 0xFF;
                        this.view[offset  ] =  hi         & 0xFF;
                    } else {
                        this.view[offset  ] = (hi >>> 24) & 0xFF;
                        this.view[offset+1] = (hi >>> 16) & 0xFF;
                        this.view[offset+2] = (hi >>>  8) & 0xFF;
                        this.view[offset+3] =  hi         & 0xFF;
                        offset += 4;
                        this.view[offset  ] = (lo >>> 24) & 0xFF;
                        this.view[offset+1] = (lo >>> 16) & 0xFF;
                        this.view[offset+2] = (lo >>>  8) & 0xFF;
                        this.view[offset+3] =  lo         & 0xFF;
                    }
                    if (relative) this.offset += 8;
                    return this;
                };

                /**
                 * Writes a 64bit signed integer. This is an alias of {@link ByteBuffer#writeInt64}.
                 * @param {number|!Long} value Value to write
                 * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
                 * @returns {!ByteBuffer} this
                 * @expose
                 */
                ByteBufferPrototype.writeLong = ByteBufferPrototype.writeInt64;

                /**
                 * Reads a 64bit signed integer.
                 * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
                 * @returns {!Long}
                 * @expose
                 */
                ByteBufferPrototype.readInt64 = function(offset) {
                    var relative = typeof offset === 'undefined';
                    if (relative) offset = this.offset;
                    if (!this.noAssert) {
                        if (typeof offset !== 'number' || offset % 1 !== 0)
                            throw TypeError("Illegal offset: "+offset+" (not an integer)");
                        offset >>>= 0;
                        if (offset < 0 || offset + 8 > this.buffer.byteLength)
                            throw RangeError("Illegal offset: 0 <= "+offset+" (+"+8+") <= "+this.buffer.byteLength);
                    }
                    var lo = 0,
                        hi = 0;
                    if (this.littleEndian) {
                        lo  = this.view[offset+2] << 16;
                        lo |= this.view[offset+1] <<  8;
                        lo |= this.view[offset  ];
                        lo += this.view[offset+3] << 24 >>> 0;
                        offset += 4;
                        hi  = this.view[offset+2] << 16;
                        hi |= this.view[offset+1] <<  8;
                        hi |= this.view[offset  ];
                        hi += this.view[offset+3] << 24 >>> 0;
                    } else {
                        hi  = this.view[offset+1] << 16;
                        hi |= this.view[offset+2] <<  8;
                        hi |= this.view[offset+3];
                        hi += this.view[offset  ] << 24 >>> 0;
                        offset += 4;
                        lo  = this.view[offset+1] << 16;
                        lo |= this.view[offset+2] <<  8;
                        lo |= this.view[offset+3];
                        lo += this.view[offset  ] << 24 >>> 0;
                    }
                    var value = new Long(lo, hi, false);
                    if (relative) this.offset += 8;
                    return value;
                };

                /**
                 * Reads a 64bit signed integer. This is an alias of {@link ByteBuffer#readInt64}.
                 * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
                 * @returns {!Long}
                 * @expose
                 */
                ByteBufferPrototype.readLong = ByteBufferPrototype.readInt64;

                /**
                 * Writes a 64bit unsigned integer.
                 * @param {number|!Long} value Value to write
                 * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
                 * @returns {!ByteBuffer} this
                 * @expose
                 */
                ByteBufferPrototype.writeUint64 = function(value, offset) {
                    var relative = typeof offset === 'undefined';
                    if (relative) offset = this.offset;
                    if (!this.noAssert) {
                        if (typeof value === 'number')
                            value = Long.fromNumber(value);
                        else if (typeof value === 'string')
                            value = Long.fromString(value);
                        else if (!(value && value instanceof Long))
                            throw TypeError("Illegal value: "+value+" (not an integer or Long)");
                        if (typeof offset !== 'number' || offset % 1 !== 0)
                            throw TypeError("Illegal offset: "+offset+" (not an integer)");
                        offset >>>= 0;
                        if (offset < 0 || offset + 0 > this.buffer.byteLength)
                            throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
                    }
                    if (typeof value === 'number')
                        value = Long.fromNumber(value);
                    else if (typeof value === 'string')
                        value = Long.fromString(value);
                    offset += 8;
                    var capacity7 = this.buffer.byteLength;
                    if (offset > capacity7)
                        this.resize((capacity7 *= 2) > offset ? capacity7 : offset);
                    offset -= 8;
                    var lo = value.low,
                        hi = value.high;
                    if (this.littleEndian) {
                        this.view[offset+3] = (lo >>> 24) & 0xFF;
                        this.view[offset+2] = (lo >>> 16) & 0xFF;
                        this.view[offset+1] = (lo >>>  8) & 0xFF;
                        this.view[offset  ] =  lo         & 0xFF;
                        offset += 4;
                        this.view[offset+3] = (hi >>> 24) & 0xFF;
                        this.view[offset+2] = (hi >>> 16) & 0xFF;
                        this.view[offset+1] = (hi >>>  8) & 0xFF;
                        this.view[offset  ] =  hi         & 0xFF;
                    } else {
                        this.view[offset  ] = (hi >>> 24) & 0xFF;
                        this.view[offset+1] = (hi >>> 16) & 0xFF;
                        this.view[offset+2] = (hi >>>  8) & 0xFF;
                        this.view[offset+3] =  hi         & 0xFF;
                        offset += 4;
                        this.view[offset  ] = (lo >>> 24) & 0xFF;
                        this.view[offset+1] = (lo >>> 16) & 0xFF;
                        this.view[offset+2] = (lo >>>  8) & 0xFF;
                        this.view[offset+3] =  lo         & 0xFF;
                    }
                    if (relative) this.offset += 8;
                    return this;
                };

                /**
                 * Writes a 64bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint64}.
                 * @function
                 * @param {number|!Long} value Value to write
                 * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
                 * @returns {!ByteBuffer} this
                 * @expose
                 */
                ByteBufferPrototype.writeUInt64 = ByteBufferPrototype.writeUint64;

                /**
                 * Reads a 64bit unsigned integer.
                 * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
                 * @returns {!Long}
                 * @expose
                 */
                ByteBufferPrototype.readUint64 = function(offset) {
                    var relative = typeof offset === 'undefined';
                    if (relative) offset = this.offset;
                    if (!this.noAssert) {
                        if (typeof offset !== 'number' || offset % 1 !== 0)
                            throw TypeError("Illegal offset: "+offset+" (not an integer)");
                        offset >>>= 0;
                        if (offset < 0 || offset + 8 > this.buffer.byteLength)
                            throw RangeError("Illegal offset: 0 <= "+offset+" (+"+8+") <= "+this.buffer.byteLength);
                    }
                    var lo = 0,
                        hi = 0;
                    if (this.littleEndian) {
                        lo  = this.view[offset+2] << 16;
                        lo |= this.view[offset+1] <<  8;
                        lo |= this.view[offset  ];
                        lo += this.view[offset+3] << 24 >>> 0;
                        offset += 4;
                        hi  = this.view[offset+2] << 16;
                        hi |= this.view[offset+1] <<  8;
                        hi |= this.view[offset  ];
                        hi += this.view[offset+3] << 24 >>> 0;
                    } else {
                        hi  = this.view[offset+1] << 16;
                        hi |= this.view[offset+2] <<  8;
                        hi |= this.view[offset+3];
                        hi += this.view[offset  ] << 24 >>> 0;
                        offset += 4;
                        lo  = this.view[offset+1] << 16;
                        lo |= this.view[offset+2] <<  8;
                        lo |= this.view[offset+3];
                        lo += this.view[offset  ] << 24 >>> 0;
                    }
                    var value = new Long(lo, hi, true);
                    if (relative) this.offset += 8;
                    return value;
                };

                /**
                 * Reads a 64bit unsigned integer. This is an alias of {@link ByteBuffer#readUint64}.
                 * @function
                 * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
                 * @returns {!Long}
                 * @expose
                 */
                ByteBufferPrototype.readUInt64 = ByteBufferPrototype.readUint64;

            } // Long


            // types/floats/float32

            /*
     ieee754 - https://github.com/feross/ieee754

     The MIT License (MIT)

     Copyright (c) Feross Aboukhadijeh

     Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated documentation files (the "Software"), to deal
     in the Software without restriction, including without limitation the rights
     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     copies of the Software, and to permit persons to whom the Software is
     furnished to do so, subject to the following conditions:

     The above copyright notice and this permission notice shall be included in
     all copies or substantial portions of the Software.

     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
    */

            /**
             * Reads an IEEE754 float from a byte array.
             * @param {!Array} buffer
             * @param {number} offset
             * @param {boolean} isLE
             * @param {number} mLen
             * @param {number} nBytes
             * @returns {number}
             * @inner
             */
            function ieee754_read(buffer, offset, isLE, mLen, nBytes) {
                var e, m,
                    eLen = nBytes * 8 - mLen - 1,
                    eMax = (1 << eLen) - 1,
                    eBias = eMax >> 1,
                    nBits = -7,
                    i = isLE ? (nBytes - 1) : 0,
                    d = isLE ? -1 : 1,
                    s = buffer[offset + i];

                i += d;

                e = s & ((1 << (-nBits)) - 1);
                s >>= (-nBits);
                nBits += eLen;
                for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

                m = e & ((1 << (-nBits)) - 1);
                e >>= (-nBits);
                nBits += mLen;
                for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

                if (e === 0) {
                    e = 1 - eBias;
                } else if (e === eMax) {
                    return m ? NaN : ((s ? -1 : 1) * Infinity);
                } else {
                    m = m + Math.pow(2, mLen);
                    e = e - eBias;
                }
                return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
            }

            /**
             * Writes an IEEE754 float to a byte array.
             * @param {!Array} buffer
             * @param {number} value
             * @param {number} offset
             * @param {boolean} isLE
             * @param {number} mLen
             * @param {number} nBytes
             * @inner
             */
            function ieee754_write(buffer, value, offset, isLE, mLen, nBytes) {
                var e, m, c,
                    eLen = nBytes * 8 - mLen - 1,
                    eMax = (1 << eLen) - 1,
                    eBias = eMax >> 1,
                    rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
                    i = isLE ? 0 : (nBytes - 1),
                    d = isLE ? 1 : -1,
                    s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

                value = Math.abs(value);

                if (isNaN(value) || value === Infinity) {
                    m = isNaN(value) ? 1 : 0;
                    e = eMax;
                } else {
                    e = Math.floor(Math.log(value) / Math.LN2);
                    if (value * (c = Math.pow(2, -e)) < 1) {
                        e--;
                        c *= 2;
                    }
                    if (e + eBias >= 1) {
                        value += rt / c;
                    } else {
                        value += rt * Math.pow(2, 1 - eBias);
                    }
                    if (value * c >= 2) {
                        e++;
                        c /= 2;
                    }

                    if (e + eBias >= eMax) {
                        m = 0;
                        e = eMax;
                    } else if (e + eBias >= 1) {
                        m = (value * c - 1) * Math.pow(2, mLen);
                        e = e + eBias;
                    } else {
                        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                        e = 0;
                    }
                }

                for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

                e = (e << mLen) | m;
                eLen += mLen;
                for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

                buffer[offset + i - d] |= s * 128;
            }

            /**
             * Writes a 32bit float.
             * @param {number} value Value to write
             * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
             * @returns {!ByteBuffer} this
             * @expose
             */
            ByteBufferPrototype.writeFloat32 = function(value, offset) {
                var relative = typeof offset === 'undefined';
                if (relative) offset = this.offset;
                if (!this.noAssert) {
                    if (typeof value !== 'number')
                        throw TypeError("Illegal value: "+value+" (not a number)");
                    if (typeof offset !== 'number' || offset % 1 !== 0)
                        throw TypeError("Illegal offset: "+offset+" (not an integer)");
                    offset >>>= 0;
                    if (offset < 0 || offset + 0 > this.buffer.byteLength)
                        throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
                }
                offset += 4;
                var capacity8 = this.buffer.byteLength;
                if (offset > capacity8)
                    this.resize((capacity8 *= 2) > offset ? capacity8 : offset);
                offset -= 4;
                ieee754_write(this.view, value, offset, this.littleEndian, 23, 4);
                if (relative) this.offset += 4;
                return this;
            };

            /**
             * Writes a 32bit float. This is an alias of {@link ByteBuffer#writeFloat32}.
             * @function
             * @param {number} value Value to write
             * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
             * @returns {!ByteBuffer} this
             * @expose
             */
            ByteBufferPrototype.writeFloat = ByteBufferPrototype.writeFloat32;

            /**
             * Reads a 32bit float.
             * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
             * @returns {number}
             * @expose
             */
            ByteBufferPrototype.readFloat32 = function(offset) {
                var relative = typeof offset === 'undefined';
                if (relative) offset = this.offset;
                if (!this.noAssert) {
                    if (typeof offset !== 'number' || offset % 1 !== 0)
                        throw TypeError("Illegal offset: "+offset+" (not an integer)");
                    offset >>>= 0;
                    if (offset < 0 || offset + 4 > this.buffer.byteLength)
                        throw RangeError("Illegal offset: 0 <= "+offset+" (+"+4+") <= "+this.buffer.byteLength);
                }
                var value = ieee754_read(this.view, offset, this.littleEndian, 23, 4);
                if (relative) this.offset += 4;
                return value;
            };

            /**
             * Reads a 32bit float. This is an alias of {@link ByteBuffer#readFloat32}.
             * @function
             * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
             * @returns {number}
             * @expose
             */
            ByteBufferPrototype.readFloat = ByteBufferPrototype.readFloat32;

            // types/floats/float64

            /**
             * Writes a 64bit float.
             * @param {number} value Value to write
             * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
             * @returns {!ByteBuffer} this
             * @expose
             */
            ByteBufferPrototype.writeFloat64 = function(value, offset) {
                var relative = typeof offset === 'undefined';
                if (relative) offset = this.offset;
                if (!this.noAssert) {
                    if (typeof value !== 'number')
                        throw TypeError("Illegal value: "+value+" (not a number)");
                    if (typeof offset !== 'number' || offset % 1 !== 0)
                        throw TypeError("Illegal offset: "+offset+" (not an integer)");
                    offset >>>= 0;
                    if (offset < 0 || offset + 0 > this.buffer.byteLength)
                        throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
                }
                offset += 8;
                var capacity9 = this.buffer.byteLength;
                if (offset > capacity9)
                    this.resize((capacity9 *= 2) > offset ? capacity9 : offset);
                offset -= 8;
                ieee754_write(this.view, value, offset, this.littleEndian, 52, 8);
                if (relative) this.offset += 8;
                return this;
            };

            /**
             * Writes a 64bit float. This is an alias of {@link ByteBuffer#writeFloat64}.
             * @function
             * @param {number} value Value to write
             * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
             * @returns {!ByteBuffer} this
             * @expose
             */
            ByteBufferPrototype.writeDouble = ByteBufferPrototype.writeFloat64;

            /**
             * Reads a 64bit float.
             * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
             * @returns {number}
             * @expose
             */
            ByteBufferPrototype.readFloat64 = function(offset) {
                var relative = typeof offset === 'undefined';
                if (relative) offset = this.offset;
                if (!this.noAssert) {
                    if (typeof offset !== 'number' || offset % 1 !== 0)
                        throw TypeError("Illegal offset: "+offset+" (not an integer)");
                    offset >>>= 0;
                    if (offset < 0 || offset + 8 > this.buffer.byteLength)
                        throw RangeError("Illegal offset: 0 <= "+offset+" (+"+8+") <= "+this.buffer.byteLength);
                }
                var value = ieee754_read(this.view, offset, this.littleEndian, 52, 8);
                if (relative) this.offset += 8;
                return value;
            };

            /**
             * Reads a 64bit float. This is an alias of {@link ByteBuffer#readFloat64}.
             * @function
             * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
             * @returns {number}
             * @expose
             */
            ByteBufferPrototype.readDouble = ByteBufferPrototype.readFloat64;


            // types/varints/varint32

            /**
             * Maximum number of bytes required to store a 32bit base 128 variable-length integer.
             * @type {number}
             * @const
             * @expose
             */
            ByteBuffer.MAX_VARINT32_BYTES = 5;

            /**
             * Calculates the actual number of bytes required to store a 32bit base 128 variable-length integer.
             * @param {number} value Value to encode
             * @returns {number} Number of bytes required. Capped to {@link ByteBuffer.MAX_VARINT32_BYTES}
             * @expose
             */
            ByteBuffer.calculateVarint32 = function(value) {
                // ref: src/google/protobuf/io/coded_stream.cc
                value = value >>> 0;
                if (value < 1 << 7 ) return 1;
                else if (value < 1 << 14) return 2;
                else if (value < 1 << 21) return 3;
                else if (value < 1 << 28) return 4;
                else                      return 5;
            };

            /**
             * Zigzag encodes a signed 32bit integer so that it can be effectively used with varint encoding.
             * @param {number} n Signed 32bit integer
             * @returns {number} Unsigned zigzag encoded 32bit integer
             * @expose
             */
            ByteBuffer.zigZagEncode32 = function(n) {
                return (((n |= 0) << 1) ^ (n >> 31)) >>> 0; // ref: src/google/protobuf/wire_format_lite.h
            };

            /**
             * Decodes a zigzag encoded signed 32bit integer.
             * @param {number} n Unsigned zigzag encoded 32bit integer
             * @returns {number} Signed 32bit integer
             * @expose
             */
            ByteBuffer.zigZagDecode32 = function(n) {
                return ((n >>> 1) ^ -(n & 1)) | 0; // // ref: src/google/protobuf/wire_format_lite.h
            };

            /**
             * Writes a 32bit base 128 variable-length integer.
             * @param {number} value Value to write
             * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
             *  written if omitted.
             * @returns {!ByteBuffer|number} this if `offset` is omitted, else the actual number of bytes written
             * @expose
             */
            ByteBufferPrototype.writeVarint32 = function(value, offset) {
                var relative = typeof offset === 'undefined';
                if (relative) offset = this.offset;
                if (!this.noAssert) {
                    if (typeof value !== 'number' || value % 1 !== 0)
                        throw TypeError("Illegal value: "+value+" (not an integer)");
                    value |= 0;
                    if (typeof offset !== 'number' || offset % 1 !== 0)
                        throw TypeError("Illegal offset: "+offset+" (not an integer)");
                    offset >>>= 0;
                    if (offset < 0 || offset + 0 > this.buffer.byteLength)
                        throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
                }
                var size = ByteBuffer.calculateVarint32(value),
                    b;
                offset += size;
                var capacity10 = this.buffer.byteLength;
                if (offset > capacity10)
                    this.resize((capacity10 *= 2) > offset ? capacity10 : offset);
                offset -= size;
                value >>>= 0;
                while (value >= 0x80) {
                    b = (value & 0x7f) | 0x80;
                    this.view[offset++] = b;
                    value >>>= 7;
                }
                this.view[offset++] = value;
                if (relative) {
                    this.offset = offset;
                    return this;
                }
                return size;
            };

            /**
             * Writes a zig-zag encoded (signed) 32bit base 128 variable-length integer.
             * @param {number} value Value to write
             * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
             *  written if omitted.
             * @returns {!ByteBuffer|number} this if `offset` is omitted, else the actual number of bytes written
             * @expose
             */
            ByteBufferPrototype.writeVarint32ZigZag = function(value, offset) {
                return this.writeVarint32(ByteBuffer.zigZagEncode32(value), offset);
            };

            /**
             * Reads a 32bit base 128 variable-length integer.
             * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
             *  written if omitted.
             * @returns {number|!{value: number, length: number}} The value read if offset is omitted, else the value read
             *  and the actual number of bytes read.
             * @throws {Error} If it's not a valid varint. Has a property `truncated = true` if there is not enough data available
             *  to fully decode the varint.
             * @expose
             */
            ByteBufferPrototype.readVarint32 = function(offset) {
                var relative = typeof offset === 'undefined';
                if (relative) offset = this.offset;
                if (!this.noAssert) {
                    if (typeof offset !== 'number' || offset % 1 !== 0)
                        throw TypeError("Illegal offset: "+offset+" (not an integer)");
                    offset >>>= 0;
                    if (offset < 0 || offset + 1 > this.buffer.byteLength)
                        throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.byteLength);
                }
                var c = 0,
                    value = 0 >>> 0,
                    b;
                do {
                    if (!this.noAssert && offset > this.limit) {
                        var err = Error("Truncated");
                        err['truncated'] = true;
                        throw err;
                    }
                    b = this.view[offset++];
                    if (c < 5)
                        value |= (b & 0x7f) << (7*c);
                    ++c;
                } while ((b & 0x80) !== 0);
                value |= 0;
                if (relative) {
                    this.offset = offset;
                    return value;
                }
                return {
                    "value": value,
                    "length": c
                };
            };

            /**
             * Reads a zig-zag encoded (signed) 32bit base 128 variable-length integer.
             * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
             *  written if omitted.
             * @returns {number|!{value: number, length: number}} The value read if offset is omitted, else the value read
             *  and the actual number of bytes read.
             * @throws {Error} If it's not a valid varint
             * @expose
             */
            ByteBufferPrototype.readVarint32ZigZag = function(offset) {
                var val = this.readVarint32(offset);
                if (typeof val === 'object')
                    val["value"] = ByteBuffer.zigZagDecode32(val["value"]);
                else
                    val = ByteBuffer.zigZagDecode32(val);
                return val;
            };

            // types/varints/varint64

            if (Long) {

                /**
                 * Maximum number of bytes required to store a 64bit base 128 variable-length integer.
                 * @type {number}
                 * @const
                 * @expose
                 */
                ByteBuffer.MAX_VARINT64_BYTES = 10;

                /**
                 * Calculates the actual number of bytes required to store a 64bit base 128 variable-length integer.
                 * @param {number|!Long} value Value to encode
                 * @returns {number} Number of bytes required. Capped to {@link ByteBuffer.MAX_VARINT64_BYTES}
                 * @expose
                 */
                ByteBuffer.calculateVarint64 = function(value) {
                    if (typeof value === 'number')
                        value = Long.fromNumber(value);
                    else if (typeof value === 'string')
                        value = Long.fromString(value);
                    // ref: src/google/protobuf/io/coded_stream.cc
                    var part0 = value.toInt() >>> 0,
                        part1 = value.shiftRightUnsigned(28).toInt() >>> 0,
                        part2 = value.shiftRightUnsigned(56).toInt() >>> 0;
                    if (part2 == 0) {
                        if (part1 == 0) {
                            if (part0 < 1 << 14)
                                return part0 < 1 << 7 ? 1 : 2;
                            else
                                return part0 < 1 << 21 ? 3 : 4;
                        } else {
                            if (part1 < 1 << 14)
                                return part1 < 1 << 7 ? 5 : 6;
                            else
                                return part1 < 1 << 21 ? 7 : 8;
                        }
                    } else
                        return part2 < 1 << 7 ? 9 : 10;
                };

                /**
                 * Zigzag encodes a signed 64bit integer so that it can be effectively used with varint encoding.
                 * @param {number|!Long} value Signed long
                 * @returns {!Long} Unsigned zigzag encoded long
                 * @expose
                 */
                ByteBuffer.zigZagEncode64 = function(value) {
                    if (typeof value === 'number')
                        value = Long.fromNumber(value, false);
                    else if (typeof value === 'string')
                        value = Long.fromString(value, false);
                    else if (value.unsigned !== false) value = value.toSigned();
                    // ref: src/google/protobuf/wire_format_lite.h
                    return value.shiftLeft(1).xor(value.shiftRight(63)).toUnsigned();
                };

                /**
                 * Decodes a zigzag encoded signed 64bit integer.
                 * @param {!Long|number} value Unsigned zigzag encoded long or JavaScript number
                 * @returns {!Long} Signed long
                 * @expose
                 */
                ByteBuffer.zigZagDecode64 = function(value) {
                    if (typeof value === 'number')
                        value = Long.fromNumber(value, false);
                    else if (typeof value === 'string')
                        value = Long.fromString(value, false);
                    else if (value.unsigned !== false) value = value.toSigned();
                    // ref: src/google/protobuf/wire_format_lite.h
                    return value.shiftRightUnsigned(1).xor(value.and(Long.ONE).toSigned().negate()).toSigned();
                };

                /**
                 * Writes a 64bit base 128 variable-length integer.
                 * @param {number|Long} value Value to write
                 * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
                 *  written if omitted.
                 * @returns {!ByteBuffer|number} `this` if offset is omitted, else the actual number of bytes written.
                 * @expose
                 */
                ByteBufferPrototype.writeVarint64 = function(value, offset) {
                    var relative = typeof offset === 'undefined';
                    if (relative) offset = this.offset;
                    if (!this.noAssert) {
                        if (typeof value === 'number')
                            value = Long.fromNumber(value);
                        else if (typeof value === 'string')
                            value = Long.fromString(value);
                        else if (!(value && value instanceof Long))
                            throw TypeError("Illegal value: "+value+" (not an integer or Long)");
                        if (typeof offset !== 'number' || offset % 1 !== 0)
                            throw TypeError("Illegal offset: "+offset+" (not an integer)");
                        offset >>>= 0;
                        if (offset < 0 || offset + 0 > this.buffer.byteLength)
                            throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
                    }
                    if (typeof value === 'number')
                        value = Long.fromNumber(value, false);
                    else if (typeof value === 'string')
                        value = Long.fromString(value, false);
                    else if (value.unsigned !== false) value = value.toSigned();
                    var size = ByteBuffer.calculateVarint64(value),
                        part0 = value.toInt() >>> 0,
                        part1 = value.shiftRightUnsigned(28).toInt() >>> 0,
                        part2 = value.shiftRightUnsigned(56).toInt() >>> 0;
                    offset += size;
                    var capacity11 = this.buffer.byteLength;
                    if (offset > capacity11)
                        this.resize((capacity11 *= 2) > offset ? capacity11 : offset);
                    offset -= size;
                    switch (size) {
                        case 10: this.view[offset+9] = (part2 >>>  7) & 0x01;
                        case 9 : this.view[offset+8] = size !== 9 ? (part2       ) | 0x80 : (part2       ) & 0x7F;
                        case 8 : this.view[offset+7] = size !== 8 ? (part1 >>> 21) | 0x80 : (part1 >>> 21) & 0x7F;
                        case 7 : this.view[offset+6] = size !== 7 ? (part1 >>> 14) | 0x80 : (part1 >>> 14) & 0x7F;
                        case 6 : this.view[offset+5] = size !== 6 ? (part1 >>>  7) | 0x80 : (part1 >>>  7) & 0x7F;
                        case 5 : this.view[offset+4] = size !== 5 ? (part1       ) | 0x80 : (part1       ) & 0x7F;
                        case 4 : this.view[offset+3] = size !== 4 ? (part0 >>> 21) | 0x80 : (part0 >>> 21) & 0x7F;
                        case 3 : this.view[offset+2] = size !== 3 ? (part0 >>> 14) | 0x80 : (part0 >>> 14) & 0x7F;
                        case 2 : this.view[offset+1] = size !== 2 ? (part0 >>>  7) | 0x80 : (part0 >>>  7) & 0x7F;
                        case 1 : this.view[offset  ] = size !== 1 ? (part0       ) | 0x80 : (part0       ) & 0x7F;
                    }
                    if (relative) {
                        this.offset += size;
                        return this;
                    } else {
                        return size;
                    }
                };

                /**
                 * Writes a zig-zag encoded 64bit base 128 variable-length integer.
                 * @param {number|Long} value Value to write
                 * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
                 *  written if omitted.
                 * @returns {!ByteBuffer|number} `this` if offset is omitted, else the actual number of bytes written.
                 * @expose
                 */
                ByteBufferPrototype.writeVarint64ZigZag = function(value, offset) {
                    return this.writeVarint64(ByteBuffer.zigZagEncode64(value), offset);
                };

                /**
                 * Reads a 64bit base 128 variable-length integer. Requires Long.js.
                 * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
                 *  read if omitted.
                 * @returns {!Long|!{value: Long, length: number}} The value read if offset is omitted, else the value read and
                 *  the actual number of bytes read.
                 * @throws {Error} If it's not a valid varint
                 * @expose
                 */
                ByteBufferPrototype.readVarint64 = function(offset) {
                    var relative = typeof offset === 'undefined';
                    if (relative) offset = this.offset;
                    if (!this.noAssert) {
                        if (typeof offset !== 'number' || offset % 1 !== 0)
                            throw TypeError("Illegal offset: "+offset+" (not an integer)");
                        offset >>>= 0;
                        if (offset < 0 || offset + 1 > this.buffer.byteLength)
                            throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.byteLength);
                    }
                    // ref: src/google/protobuf/io/coded_stream.cc
                    var start = offset,
                        part0 = 0,
                        part1 = 0,
                        part2 = 0,
                        b  = 0;
                    b = this.view[offset++]; part0  = (b & 0x7F)      ; if ( b & 0x80                                                   ) {
                        b = this.view[offset++]; part0 |= (b & 0x7F) <<  7; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
                            b = this.view[offset++]; part0 |= (b & 0x7F) << 14; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
                                b = this.view[offset++]; part0 |= (b & 0x7F) << 21; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
                                    b = this.view[offset++]; part1  = (b & 0x7F)      ; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
                                        b = this.view[offset++]; part1 |= (b & 0x7F) <<  7; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
                                            b = this.view[offset++]; part1 |= (b & 0x7F) << 14; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
                                                b = this.view[offset++]; part1 |= (b & 0x7F) << 21; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
                                                    b = this.view[offset++]; part2  = (b & 0x7F)      ; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
                                                        b = this.view[offset++]; part2 |= (b & 0x7F) <<  7; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {
                                                            throw Error("Buffer overrun"); }}}}}}}}}}
                    var value = Long.fromBits(part0 | (part1 << 28), (part1 >>> 4) | (part2) << 24, false);
                    if (relative) {
                        this.offset = offset;
                        return value;
                    } else {
                        return {
                            'value': value,
                            'length': offset-start
                        };
                    }
                };

                /**
                 * Reads a zig-zag encoded 64bit base 128 variable-length integer. Requires Long.js.
                 * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
                 *  read if omitted.
                 * @returns {!Long|!{value: Long, length: number}} The value read if offset is omitted, else the value read and
                 *  the actual number of bytes read.
                 * @throws {Error} If it's not a valid varint
                 * @expose
                 */
                ByteBufferPrototype.readVarint64ZigZag = function(offset) {
                    var val = this.readVarint64(offset);
                    if (val && val['value'] instanceof Long)
                        val["value"] = ByteBuffer.zigZagDecode64(val["value"]);
                    else
                        val = ByteBuffer.zigZagDecode64(val);
                    return val;
                };

            } // Long


            // types/strings/cstring

            /**
             * Writes a NULL-terminated UTF8 encoded string. For this to work the specified string must not contain any NULL
             *  characters itself.
             * @param {string} str String to write
             * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
             *  contained in `str` + 1 if omitted.
             * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written
             * @expose
             */
            ByteBufferPrototype.writeCString = function(str, offset) {
                var relative = typeof offset === 'undefined';
                if (relative) offset = this.offset;
                var i,
                    k = str.length;
                if (!this.noAssert) {
                    if (typeof str !== 'string')
                        throw TypeError("Illegal str: Not a string");
                    for (i=0; i<k; ++i) {
                        if (str.charCodeAt(i) === 0)
                            throw RangeError("Illegal str: Contains NULL-characters");
                    }
                    if (typeof offset !== 'number' || offset % 1 !== 0)
                        throw TypeError("Illegal offset: "+offset+" (not an integer)");
                    offset >>>= 0;
                    if (offset < 0 || offset + 0 > this.buffer.byteLength)
                        throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
                }
                // UTF8 strings do not contain zero bytes in between except for the zero character, so:
                k = utfx.calculateUTF16asUTF8(stringSource(str))[1];
                offset += k+1;
                var capacity12 = this.buffer.byteLength;
                if (offset > capacity12)
                    this.resize((capacity12 *= 2) > offset ? capacity12 : offset);
                offset -= k+1;
                utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
                    this.view[offset++] = b;
                }.bind(this));
                this.view[offset++] = 0;
                if (relative) {
                    this.offset = offset;
                    return this;
                }
                return k;
            };

            /**
             * Reads a NULL-terminated UTF8 encoded string. For this to work the string read must not contain any NULL characters
             *  itself.
             * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
             *  read if omitted.
             * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
             *  read and the actual number of bytes read.
             * @expose
             */
            ByteBufferPrototype.readCString = function(offset) {
                var relative = typeof offset === 'undefined';
                if (relative) offset = this.offset;
                if (!this.noAssert) {
                    if (typeof offset !== 'number' || offset % 1 !== 0)
                        throw TypeError("Illegal offset: "+offset+" (not an integer)");
                    offset >>>= 0;
                    if (offset < 0 || offset + 1 > this.buffer.byteLength)
                        throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.byteLength);
                }
                var start = offset,
                    temp;
                // UTF8 strings do not contain zero bytes in between except for the zero character itself, so:
                var sd, b = -1;
                utfx.decodeUTF8toUTF16(function() {
                    if (b === 0) return null;
                    if (offset >= this.limit)
                        throw RangeError("Illegal range: Truncated data, "+offset+" < "+this.limit);
                    b = this.view[offset++];
                    return b === 0 ? null : b;
                }.bind(this), sd = stringDestination(), true);
                if (relative) {
                    this.offset = offset;
                    return sd();
                } else {
                    return {
                        "string": sd(),
                        "length": offset - start
                    };
                }
            };

            // types/strings/istring

            /**
             * Writes a length as uint32 prefixed UTF8 encoded string.
             * @param {string} str String to write
             * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
             *  written if omitted.
             * @returns {!ByteBuffer|number} `this` if `offset` is omitted, else the actual number of bytes written
             * @expose
             * @see ByteBuffer#writeVarint32
             */
            ByteBufferPrototype.writeIString = function(str, offset) {
                var relative = typeof offset === 'undefined';
                if (relative) offset = this.offset;
                if (!this.noAssert) {
                    if (typeof str !== 'string')
                        throw TypeError("Illegal str: Not a string");
                    if (typeof offset !== 'number' || offset % 1 !== 0)
                        throw TypeError("Illegal offset: "+offset+" (not an integer)");
                    offset >>>= 0;
                    if (offset < 0 || offset + 0 > this.buffer.byteLength)
                        throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
                }
                var start = offset,
                    k;
                k = utfx.calculateUTF16asUTF8(stringSource(str), this.noAssert)[1];
                offset += 4+k;
                var capacity13 = this.buffer.byteLength;
                if (offset > capacity13)
                    this.resize((capacity13 *= 2) > offset ? capacity13 : offset);
                offset -= 4+k;
                if (this.littleEndian) {
                    this.view[offset+3] = (k >>> 24) & 0xFF;
                    this.view[offset+2] = (k >>> 16) & 0xFF;
                    this.view[offset+1] = (k >>>  8) & 0xFF;
                    this.view[offset  ] =  k         & 0xFF;
                } else {
                    this.view[offset  ] = (k >>> 24) & 0xFF;
                    this.view[offset+1] = (k >>> 16) & 0xFF;
                    this.view[offset+2] = (k >>>  8) & 0xFF;
                    this.view[offset+3] =  k         & 0xFF;
                }
                offset += 4;
                utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
                    this.view[offset++] = b;
                }.bind(this));
                if (offset !== start + 4 + k)
                    throw RangeError("Illegal range: Truncated data, "+offset+" == "+(offset+4+k));
                if (relative) {
                    this.offset = offset;
                    return this;
                }
                return offset - start;
            };

            /**
             * Reads a length as uint32 prefixed UTF8 encoded string.
             * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
             *  read if omitted.
             * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
             *  read and the actual number of bytes read.
             * @expose
             * @see ByteBuffer#readVarint32
             */
            ByteBufferPrototype.readIString = function(offset) {
                var relative = typeof offset === 'undefined';
                if (relative) offset = this.offset;
                if (!this.noAssert) {
                    if (typeof offset !== 'number' || offset % 1 !== 0)
                        throw TypeError("Illegal offset: "+offset+" (not an integer)");
                    offset >>>= 0;
                    if (offset < 0 || offset + 4 > this.buffer.byteLength)
                        throw RangeError("Illegal offset: 0 <= "+offset+" (+"+4+") <= "+this.buffer.byteLength);
                }
                var start = offset;
                var len = this.readUint32(offset);
                var str = this.readUTF8String(len, ByteBuffer.METRICS_BYTES, offset += 4);
                offset += str['length'];
                if (relative) {
                    this.offset = offset;
                    return str['string'];
                } else {
                    return {
                        'string': str['string'],
                        'length': offset - start
                    };
                }
            };

            // types/strings/utf8string

            /**
             * Metrics representing number of UTF8 characters. Evaluates to `c`.
             * @type {string}
             * @const
             * @expose
             */
            ByteBuffer.METRICS_CHARS = 'c';

            /**
             * Metrics representing number of bytes. Evaluates to `b`.
             * @type {string}
             * @const
             * @expose
             */
            ByteBuffer.METRICS_BYTES = 'b';

            /**
             * Writes an UTF8 encoded string.
             * @param {string} str String to write
             * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} if omitted.
             * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written.
             * @expose
             */
            ByteBufferPrototype.writeUTF8String = function(str, offset) {
                var relative = typeof offset === 'undefined';
                if (relative) offset = this.offset;
                if (!this.noAssert) {
                    if (typeof offset !== 'number' || offset % 1 !== 0)
                        throw TypeError("Illegal offset: "+offset+" (not an integer)");
                    offset >>>= 0;
                    if (offset < 0 || offset + 0 > this.buffer.byteLength)
                        throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
                }
                var k;
                var start = offset;
                k = utfx.calculateUTF16asUTF8(stringSource(str))[1];
                offset += k;
                var capacity14 = this.buffer.byteLength;
                if (offset > capacity14)
                    this.resize((capacity14 *= 2) > offset ? capacity14 : offset);
                offset -= k;
                utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
                    this.view[offset++] = b;
                }.bind(this));
                if (relative) {
                    this.offset = offset;
                    return this;
                }
                return offset - start;
            };

            /**
             * Writes an UTF8 encoded string. This is an alias of {@link ByteBuffer#writeUTF8String}.
             * @function
             * @param {string} str String to write
             * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} if omitted.
             * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written.
             * @expose
             */
            ByteBufferPrototype.writeString = ByteBufferPrototype.writeUTF8String;

            /**
             * Calculates the number of UTF8 characters of a string. JavaScript itself uses UTF-16, so that a string's
             *  `length` property does not reflect its actual UTF8 size if it contains code points larger than 0xFFFF.
             * @param {string} str String to calculate
             * @returns {number} Number of UTF8 characters
             * @expose
             */
            ByteBuffer.calculateUTF8Chars = function(str) {
                return utfx.calculateUTF16asUTF8(stringSource(str))[0];
            };

            /**
             * Calculates the number of UTF8 bytes of a string.
             * @param {string} str String to calculate
             * @returns {number} Number of UTF8 bytes
             * @expose
             */
            ByteBuffer.calculateUTF8Bytes = function(str) {
                return utfx.calculateUTF16asUTF8(stringSource(str))[1];
            };

            /**
             * Calculates the number of UTF8 bytes of a string. This is an alias of {@link ByteBuffer.calculateUTF8Bytes}.
             * @function
             * @param {string} str String to calculate
             * @returns {number} Number of UTF8 bytes
             * @expose
             */
            ByteBuffer.calculateString = ByteBuffer.calculateUTF8Bytes;

            /**
             * Reads an UTF8 encoded string.
             * @param {number} length Number of characters or bytes to read.
             * @param {string=} metrics Metrics specifying what `length` is meant to count. Defaults to
             *  {@link ByteBuffer.METRICS_CHARS}.
             * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
             *  read if omitted.
             * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
             *  read and the actual number of bytes read.
             * @expose
             */
            ByteBufferPrototype.readUTF8String = function(length, metrics, offset) {
                if (typeof metrics === 'number') {
                    offset = metrics;
                    metrics = undefined;
                }
                var relative = typeof offset === 'undefined';
                if (relative) offset = this.offset;
                if (typeof metrics === 'undefined') metrics = ByteBuffer.METRICS_CHARS;
                if (!this.noAssert) {
                    if (typeof length !== 'number' || length % 1 !== 0)
                        throw TypeError("Illegal length: "+length+" (not an integer)");
                    length |= 0;
                    if (typeof offset !== 'number' || offset % 1 !== 0)
                        throw TypeError("Illegal offset: "+offset+" (not an integer)");
                    offset >>>= 0;
                    if (offset < 0 || offset + 0 > this.buffer.byteLength)
                        throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
                }
                var i = 0,
                    start = offset,
                    sd;
                if (metrics === ByteBuffer.METRICS_CHARS) { // The same for node and the browser
                    sd = stringDestination();
                    utfx.decodeUTF8(function() {
                        return i < length && offset < this.limit ? this.view[offset++] : null;
                    }.bind(this), function(cp) {
                        ++i; utfx.UTF8toUTF16(cp, sd);
                    });
                    if (i !== length)
                        throw RangeError("Illegal range: Truncated data, "+i+" == "+length);
                    if (relative) {
                        this.offset = offset;
                        return sd();
                    } else {
                        return {
                            "string": sd(),
                            "length": offset - start
                        };
                    }
                } else if (metrics === ByteBuffer.METRICS_BYTES) {
                    if (!this.noAssert) {
                        if (typeof offset !== 'number' || offset % 1 !== 0)
                            throw TypeError("Illegal offset: "+offset+" (not an integer)");
                        offset >>>= 0;
                        if (offset < 0 || offset + length > this.buffer.byteLength)
                            throw RangeError("Illegal offset: 0 <= "+offset+" (+"+length+") <= "+this.buffer.byteLength);
                    }
                    var k = offset + length;
                    utfx.decodeUTF8toUTF16(function() {
                        return offset < k ? this.view[offset++] : null;
                    }.bind(this), sd = stringDestination(), this.noAssert);
                    if (offset !== k)
                        throw RangeError("Illegal range: Truncated data, "+offset+" == "+k);
                    if (relative) {
                        this.offset = offset;
                        return sd();
                    } else {
                        return {
                            'string': sd(),
                            'length': offset - start
                        };
                    }
                } else
                    throw TypeError("Unsupported metrics: "+metrics);
            };

            /**
             * Reads an UTF8 encoded string. This is an alias of {@link ByteBuffer#readUTF8String}.
             * @function
             * @param {number} length Number of characters or bytes to read
             * @param {number=} metrics Metrics specifying what `n` is meant to count. Defaults to
             *  {@link ByteBuffer.METRICS_CHARS}.
             * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
             *  read if omitted.
             * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
             *  read and the actual number of bytes read.
             * @expose
             */
            ByteBufferPrototype.readString = ByteBufferPrototype.readUTF8String;

            // types/strings/vstring

            /**
             * Writes a length as varint32 prefixed UTF8 encoded string.
             * @param {string} str String to write
             * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
             *  written if omitted.
             * @returns {!ByteBuffer|number} `this` if `offset` is omitted, else the actual number of bytes written
             * @expose
             * @see ByteBuffer#writeVarint32
             */
            ByteBufferPrototype.writeVString = function(str, offset) {
                var relative = typeof offset === 'undefined';
                if (relative) offset = this.offset;
                if (!this.noAssert) {
                    if (typeof str !== 'string')
                        throw TypeError("Illegal str: Not a string");
                    if (typeof offset !== 'number' || offset % 1 !== 0)
                        throw TypeError("Illegal offset: "+offset+" (not an integer)");
                    offset >>>= 0;
                    if (offset < 0 || offset + 0 > this.buffer.byteLength)
                        throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
                }
                var start = offset,
                    k, l;
                k = utfx.calculateUTF16asUTF8(stringSource(str), this.noAssert)[1];
                l = ByteBuffer.calculateVarint32(k);
                offset += l+k;
                var capacity15 = this.buffer.byteLength;
                if (offset > capacity15)
                    this.resize((capacity15 *= 2) > offset ? capacity15 : offset);
                offset -= l+k;
                offset += this.writeVarint32(k, offset);
                utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
                    this.view[offset++] = b;
                }.bind(this));
                if (offset !== start+k+l)
                    throw RangeError("Illegal range: Truncated data, "+offset+" == "+(offset+k+l));
                if (relative) {
                    this.offset = offset;
                    return this;
                }
                return offset - start;
            };

            /**
             * Reads a length as varint32 prefixed UTF8 encoded string.
             * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
             *  read if omitted.
             * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
             *  read and the actual number of bytes read.
             * @expose
             * @see ByteBuffer#readVarint32
             */
            ByteBufferPrototype.readVString = function(offset) {
                var relative = typeof offset === 'undefined';
                if (relative) offset = this.offset;
                if (!this.noAssert) {
                    if (typeof offset !== 'number' || offset % 1 !== 0)
                        throw TypeError("Illegal offset: "+offset+" (not an integer)");
                    offset >>>= 0;
                    if (offset < 0 || offset + 1 > this.buffer.byteLength)
                        throw RangeError("Illegal offset: 0 <= "+offset+" (+"+1+") <= "+this.buffer.byteLength);
                }
                var start = offset;
                var len = this.readVarint32(offset);
                var str = this.readUTF8String(len['value'], ByteBuffer.METRICS_BYTES, offset += len['length']);
                offset += str['length'];
                if (relative) {
                    this.offset = offset;
                    return str['string'];
                } else {
                    return {
                        'string': str['string'],
                        'length': offset - start
                    };
                }
            };


            /**
             * Appends some data to this ByteBuffer. This will overwrite any contents behind the specified offset up to the appended
             *  data's length.
             * @param {!ByteBuffer|!ArrayBuffer|!Uint8Array|string} source Data to append. If `source` is a ByteBuffer, its offsets
             *  will be modified according to the performed read operation.
             * @param {(string|number)=} encoding Encoding if `data` is a string ("base64", "hex", "binary", defaults to "utf8")
             * @param {number=} offset Offset to append at. Will use and increase {@link ByteBuffer#offset} by the number of bytes
             *  written if omitted.
             * @returns {!ByteBuffer} this
             * @expose
             * @example A relative `<01 02>03.append(<04 05>)` will result in `<01 02 04 05>, 04 05|`
             * @example An absolute `<01 02>03.append(04 05>, 1)` will result in `<01 04>05, 04 05|`
             */
            ByteBufferPrototype.append = function(source, encoding, offset) {
                if (typeof encoding === 'number' || typeof encoding !== 'string') {
                    offset = encoding;
                    encoding = undefined;
                }
                var relative = typeof offset === 'undefined';
                if (relative) offset = this.offset;
                if (!this.noAssert) {
                    if (typeof offset !== 'number' || offset % 1 !== 0)
                        throw TypeError("Illegal offset: "+offset+" (not an integer)");
                    offset >>>= 0;
                    if (offset < 0 || offset + 0 > this.buffer.byteLength)
                        throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
                }
                if (!(source instanceof ByteBuffer))
                    source = ByteBuffer.wrap(source, encoding);
                var length = source.limit - source.offset;
                if (length <= 0) return this; // Nothing to append
                offset += length;
                var capacity16 = this.buffer.byteLength;
                if (offset > capacity16)
                    this.resize((capacity16 *= 2) > offset ? capacity16 : offset);
                offset -= length;
                this.view.set(source.view.subarray(source.offset, source.limit), offset);
                source.offset += length;
                if (relative) this.offset += length;
                return this;
            };

            /**
             * Appends this ByteBuffer's contents to another ByteBuffer. This will overwrite any contents at and after the
             specified offset up to the length of this ByteBuffer's data.
             * @param {!ByteBuffer} target Target ByteBuffer
             * @param {number=} offset Offset to append to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
             *  read if omitted.
             * @returns {!ByteBuffer} this
             * @expose
             * @see ByteBuffer#append
             */
            ByteBufferPrototype.appendTo = function(target, offset) {
                target.append(this, offset);
                return this;
            };

            /**
             * Enables or disables assertions of argument types and offsets. Assertions are enabled by default but you can opt to
             *  disable them if your code already makes sure that everything is valid.
             * @param {boolean} assert `true` to enable assertions, otherwise `false`
             * @returns {!ByteBuffer} this
             * @expose
             */
            ByteBufferPrototype.assert = function(assert) {
                this.noAssert = !assert;
                return this;
            };

            /**
             * Gets the capacity of this ByteBuffer's backing buffer.
             * @returns {number} Capacity of the backing buffer
             * @expose
             */
            ByteBufferPrototype.capacity = function() {
                return this.buffer.byteLength;
            };
            /**
             * Clears this ByteBuffer's offsets by setting {@link ByteBuffer#offset} to `0` and {@link ByteBuffer#limit} to the
             *  backing buffer's capacity. Discards {@link ByteBuffer#markedOffset}.
             * @returns {!ByteBuffer} this
             * @expose
             */
            ByteBufferPrototype.clear = function() {
                this.offset = 0;
                this.limit = this.buffer.byteLength;
                this.markedOffset = -1;
                return this;
            };

            /**
             * Creates a cloned instance of this ByteBuffer, preset with this ByteBuffer's values for {@link ByteBuffer#offset},
             *  {@link ByteBuffer#markedOffset} and {@link ByteBuffer#limit}.
             * @param {boolean=} copy Whether to copy the backing buffer or to return another view on the same, defaults to `false`
             * @returns {!ByteBuffer} Cloned instance
             * @expose
             */
            ByteBufferPrototype.clone = function(copy) {
                var bb = new ByteBuffer(0, this.littleEndian, this.noAssert);
                if (copy) {
                    bb.buffer = new ArrayBuffer(this.buffer.byteLength);
                    bb.view = new Uint8Array(bb.buffer);
                } else {
                    bb.buffer = this.buffer;
                    bb.view = this.view;
                }
                bb.offset = this.offset;
                bb.markedOffset = this.markedOffset;
                bb.limit = this.limit;
                return bb;
            };

            /**
             * Compacts this ByteBuffer to be backed by a {@link ByteBuffer#buffer} of its contents' length. Contents are the bytes
             *  between {@link ByteBuffer#offset} and {@link ByteBuffer#limit}. Will set `offset = 0` and `limit = capacity` and
             *  adapt {@link ByteBuffer#markedOffset} to the same relative position if set.
             * @param {number=} begin Offset to start at, defaults to {@link ByteBuffer#offset}
             * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}
             * @returns {!ByteBuffer} this
             * @expose
             */
            ByteBufferPrototype.compact = function(begin, end) {
                if (typeof begin === 'undefined') begin = this.offset;
                if (typeof end === 'undefined') end = this.limit;
                if (!this.noAssert) {
                    if (typeof begin !== 'number' || begin % 1 !== 0)
                        throw TypeError("Illegal begin: Not an integer");
                    begin >>>= 0;
                    if (typeof end !== 'number' || end % 1 !== 0)
                        throw TypeError("Illegal end: Not an integer");
                    end >>>= 0;
                    if (begin < 0 || begin > end || end > this.buffer.byteLength)
                        throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
                }
                if (begin === 0 && end === this.buffer.byteLength)
                    return this; // Already compacted
                var len = end - begin;
                if (len === 0) {
                    this.buffer = EMPTY_BUFFER;
                    this.view = null;
                    if (this.markedOffset >= 0) this.markedOffset -= begin;
                    this.offset = 0;
                    this.limit = 0;
                    return this;
                }
                var buffer = new ArrayBuffer(len);
                var view = new Uint8Array(buffer);
                view.set(this.view.subarray(begin, end));
                this.buffer = buffer;
                this.view = view;
                if (this.markedOffset >= 0) this.markedOffset -= begin;
                this.offset = 0;
                this.limit = len;
                return this;
            };

            /**
             * Creates a copy of this ByteBuffer's contents. Contents are the bytes between {@link ByteBuffer#offset} and
             *  {@link ByteBuffer#limit}.
             * @param {number=} begin Begin offset, defaults to {@link ByteBuffer#offset}.
             * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.
             * @returns {!ByteBuffer} Copy
             * @expose
             */
            ByteBufferPrototype.copy = function(begin, end) {
                if (typeof begin === 'undefined') begin = this.offset;
                if (typeof end === 'undefined') end = this.limit;
                if (!this.noAssert) {
                    if (typeof begin !== 'number' || begin % 1 !== 0)
                        throw TypeError("Illegal begin: Not an integer");
                    begin >>>= 0;
                    if (typeof end !== 'number' || end % 1 !== 0)
                        throw TypeError("Illegal end: Not an integer");
                    end >>>= 0;
                    if (begin < 0 || begin > end || end > this.buffer.byteLength)
                        throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
                }
                if (begin === end)
                    return new ByteBuffer(0, this.littleEndian, this.noAssert);
                var capacity = end - begin,
                    bb = new ByteBuffer(capacity, this.littleEndian, this.noAssert);
                bb.offset = 0;
                bb.limit = capacity;
                if (bb.markedOffset >= 0) bb.markedOffset -= begin;
                this.copyTo(bb, 0, begin, end);
                return bb;
            };

            /**
             * Copies this ByteBuffer's contents to another ByteBuffer. Contents are the bytes between {@link ByteBuffer#offset} and
             *  {@link ByteBuffer#limit}.
             * @param {!ByteBuffer} target Target ByteBuffer
             * @param {number=} targetOffset Offset to copy to. Will use and increase the target's {@link ByteBuffer#offset}
             *  by the number of bytes copied if omitted.
             * @param {number=} sourceOffset Offset to start copying from. Will use and increase {@link ByteBuffer#offset} by the
             *  number of bytes copied if omitted.
             * @param {number=} sourceLimit Offset to end copying from, defaults to {@link ByteBuffer#limit}
             * @returns {!ByteBuffer} this
             * @expose
             */
            ByteBufferPrototype.copyTo = function(target, targetOffset, sourceOffset, sourceLimit) {
                var relative,
                    targetRelative;
                if (!this.noAssert) {
                    if (!ByteBuffer.isByteBuffer(target))
                        throw TypeError("Illegal target: Not a ByteBuffer");
                }
                targetOffset = (targetRelative = typeof targetOffset === 'undefined') ? target.offset : targetOffset | 0;
                sourceOffset = (relative = typeof sourceOffset === 'undefined') ? this.offset : sourceOffset | 0;
                sourceLimit = typeof sourceLimit === 'undefined' ? this.limit : sourceLimit | 0;

                if (targetOffset < 0 || targetOffset > target.buffer.byteLength)
                    throw RangeError("Illegal target range: 0 <= "+targetOffset+" <= "+target.buffer.byteLength);
                if (sourceOffset < 0 || sourceLimit > this.buffer.byteLength)
                    throw RangeError("Illegal source range: 0 <= "+sourceOffset+" <= "+this.buffer.byteLength);

                var len = sourceLimit - sourceOffset;
                if (len === 0)
                    return target; // Nothing to copy

                target.ensureCapacity(targetOffset + len);

                target.view.set(this.view.subarray(sourceOffset, sourceLimit), targetOffset);

                if (relative) this.offset += len;
                if (targetRelative) target.offset += len;

                return this;
            };

            /**
             * Makes sure that this ByteBuffer is backed by a {@link ByteBuffer#buffer} of at least the specified capacity. If the
             *  current capacity is exceeded, it will be doubled. If double the current capacity is less than the required capacity,
             *  the required capacity will be used instead.
             * @param {number} capacity Required capacity
             * @returns {!ByteBuffer} this
             * @expose
             */
            ByteBufferPrototype.ensureCapacity = function(capacity) {
                var current = this.buffer.byteLength;
                if (current < capacity)
                    return this.resize((current *= 2) > capacity ? current : capacity);
                return this;
            };

            /**
             * Overwrites this ByteBuffer's contents with the specified value. Contents are the bytes between
             *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}.
             * @param {number|string} value Byte value to fill with. If given as a string, the first character is used.
             * @param {number=} begin Begin offset. Will use and increase {@link ByteBuffer#offset} by the number of bytes
             *  written if omitted. defaults to {@link ByteBuffer#offset}.
             * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.
             * @returns {!ByteBuffer} this
             * @expose
             * @example `someByteBuffer.clear().fill(0)` fills the entire backing buffer with zeroes
             */
            ByteBufferPrototype.fill = function(value, begin, end) {
                var relative = typeof begin === 'undefined';
                if (relative) begin = this.offset;
                if (typeof value === 'string' && value.length > 0)
                    value = value.charCodeAt(0);
                if (typeof begin === 'undefined') begin = this.offset;
                if (typeof end === 'undefined') end = this.limit;
                if (!this.noAssert) {
                    if (typeof value !== 'number' || value % 1 !== 0)
                        throw TypeError("Illegal value: "+value+" (not an integer)");
                    value |= 0;
                    if (typeof begin !== 'number' || begin % 1 !== 0)
                        throw TypeError("Illegal begin: Not an integer");
                    begin >>>= 0;
                    if (typeof end !== 'number' || end % 1 !== 0)
                        throw TypeError("Illegal end: Not an integer");
                    end >>>= 0;
                    if (begin < 0 || begin > end || end > this.buffer.byteLength)
                        throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
                }
                if (begin >= end)
                    return this; // Nothing to fill
                while (begin < end) this.view[begin++] = value;
                if (relative) this.offset = begin;
                return this;
            };

            /**
             * Makes this ByteBuffer ready for a new sequence of write or relative read operations. Sets `limit = offset` and
             *  `offset = 0`. Make sure always to flip a ByteBuffer when all relative read or write operations are complete.
             * @returns {!ByteBuffer} this
             * @expose
             */
            ByteBufferPrototype.flip = function() {
                this.limit = this.offset;
                this.offset = 0;
                return this;
            };
            /**
             * Marks an offset on this ByteBuffer to be used later.
             * @param {number=} offset Offset to mark. Defaults to {@link ByteBuffer#offset}.
             * @returns {!ByteBuffer} this
             * @throws {TypeError} If `offset` is not a valid number
             * @throws {RangeError} If `offset` is out of bounds
             * @see ByteBuffer#reset
             * @expose
             */
            ByteBufferPrototype.mark = function(offset) {
                offset = typeof offset === 'undefined' ? this.offset : offset;
                if (!this.noAssert) {
                    if (typeof offset !== 'number' || offset % 1 !== 0)
                        throw TypeError("Illegal offset: "+offset+" (not an integer)");
                    offset >>>= 0;
                    if (offset < 0 || offset + 0 > this.buffer.byteLength)
                        throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
                }
                this.markedOffset = offset;
                return this;
            };
            /**
             * Sets the byte order.
             * @param {boolean} littleEndian `true` for little endian byte order, `false` for big endian
             * @returns {!ByteBuffer} this
             * @expose
             */
            ByteBufferPrototype.order = function(littleEndian) {
                if (!this.noAssert) {
                    if (typeof littleEndian !== 'boolean')
                        throw TypeError("Illegal littleEndian: Not a boolean");
                }
                this.littleEndian = !!littleEndian;
                return this;
            };

            /**
             * Switches (to) little endian byte order.
             * @param {boolean=} littleEndian Defaults to `true`, otherwise uses big endian
             * @returns {!ByteBuffer} this
             * @expose
             */
            ByteBufferPrototype.LE = function(littleEndian) {
                this.littleEndian = typeof littleEndian !== 'undefined' ? !!littleEndian : true;
                return this;
            };

            /**
             * Switches (to) big endian byte order.
             * @param {boolean=} bigEndian Defaults to `true`, otherwise uses little endian
             * @returns {!ByteBuffer} this
             * @expose
             */
            ByteBufferPrototype.BE = function(bigEndian) {
                this.littleEndian = typeof bigEndian !== 'undefined' ? !bigEndian : false;
                return this;
            };
            /**
             * Prepends some data to this ByteBuffer. This will overwrite any contents before the specified offset up to the
             *  prepended data's length. If there is not enough space available before the specified `offset`, the backing buffer
             *  will be resized and its contents moved accordingly.
             * @param {!ByteBuffer|string|!ArrayBuffer} source Data to prepend. If `source` is a ByteBuffer, its offset will be
             *  modified according to the performed read operation.
             * @param {(string|number)=} encoding Encoding if `data` is a string ("base64", "hex", "binary", defaults to "utf8")
             * @param {number=} offset Offset to prepend at. Will use and decrease {@link ByteBuffer#offset} by the number of bytes
             *  prepended if omitted.
             * @returns {!ByteBuffer} this
             * @expose
             * @example A relative `00<01 02 03>.prepend(<04 05>)` results in `<04 05 01 02 03>, 04 05|`
             * @example An absolute `00<01 02 03>.prepend(<04 05>, 2)` results in `04<05 02 03>, 04 05|`
             */
            ByteBufferPrototype.prepend = function(source, encoding, offset) {
                if (typeof encoding === 'number' || typeof encoding !== 'string') {
                    offset = encoding;
                    encoding = undefined;
                }
                var relative = typeof offset === 'undefined';
                if (relative) offset = this.offset;
                if (!this.noAssert) {
                    if (typeof offset !== 'number' || offset % 1 !== 0)
                        throw TypeError("Illegal offset: "+offset+" (not an integer)");
                    offset >>>= 0;
                    if (offset < 0 || offset + 0 > this.buffer.byteLength)
                        throw RangeError("Illegal offset: 0 <= "+offset+" (+"+0+") <= "+this.buffer.byteLength);
                }
                if (!(source instanceof ByteBuffer))
                    source = ByteBuffer.wrap(source, encoding);
                var len = source.limit - source.offset;
                if (len <= 0) return this; // Nothing to prepend
                var diff = len - offset;
                if (diff > 0) { // Not enough space before offset, so resize + move
                    var buffer = new ArrayBuffer(this.buffer.byteLength + diff);
                    var view = new Uint8Array(buffer);
                    view.set(this.view.subarray(offset, this.buffer.byteLength), len);
                    this.buffer = buffer;
                    this.view = view;
                    this.offset += diff;
                    if (this.markedOffset >= 0) this.markedOffset += diff;
                    this.limit += diff;
                    offset += diff;
                } else {
                    var arrayView = new Uint8Array(this.buffer);
                }
                this.view.set(source.view.subarray(source.offset, source.limit), offset - len);

                source.offset = source.limit;
                if (relative)
                    this.offset -= len;
                return this;
            };

            /**
             * Prepends this ByteBuffer to another ByteBuffer. This will overwrite any contents before the specified offset up to the
             *  prepended data's length. If there is not enough space available before the specified `offset`, the backing buffer
             *  will be resized and its contents moved accordingly.
             * @param {!ByteBuffer} target Target ByteBuffer
             * @param {number=} offset Offset to prepend at. Will use and decrease {@link ByteBuffer#offset} by the number of bytes
             *  prepended if omitted.
             * @returns {!ByteBuffer} this
             * @expose
             * @see ByteBuffer#prepend
             */
            ByteBufferPrototype.prependTo = function(target, offset) {
                target.prepend(this, offset);
                return this;
            };
            /**
             * Prints debug information about this ByteBuffer's contents.
             * @param {function(string)=} out Output function to call, defaults to console.log
             * @expose
             */
            ByteBufferPrototype.printDebug = function(out) {
                if (typeof out !== 'function') out = console.log.bind(console);
                out(
                    this.toString()+"\n"+
                    "-------------------------------------------------------------------\n"+
                    this.toDebug(/* columns */ true)
                );
            };

            /**
             * Gets the number of remaining readable bytes. Contents are the bytes between {@link ByteBuffer#offset} and
             *  {@link ByteBuffer#limit}, so this returns `limit - offset`.
             * @returns {number} Remaining readable bytes. May be negative if `offset > limit`.
             * @expose
             */
            ByteBufferPrototype.remaining = function() {
                return this.limit - this.offset;
            };
            /**
             * Resets this ByteBuffer's {@link ByteBuffer#offset}. If an offset has been marked through {@link ByteBuffer#mark}
             *  before, `offset` will be set to {@link ByteBuffer#markedOffset}, which will then be discarded. If no offset has been
             *  marked, sets `offset = 0`.
             * @returns {!ByteBuffer} this
             * @see ByteBuffer#mark
             * @expose
             */
            ByteBufferPrototype.reset = function() {
                if (this.markedOffset >= 0) {
                    this.offset = this.markedOffset;
                    this.markedOffset = -1;
                } else {
                    this.offset = 0;
                }
                return this;
            };
            /**
             * Resizes this ByteBuffer to be backed by a buffer of at least the given capacity. Will do nothing if already that
             *  large or larger.
             * @param {number} capacity Capacity required
             * @returns {!ByteBuffer} this
             * @throws {TypeError} If `capacity` is not a number
             * @throws {RangeError} If `capacity < 0`
             * @expose
             */
            ByteBufferPrototype.resize = function(capacity) {
                if (!this.noAssert) {
                    if (typeof capacity !== 'number' || capacity % 1 !== 0)
                        throw TypeError("Illegal capacity: "+capacity+" (not an integer)");
                    capacity |= 0;
                    if (capacity < 0)
                        throw RangeError("Illegal capacity: 0 <= "+capacity);
                }
                if (this.buffer.byteLength < capacity) {
                    var buffer = new ArrayBuffer(capacity);
                    var view = new Uint8Array(buffer);
                    view.set(this.view);
                    this.buffer = buffer;
                    this.view = view;
                }
                return this;
            };
            /**
             * Reverses this ByteBuffer's contents.
             * @param {number=} begin Offset to start at, defaults to {@link ByteBuffer#offset}
             * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}
             * @returns {!ByteBuffer} this
             * @expose
             */
            ByteBufferPrototype.reverse = function(begin, end) {
                if (typeof begin === 'undefined') begin = this.offset;
                if (typeof end === 'undefined') end = this.limit;
                if (!this.noAssert) {
                    if (typeof begin !== 'number' || begin % 1 !== 0)
                        throw TypeError("Illegal begin: Not an integer");
                    begin >>>= 0;
                    if (typeof end !== 'number' || end % 1 !== 0)
                        throw TypeError("Illegal end: Not an integer");
                    end >>>= 0;
                    if (begin < 0 || begin > end || end > this.buffer.byteLength)
                        throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
                }
                if (begin === end)
                    return this; // Nothing to reverse
                Array.prototype.reverse.call(this.view.subarray(begin, end));
                return this;
            };
            /**
             * Skips the next `length` bytes. This will just advance
             * @param {number} length Number of bytes to skip. May also be negative to move the offset back.
             * @returns {!ByteBuffer} this
             * @expose
             */
            ByteBufferPrototype.skip = function(length) {
                if (!this.noAssert) {
                    if (typeof length !== 'number' || length % 1 !== 0)
                        throw TypeError("Illegal length: "+length+" (not an integer)");
                    length |= 0;
                }
                var offset = this.offset + length;
                if (!this.noAssert) {
                    if (offset < 0 || offset > this.buffer.byteLength)
                        throw RangeError("Illegal length: 0 <= "+this.offset+" + "+length+" <= "+this.buffer.byteLength);
                }
                this.offset = offset;
                return this;
            };

            /**
             * Slices this ByteBuffer by creating a cloned instance with `offset = begin` and `limit = end`.
             * @param {number=} begin Begin offset, defaults to {@link ByteBuffer#offset}.
             * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.
             * @returns {!ByteBuffer} Clone of this ByteBuffer with slicing applied, backed by the same {@link ByteBuffer#buffer}
             * @expose
             */
            ByteBufferPrototype.slice = function(begin, end) {
                if (typeof begin === 'undefined') begin = this.offset;
                if (typeof end === 'undefined') end = this.limit;
                if (!this.noAssert) {
                    if (typeof begin !== 'number' || begin % 1 !== 0)
                        throw TypeError("Illegal begin: Not an integer");
                    begin >>>= 0;
                    if (typeof end !== 'number' || end % 1 !== 0)
                        throw TypeError("Illegal end: Not an integer");
                    end >>>= 0;
                    if (begin < 0 || begin > end || end > this.buffer.byteLength)
                        throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
                }
                var bb = this.clone();
                bb.offset = begin;
                bb.limit = end;
                return bb;
            };
            /**
             * Returns a copy of the backing buffer that contains this ByteBuffer's contents. Contents are the bytes between
             *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}.
             * @param {boolean=} forceCopy If `true` returns a copy, otherwise returns a view referencing the same memory if
             *  possible. Defaults to `false`
             * @returns {!ArrayBuffer} Contents as an ArrayBuffer
             * @expose
             */
            ByteBufferPrototype.toBuffer = function(forceCopy) {
                var offset = this.offset,
                    limit = this.limit;
                if (!this.noAssert) {
                    if (typeof offset !== 'number' || offset % 1 !== 0)
                        throw TypeError("Illegal offset: Not an integer");
                    offset >>>= 0;
                    if (typeof limit !== 'number' || limit % 1 !== 0)
                        throw TypeError("Illegal limit: Not an integer");
                    limit >>>= 0;
                    if (offset < 0 || offset > limit || limit > this.buffer.byteLength)
                        throw RangeError("Illegal range: 0 <= "+offset+" <= "+limit+" <= "+this.buffer.byteLength);
                }
                // NOTE: It's not possible to have another ArrayBuffer reference the same memory as the backing buffer. This is
                // possible with Uint8Array#subarray only, but we have to return an ArrayBuffer by contract. So:
                if (!forceCopy && offset === 0 && limit === this.buffer.byteLength)
                    return this.buffer;
                if (offset === limit)
                    return EMPTY_BUFFER;
                var buffer = new ArrayBuffer(limit - offset);
                new Uint8Array(buffer).set(new Uint8Array(this.buffer).subarray(offset, limit), 0);
                return buffer;
            };

            /**
             * Returns a raw buffer compacted to contain this ByteBuffer's contents. Contents are the bytes between
             *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}. This is an alias of {@link ByteBuffer#toBuffer}.
             * @function
             * @param {boolean=} forceCopy If `true` returns a copy, otherwise returns a view referencing the same memory.
             *  Defaults to `false`
             * @returns {!ArrayBuffer} Contents as an ArrayBuffer
             * @expose
             */
            ByteBufferPrototype.toArrayBuffer = ByteBufferPrototype.toBuffer;

            /**
             * Converts the ByteBuffer's contents to a string.
             * @param {string=} encoding Output encoding. Returns an informative string representation if omitted but also allows
             *  direct conversion to "utf8", "hex", "base64" and "binary" encoding. "debug" returns a hex representation with
             *  highlighted offsets.
             * @param {number=} begin Offset to begin at, defaults to {@link ByteBuffer#offset}
             * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}
             * @returns {string} String representation
             * @throws {Error} If `encoding` is invalid
             * @expose
             */
            ByteBufferPrototype.toString = function(encoding, begin, end) {
                if (typeof encoding === 'undefined')
                    return "ByteBufferAB(offset="+this.offset+",markedOffset="+this.markedOffset+",limit="+this.limit+",capacity="+this.capacity()+")";
                if (typeof encoding === 'number')
                    encoding = "utf8",
                        begin = encoding,
                        end = begin;
                switch (encoding) {
                    case "utf8":
                        return this.toUTF8(begin, end);
                    case "base64":
                        return this.toBase64(begin, end);
                    case "hex":
                        return this.toHex(begin, end);
                    case "binary":
                        return this.toBinary(begin, end);
                    case "debug":
                        return this.toDebug();
                    case "columns":
                        return this.toColumns();
                    default:
                        throw Error("Unsupported encoding: "+encoding);
                }
            };

            // lxiv-embeddable

            /**
             * lxiv-embeddable (c) 2014 Daniel Wirtz <dcode@dcode.io>
             * Released under the Apache License, Version 2.0
             * see: https://github.com/dcodeIO/lxiv for details
             */
            var lxiv = function() {
                "use strict";

                /**
                 * lxiv namespace.
                 * @type {!Object.<string,*>}
                 * @exports lxiv
                 */
                var lxiv = {};

                /**
                 * Character codes for output.
                 * @type {!Array.<number>}
                 * @inner
                 */
                var aout = [
                    65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
                    81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102,
                    103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
                    119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47
                ];

                /**
                 * Character codes for input.
                 * @type {!Array.<number>}
                 * @inner
                 */
                var ain = [];
                for (var i=0, k=aout.length; i<k; ++i)
                    ain[aout[i]] = i;

                /**
                 * Encodes bytes to base64 char codes.
                 * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if
                 *  there are no more bytes left.
                 * @param {!function(number)} dst Characters destination as a function successively called with each encoded char
                 *  code.
                 */
                lxiv.encode = function(src, dst) {
                    var b, t;
                    while ((b = src()) !== null) {
                        dst(aout[(b>>2)&0x3f]);
                        t = (b&0x3)<<4;
                        if ((b = src()) !== null) {
                            t |= (b>>4)&0xf;
                            dst(aout[(t|((b>>4)&0xf))&0x3f]);
                            t = (b&0xf)<<2;
                            if ((b = src()) !== null)
                                dst(aout[(t|((b>>6)&0x3))&0x3f]),
                                    dst(aout[b&0x3f]);
                            else
                                dst(aout[t&0x3f]),
                                    dst(61);
                        } else
                            dst(aout[t&0x3f]),
                                dst(61),
                                dst(61);
                    }
                };

                /**
                 * Decodes base64 char codes to bytes.
                 * @param {!function():number|null} src Characters source as a function returning the next char code respectively
                 *  `null` if there are no more characters left.
                 * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.
                 * @throws {Error} If a character code is invalid
                 */
                lxiv.decode = function(src, dst) {
                    var c, t1, t2;
                    function fail(c) {
                        throw Error("Illegal character code: "+c);
                    }
                    while ((c = src()) !== null) {
                        t1 = ain[c];
                        if (typeof t1 === 'undefined') fail(c);
                        if ((c = src()) !== null) {
                            t2 = ain[c];
                            if (typeof t2 === 'undefined') fail(c);
                            dst((t1<<2)>>>0|(t2&0x30)>>4);
                            if ((c = src()) !== null) {
                                t1 = ain[c];
                                if (typeof t1 === 'undefined')
                                    if (c === 61) break; else fail(c);
                                dst(((t2&0xf)<<4)>>>0|(t1&0x3c)>>2);
                                if ((c = src()) !== null) {
                                    t2 = ain[c];
                                    if (typeof t2 === 'undefined')
                                        if (c === 61) break; else fail(c);
                                    dst(((t1&0x3)<<6)>>>0|t2);
                                }
                            }
                        }
                    }
                };

                /**
                 * Tests if a string is valid base64.
                 * @param {string} str String to test
                 * @returns {boolean} `true` if valid, otherwise `false`
                 */
                lxiv.test = function(str) {
                    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(str);
                };

                return lxiv;
            }();

            // encodings/base64

            /**
             * Encodes this ByteBuffer's contents to a base64 encoded string.
             * @param {number=} begin Offset to begin at, defaults to {@link ByteBuffer#offset}.
             * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}.
             * @returns {string} Base64 encoded string
             * @throws {RangeError} If `begin` or `end` is out of bounds
             * @expose
             */
            ByteBufferPrototype.toBase64 = function(begin, end) {
                if (typeof begin === 'undefined')
                    begin = this.offset;
                if (typeof end === 'undefined')
                    end = this.limit;
                begin = begin | 0; end = end | 0;
                if (begin < 0 || end > this.capacity || begin > end)
                    throw RangeError("begin, end");
                var sd; lxiv.encode(function() {
                    return begin < end ? this.view[begin++] : null;
                }.bind(this), sd = stringDestination());
                return sd();
            };

            /**
             * Decodes a base64 encoded string to a ByteBuffer.
             * @param {string} str String to decode
             * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
             *  {@link ByteBuffer.DEFAULT_ENDIAN}.
             * @returns {!ByteBuffer} ByteBuffer
             * @expose
             */
            ByteBuffer.fromBase64 = function(str, littleEndian) {
                if (typeof str !== 'string')
                    throw TypeError("str");
                var bb = new ByteBuffer(str.length/4*3, littleEndian),
                    i = 0;
                lxiv.decode(stringSource(str), function(b) {
                    bb.view[i++] = b;
                });
                bb.limit = i;
                return bb;
            };

            /**
             * Encodes a binary string to base64 like `window.btoa` does.
             * @param {string} str Binary string
             * @returns {string} Base64 encoded string
             * @see https://developer.mozilla.org/en-US/docs/Web/API/Window.btoa
             * @expose
             */
            ByteBuffer.btoa = function(str) {
                return ByteBuffer.fromBinary(str).toBase64();
            };

            /**
             * Decodes a base64 encoded string to binary like `window.atob` does.
             * @param {string} b64 Base64 encoded string
             * @returns {string} Binary string
             * @see https://developer.mozilla.org/en-US/docs/Web/API/Window.atob
             * @expose
             */
            ByteBuffer.atob = function(b64) {
                return ByteBuffer.fromBase64(b64).toBinary();
            };

            // encodings/binary

            /**
             * Encodes this ByteBuffer to a binary encoded string, that is using only characters 0x00-0xFF as bytes.
             * @param {number=} begin Offset to begin at. Defaults to {@link ByteBuffer#offset}.
             * @param {number=} end Offset to end at. Defaults to {@link ByteBuffer#limit}.
             * @returns {string} Binary encoded string
             * @throws {RangeError} If `offset > limit`
             * @expose
             */
            ByteBufferPrototype.toBinary = function(begin, end) {
                if (typeof begin === 'undefined')
                    begin = this.offset;
                if (typeof end === 'undefined')
                    end = this.limit;
                begin |= 0; end |= 0;
                if (begin < 0 || end > this.capacity() || begin > end)
                    throw RangeError("begin, end");
                if (begin === end)
                    return "";
                var chars = [],
                    parts = [];
                while (begin < end) {
                    chars.push(this.view[begin++]);
                    if (chars.length >= 1024)
                        parts.push(String.fromCharCode.apply(String, chars)),
                            chars = [];
                }
                return parts.join('') + String.fromCharCode.apply(String, chars);
            };

            /**
             * Decodes a binary encoded string, that is using only characters 0x00-0xFF as bytes, to a ByteBuffer.
             * @param {string} str String to decode
             * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
             *  {@link ByteBuffer.DEFAULT_ENDIAN}.
             * @returns {!ByteBuffer} ByteBuffer
             * @expose
             */
            ByteBuffer.fromBinary = function(str, littleEndian) {
                if (typeof str !== 'string')
                    throw TypeError("str");
                var i = 0,
                    k = str.length,
                    charCode,
                    bb = new ByteBuffer(k, littleEndian);
                while (i<k) {
                    charCode = str.charCodeAt(i);
                    if (charCode > 0xff)
                        throw RangeError("illegal char code: "+charCode);
                    bb.view[i++] = charCode;
                }
                bb.limit = k;
                return bb;
            };

            // encodings/debug

            /**
             * Encodes this ByteBuffer to a hex encoded string with marked offsets. Offset symbols are:
             * * `<` : offset,
             * * `'` : markedOffset,
             * * `>` : limit,
             * * `|` : offset and limit,
             * * `[` : offset and markedOffset,
             * * `]` : markedOffset and limit,
             * * `!` : offset, markedOffset and limit
             * @param {boolean=} columns If `true` returns two columns hex + ascii, defaults to `false`
             * @returns {string|!Array.<string>} Debug string or array of lines if `asArray = true`
             * @expose
             * @example `>00'01 02<03` contains four bytes with `limit=0, markedOffset=1, offset=3`
             * @example `00[01 02 03>` contains four bytes with `offset=markedOffset=1, limit=4`
             * @example `00|01 02 03` contains four bytes with `offset=limit=1, markedOffset=-1`
             * @example `|` contains zero bytes with `offset=limit=0, markedOffset=-1`
             */
            ByteBufferPrototype.toDebug = function(columns) {
                var i = -1,
                    k = this.buffer.byteLength,
                    b,
                    hex = "",
                    asc = "",
                    out = "";
                while (i<k) {
                    if (i !== -1) {
                        b = this.view[i];
                        if (b < 0x10) hex += "0"+b.toString(16).toUpperCase();
                        else hex += b.toString(16).toUpperCase();
                        if (columns)
                            asc += b > 32 && b < 127 ? String.fromCharCode(b) : '.';
                    }
                    ++i;
                    if (columns) {
                        if (i > 0 && i % 16 === 0 && i !== k) {
                            while (hex.length < 3*16+3) hex += " ";
                            out += hex+asc+"\n";
                            hex = asc = "";
                        }
                    }
                    if (i === this.offset && i === this.limit)
                        hex += i === this.markedOffset ? "!" : "|";
                    else if (i === this.offset)
                        hex += i === this.markedOffset ? "[" : "<";
                    else if (i === this.limit)
                        hex += i === this.markedOffset ? "]" : ">";
                    else
                        hex += i === this.markedOffset ? "'" : (columns || (i !== 0 && i !== k) ? " " : "");
                }
                if (columns && hex !== " ") {
                    while (hex.length < 3*16+3)
                        hex += " ";
                    out += hex + asc + "\n";
                }
                return columns ? out : hex;
            };

            /**
             * Decodes a hex encoded string with marked offsets to a ByteBuffer.
             * @param {string} str Debug string to decode (not be generated with `columns = true`)
             * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
             *  {@link ByteBuffer.DEFAULT_ENDIAN}.
             * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
             *  {@link ByteBuffer.DEFAULT_NOASSERT}.
             * @returns {!ByteBuffer} ByteBuffer
             * @expose
             * @see ByteBuffer#toDebug
             */
            ByteBuffer.fromDebug = function(str, littleEndian, noAssert) {
                var k = str.length,
                    bb = new ByteBuffer(((k+1)/3)|0, littleEndian, noAssert);
                var i = 0, j = 0, ch, b,
                    rs = false, // Require symbol next
                    ho = false, hm = false, hl = false, // Already has offset (ho), markedOffset (hm), limit (hl)?
                    fail = false;
                while (i<k) {
                    switch (ch = str.charAt(i++)) {
                        case '!':
                            if (!noAssert) {
                                if (ho || hm || hl) {
                                    fail = true;
                                    break;
                                }
                                ho = hm = hl = true;
                            }
                            bb.offset = bb.markedOffset = bb.limit = j;
                            rs = false;
                            break;
                        case '|':
                            if (!noAssert) {
                                if (ho || hl) {
                                    fail = true;
                                    break;
                                }
                                ho = hl = true;
                            }
                            bb.offset = bb.limit = j;
                            rs = false;
                            break;
                        case '[':
                            if (!noAssert) {
                                if (ho || hm) {
                                    fail = true;
                                    break;
                                }
                                ho = hm = true;
                            }
                            bb.offset = bb.markedOffset = j;
                            rs = false;
                            break;
                        case '<':
                            if (!noAssert) {
                                if (ho) {
                                    fail = true;
                                    break;
                                }
                                ho = true;
                            }
                            bb.offset = j;
                            rs = false;
                            break;
                        case ']':
                            if (!noAssert) {
                                if (hl || hm) {
                                    fail = true;
                                    break;
                                }
                                hl = hm = true;
                            }
                            bb.limit = bb.markedOffset = j;
                            rs = false;
                            break;
                        case '>':
                            if (!noAssert) {
                                if (hl) {
                                    fail = true;
                                    break;
                                }
                                hl = true;
                            }
                            bb.limit = j;
                            rs = false;
                            break;
                        case "'":
                            if (!noAssert) {
                                if (hm) {
                                    fail = true;
                                    break;
                                }
                                hm = true;
                            }
                            bb.markedOffset = j;
                            rs = false;
                            break;
                        case ' ':
                            rs = false;
                            break;
                        default:
                            if (!noAssert) {
                                if (rs) {
                                    fail = true;
                                    break;
                                }
                            }
                            b = parseInt(ch+str.charAt(i++), 16);
                            if (!noAssert) {
                                if (isNaN(b) || b < 0 || b > 255)
                                    throw TypeError("Illegal str: Not a debug encoded string");
                            }
                            bb.view[j++] = b;
                            rs = true;
                    }
                    if (fail)
                        throw TypeError("Illegal str: Invalid symbol at "+i);
                }
                if (!noAssert) {
                    if (!ho || !hl)
                        throw TypeError("Illegal str: Missing offset or limit");
                    if (j<bb.buffer.byteLength)
                        throw TypeError("Illegal str: Not a debug encoded string (is it hex?) "+j+" < "+k);
                }
                return bb;
            };

            // encodings/hex

            /**
             * Encodes this ByteBuffer's contents to a hex encoded string.
             * @param {number=} begin Offset to begin at. Defaults to {@link ByteBuffer#offset}.
             * @param {number=} end Offset to end at. Defaults to {@link ByteBuffer#limit}.
             * @returns {string} Hex encoded string
             * @expose
             */
            ByteBufferPrototype.toHex = function(begin, end) {
                begin = typeof begin === 'undefined' ? this.offset : begin;
                end = typeof end === 'undefined' ? this.limit : end;
                if (!this.noAssert) {
                    if (typeof begin !== 'number' || begin % 1 !== 0)
                        throw TypeError("Illegal begin: Not an integer");
                    begin >>>= 0;
                    if (typeof end !== 'number' || end % 1 !== 0)
                        throw TypeError("Illegal end: Not an integer");
                    end >>>= 0;
                    if (begin < 0 || begin > end || end > this.buffer.byteLength)
                        throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
                }
                var out = new Array(end - begin),
                    b;
                while (begin < end) {
                    b = this.view[begin++];
                    if (b < 0x10)
                        out.push("0", b.toString(16));
                    else out.push(b.toString(16));
                }
                return out.join('');
            };

            /**
             * Decodes a hex encoded string to a ByteBuffer.
             * @param {string} str String to decode
             * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
             *  {@link ByteBuffer.DEFAULT_ENDIAN}.
             * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
             *  {@link ByteBuffer.DEFAULT_NOASSERT}.
             * @returns {!ByteBuffer} ByteBuffer
             * @expose
             */
            ByteBuffer.fromHex = function(str, littleEndian, noAssert) {
                if (!noAssert) {
                    if (typeof str !== 'string')
                        throw TypeError("Illegal str: Not a string");
                    if (str.length % 2 !== 0)
                        throw TypeError("Illegal str: Length not a multiple of 2");
                }
                var k = str.length,
                    bb = new ByteBuffer((k / 2) | 0, littleEndian),
                    b;
                for (var i=0, j=0; i<k; i+=2) {
                    b = parseInt(str.substring(i, i+2), 16);
                    if (!noAssert)
                        if (!isFinite(b) || b < 0 || b > 255)
                            throw TypeError("Illegal str: Contains non-hex characters");
                    bb.view[j++] = b;
                }
                bb.limit = j;
                return bb;
            };

            // utfx-embeddable

            /**
             * utfx-embeddable (c) 2014 Daniel Wirtz <dcode@dcode.io>
             * Released under the Apache License, Version 2.0
             * see: https://github.com/dcodeIO/utfx for details
             */
            var utfx = function() {
                "use strict";

                /**
                 * utfx namespace.
                 * @inner
                 * @type {!Object.<string,*>}
                 */
                var utfx = {};

                /**
                 * Maximum valid code point.
                 * @type {number}
                 * @const
                 */
                utfx.MAX_CODEPOINT = 0x10FFFF;

                /**
                 * Encodes UTF8 code points to UTF8 bytes.
                 * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point
                 *  respectively `null` if there are no more code points left or a single numeric code point.
                 * @param {!function(number)} dst Bytes destination as a function successively called with the next byte
                 */
                utfx.encodeUTF8 = function(src, dst) {
                    var cp = null;
                    if (typeof src === 'number')
                        cp = src,
                            src = function() { return null; };
                    while (cp !== null || (cp = src()) !== null) {
                        if (cp < 0x80)
                            dst(cp&0x7F);
                        else if (cp < 0x800)
                            dst(((cp>>6)&0x1F)|0xC0),
                                dst((cp&0x3F)|0x80);
                        else if (cp < 0x10000)
                            dst(((cp>>12)&0x0F)|0xE0),
                                dst(((cp>>6)&0x3F)|0x80),
                                dst((cp&0x3F)|0x80);
                        else
                            dst(((cp>>18)&0x07)|0xF0),
                                dst(((cp>>12)&0x3F)|0x80),
                                dst(((cp>>6)&0x3F)|0x80),
                                dst((cp&0x3F)|0x80);
                        cp = null;
                    }
                };

                /**
                 * Decodes UTF8 bytes to UTF8 code points.
                 * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there
                 *  are no more bytes left.
                 * @param {!function(number)} dst Code points destination as a function successively called with each decoded code point.
                 * @throws {RangeError} If a starting byte is invalid in UTF8
                 * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the
                 *  remaining bytes.
                 */
                utfx.decodeUTF8 = function(src, dst) {
                    var a, b, c, d, fail = function(b) {
                        b = b.slice(0, b.indexOf(null));
                        var err = Error(b.toString());
                        err.name = "TruncatedError";
                        err['bytes'] = b;
                        throw err;
                    };
                    while ((a = src()) !== null) {
                        if ((a&0x80) === 0)
                            dst(a);
                        else if ((a&0xE0) === 0xC0)
                            ((b = src()) === null) && fail([a, b]),
                                dst(((a&0x1F)<<6) | (b&0x3F));
                        else if ((a&0xF0) === 0xE0)
                            ((b=src()) === null || (c=src()) === null) && fail([a, b, c]),
                                dst(((a&0x0F)<<12) | ((b&0x3F)<<6) | (c&0x3F));
                        else if ((a&0xF8) === 0xF0)
                            ((b=src()) === null || (c=src()) === null || (d=src()) === null) && fail([a, b, c ,d]),
                                dst(((a&0x07)<<18) | ((b&0x3F)<<12) | ((c&0x3F)<<6) | (d&0x3F));
                        else throw RangeError("Illegal starting byte: "+a);
                    }
                };

                /**
                 * Converts UTF16 characters to UTF8 code points.
                 * @param {!function():number|null} src Characters source as a function returning the next char code respectively
                 *  `null` if there are no more characters left.
                 * @param {!function(number)} dst Code points destination as a function successively called with each converted code
                 *  point.
                 */
                utfx.UTF16toUTF8 = function(src, dst) {
                    var c1, c2 = null;
                    while (true) {
                        if ((c1 = c2 !== null ? c2 : src()) === null)
                            break;
                        if (c1 >= 0xD800 && c1 <= 0xDFFF) {
                            if ((c2 = src()) !== null) {
                                if (c2 >= 0xDC00 && c2 <= 0xDFFF) {
                                    dst((c1-0xD800)*0x400+c2-0xDC00+0x10000);
                                    c2 = null; continue;
                                }
                            }
                        }
                        dst(c1);
                    }
                    if (c2 !== null) dst(c2);
                };

                /**
                 * Converts UTF8 code points to UTF16 characters.
                 * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point
                 *  respectively `null` if there are no more code points left or a single numeric code point.
                 * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.
                 * @throws {RangeError} If a code point is out of range
                 */
                utfx.UTF8toUTF16 = function(src, dst) {
                    var cp = null;
                    if (typeof src === 'number')
                        cp = src, src = function() { return null; };
                    while (cp !== null || (cp = src()) !== null) {
                        if (cp <= 0xFFFF)
                            dst(cp);
                        else
                            cp -= 0x10000,
                                dst((cp>>10)+0xD800),
                                dst((cp%0x400)+0xDC00);
                        cp = null;
                    }
                };

                /**
                 * Converts and encodes UTF16 characters to UTF8 bytes.
                 * @param {!function():number|null} src Characters source as a function returning the next char code respectively `null`
                 *  if there are no more characters left.
                 * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.
                 */
                utfx.encodeUTF16toUTF8 = function(src, dst) {
                    utfx.UTF16toUTF8(src, function(cp) {
                        utfx.encodeUTF8(cp, dst);
                    });
                };

                /**
                 * Decodes and converts UTF8 bytes to UTF16 characters.
                 * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there
                 *  are no more bytes left.
                 * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.
                 * @throws {RangeError} If a starting byte is invalid in UTF8
                 * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the remaining bytes.
                 */
                utfx.decodeUTF8toUTF16 = function(src, dst) {
                    utfx.decodeUTF8(src, function(cp) {
                        utfx.UTF8toUTF16(cp, dst);
                    });
                };

                /**
                 * Calculates the byte length of an UTF8 code point.
                 * @param {number} cp UTF8 code point
                 * @returns {number} Byte length
                 */
                utfx.calculateCodePoint = function(cp) {
                    return (cp < 0x80) ? 1 : (cp < 0x800) ? 2 : (cp < 0x10000) ? 3 : 4;
                };

                /**
                 * Calculates the number of UTF8 bytes required to store UTF8 code points.
                 * @param {(!function():number|null)} src Code points source as a function returning the next code point respectively
                 *  `null` if there are no more code points left.
                 * @returns {number} The number of UTF8 bytes required
                 */
                utfx.calculateUTF8 = function(src) {
                    var cp, l=0;
                    while ((cp = src()) !== null)
                        l += (cp < 0x80) ? 1 : (cp < 0x800) ? 2 : (cp < 0x10000) ? 3 : 4;
                    return l;
                };

                /**
                 * Calculates the number of UTF8 code points respectively UTF8 bytes required to store UTF16 char codes.
                 * @param {(!function():number|null)} src Characters source as a function returning the next char code respectively
                 *  `null` if there are no more characters left.
                 * @returns {!Array.<number>} The number of UTF8 code points at index 0 and the number of UTF8 bytes required at index 1.
                 */
                utfx.calculateUTF16asUTF8 = function(src) {
                    var n=0, l=0;
                    utfx.UTF16toUTF8(src, function(cp) {
                        ++n; l += (cp < 0x80) ? 1 : (cp < 0x800) ? 2 : (cp < 0x10000) ? 3 : 4;
                    });
                    return [n,l];
                };

                return utfx;
            }();

            // encodings/utf8

            /**
             * Encodes this ByteBuffer's contents between {@link ByteBuffer#offset} and {@link ByteBuffer#limit} to an UTF8 encoded
             *  string.
             * @returns {string} Hex encoded string
             * @throws {RangeError} If `offset > limit`
             * @expose
             */
            ByteBufferPrototype.toUTF8 = function(begin, end) {
                if (typeof begin === 'undefined') begin = this.offset;
                if (typeof end === 'undefined') end = this.limit;
                if (!this.noAssert) {
                    if (typeof begin !== 'number' || begin % 1 !== 0)
                        throw TypeError("Illegal begin: Not an integer");
                    begin >>>= 0;
                    if (typeof end !== 'number' || end % 1 !== 0)
                        throw TypeError("Illegal end: Not an integer");
                    end >>>= 0;
                    if (begin < 0 || begin > end || end > this.buffer.byteLength)
                        throw RangeError("Illegal range: 0 <= "+begin+" <= "+end+" <= "+this.buffer.byteLength);
                }
                var sd; try {
                    utfx.decodeUTF8toUTF16(function() {
                        return begin < end ? this.view[begin++] : null;
                    }.bind(this), sd = stringDestination());
                } catch (e) {
                    if (begin !== end)
                        throw RangeError("Illegal range: Truncated data, "+begin+" != "+end);
                }
                return sd();
            };

            /**
             * Decodes an UTF8 encoded string to a ByteBuffer.
             * @param {string} str String to decode
             * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
             *  {@link ByteBuffer.DEFAULT_ENDIAN}.
             * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
             *  {@link ByteBuffer.DEFAULT_NOASSERT}.
             * @returns {!ByteBuffer} ByteBuffer
             * @expose
             */
            ByteBuffer.fromUTF8 = function(str, littleEndian, noAssert) {
                if (!noAssert)
                    if (typeof str !== 'string')
                        throw TypeError("Illegal str: Not a string");
                var bb = new ByteBuffer(utfx.calculateUTF16asUTF8(stringSource(str), true)[1], littleEndian, noAssert),
                    i = 0;
                utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
                    bb.view[i++] = b;
                });
                bb.limit = i;
                return bb;
            };

            return ByteBuffer;
        });

    },{"long":"/bytetrade-js/node_modules/long/dist/long.js"}],"/bytetrade-js/node_modules/cipher-base/index.js":[function(require,module,exports){
        var Buffer = require('safe-buffer').Buffer
        var Transform = require('stream').Transform
        var StringDecoder = require('string_decoder').StringDecoder
        var inherits = require('inherits')

        function CipherBase (hashMode) {
            Transform.call(this)
            this.hashMode = typeof hashMode === 'string'
            if (this.hashMode) {
                this[hashMode] = this._finalOrDigest
            } else {
                this.final = this._finalOrDigest
            }
            if (this._final) {
                this.__final = this._final
                this._final = null
            }
            this._decoder = null
            this._encoding = null
        }
        inherits(CipherBase, Transform)

        CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
            if (typeof data === 'string') {
                data = Buffer.from(data, inputEnc)
            }

            var outData = this._update(data)
            if (this.hashMode) return this

            if (outputEnc) {
                outData = this._toString(outData, outputEnc)
            }

            return outData
        }

        CipherBase.prototype.setAutoPadding = function () {}
        CipherBase.prototype.getAuthTag = function () {
            throw new Error('trying to get auth tag in unsupported state')
        }

        CipherBase.prototype.setAuthTag = function () {
            throw new Error('trying to set auth tag in unsupported state')
        }

        CipherBase.prototype.setAAD = function () {
            throw new Error('trying to set aad in unsupported state')
        }

        CipherBase.prototype._transform = function (data, _, next) {
            var err
            try {
                if (this.hashMode) {
                    this._update(data)
                } else {
                    this.push(this._update(data))
                }
            } catch (e) {
                err = e
            } finally {
                next(err)
            }
        }
        CipherBase.prototype._flush = function (done) {
            var err
            try {
                this.push(this.__final())
            } catch (e) {
                err = e
            }

            done(err)
        }
        CipherBase.prototype._finalOrDigest = function (outputEnc) {
            var outData = this.__final() || Buffer.alloc(0)
            if (outputEnc) {
                outData = this._toString(outData, outputEnc, true)
            }
            return outData
        }

        CipherBase.prototype._toString = function (value, enc, fin) {
            if (!this._decoder) {
                this._decoder = new StringDecoder(enc)
                this._encoding = enc
            }

            if (this._encoding !== enc) throw new Error('can\'t switch encodings')

            var out = this._decoder.write(value)
            if (fin) {
                out += this._decoder.end()
            }

            return out
        }

        module.exports = CipherBase

    },{"inherits":"/bytetrade-js/node_modules/inherits/inherits_browser.js","safe-buffer":"/bytetrade-js/node_modules/safe-buffer/index.js","stream":"/bytetrade-js/node_modules/stream-browserify/index.js","string_decoder":"/bytetrade-js/node_modules/browserify/node_modules/string_decoder/index.js"}],"/bytetrade-js/node_modules/core-util-is/lib/util.js":[function(require,module,exports){
        (function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

            function isArray(arg) {
                if (Array.isArray) {
                    return Array.isArray(arg);
                }
                return objectToString(arg) === '[object Array]';
            }
            exports.isArray = isArray;

            function isBoolean(arg) {
                return typeof arg === 'boolean';
            }
            exports.isBoolean = isBoolean;

            function isNull(arg) {
                return arg === null;
            }
            exports.isNull = isNull;

            function isNullOrUndefined(arg) {
                return arg == null;
            }
            exports.isNullOrUndefined = isNullOrUndefined;

            function isNumber(arg) {
                return typeof arg === 'number';
            }
            exports.isNumber = isNumber;

            function isString(arg) {
                return typeof arg === 'string';
            }
            exports.isString = isString;

            function isSymbol(arg) {
                return typeof arg === 'symbol';
            }
            exports.isSymbol = isSymbol;

            function isUndefined(arg) {
                return arg === void 0;
            }
            exports.isUndefined = isUndefined;

            function isRegExp(re) {
                return objectToString(re) === '[object RegExp]';
            }
            exports.isRegExp = isRegExp;

            function isObject(arg) {
                return typeof arg === 'object' && arg !== null;
            }
            exports.isObject = isObject;

            function isDate(d) {
                return objectToString(d) === '[object Date]';
            }
            exports.isDate = isDate;

            function isError(e) {
                return (objectToString(e) === '[object Error]' || e instanceof Error);
            }
            exports.isError = isError;

            function isFunction(arg) {
                return typeof arg === 'function';
            }
            exports.isFunction = isFunction;

            function isPrimitive(arg) {
                return arg === null ||
                    typeof arg === 'boolean' ||
                    typeof arg === 'number' ||
                    typeof arg === 'string' ||
                    typeof arg === 'symbol' ||  // ES6 symbol
                    typeof arg === 'undefined';
            }
            exports.isPrimitive = isPrimitive;

            exports.isBuffer = Buffer.isBuffer;

            function objectToString(o) {
                return Object.prototype.toString.call(o);
            }

        }).call(this,{"isBuffer":require("../../is-buffer/index.js")})

    },{"../../is-buffer/index.js":"/bytetrade-js/node_modules/is-buffer/index.js"}],"/bytetrade-js/node_modules/create-hash/browser.js":[function(require,module,exports){
        'use strict'
        var inherits = require('inherits')
        var MD5 = require('md5.js')
        var RIPEMD160 = require('ripemd160')
        var sha = require('sha.js')
        var Base = require('cipher-base')

        function Hash (hash) {
            Base.call(this, 'digest')

            this._hash = hash
        }

        inherits(Hash, Base)

        Hash.prototype._update = function (data) {
            this._hash.update(data)
        }

        Hash.prototype._final = function () {
            return this._hash.digest()
        }

        module.exports = function createHash (alg) {
            alg = alg.toLowerCase()
            if (alg === 'md5') return new MD5()
            if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

            return new Hash(sha(alg))
        }

    },{"cipher-base":"/bytetrade-js/node_modules/cipher-base/index.js","inherits":"/bytetrade-js/node_modules/inherits/inherits_browser.js","md5.js":"/bytetrade-js/node_modules/md5.js/index.js","ripemd160":"/bytetrade-js/node_modules/ripemd160/index.js","sha.js":"/bytetrade-js/node_modules/sha.js/index.js"}],"/bytetrade-js/node_modules/create-hash/md5.js":[function(require,module,exports){
        var MD5 = require('md5.js')

        module.exports = function (buffer) {
            return new MD5().update(buffer).digest()
        }

    },{"md5.js":"/bytetrade-js/node_modules/md5.js/index.js"}],"/bytetrade-js/node_modules/create-hmac/browser.js":[function(require,module,exports){
        'use strict'
        var inherits = require('inherits')
        var Legacy = require('./legacy')
        var Base = require('cipher-base')
        var Buffer = require('safe-buffer').Buffer
        var md5 = require('create-hash/md5')
        var RIPEMD160 = require('ripemd160')

        var sha = require('sha.js')

        var ZEROS = Buffer.alloc(128)

        function Hmac (alg, key) {
            Base.call(this, 'digest')
            if (typeof key === 'string') {
                key = Buffer.from(key)
            }

            var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

            this._alg = alg
            this._key = key
            if (key.length > blocksize) {
                var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
                key = hash.update(key).digest()
            } else if (key.length < blocksize) {
                key = Buffer.concat([key, ZEROS], blocksize)
            }

            var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
            var opad = this._opad = Buffer.allocUnsafe(blocksize)

            for (var i = 0; i < blocksize; i++) {
                ipad[i] = key[i] ^ 0x36
                opad[i] = key[i] ^ 0x5C
            }
            this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
            this._hash.update(ipad)
        }

        inherits(Hmac, Base)

        Hmac.prototype._update = function (data) {
            this._hash.update(data)
        }

        Hmac.prototype._final = function () {
            var h = this._hash.digest()
            var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
            return hash.update(this._opad).update(h).digest()
        }

        module.exports = function createHmac (alg, key) {
            alg = alg.toLowerCase()
            if (alg === 'rmd160' || alg === 'ripemd160') {
                return new Hmac('rmd160', key)
            }
            if (alg === 'md5') {
                return new Legacy(md5, key)
            }
            return new Hmac(alg, key)
        }

    },{"./legacy":"/bytetrade-js/node_modules/create-hmac/legacy.js","cipher-base":"/bytetrade-js/node_modules/cipher-base/index.js","create-hash/md5":"/bytetrade-js/node_modules/create-hash/md5.js","inherits":"/bytetrade-js/node_modules/inherits/inherits_browser.js","ripemd160":"/bytetrade-js/node_modules/ripemd160/index.js","safe-buffer":"/bytetrade-js/node_modules/safe-buffer/index.js","sha.js":"/bytetrade-js/node_modules/sha.js/index.js"}],"/bytetrade-js/node_modules/create-hmac/legacy.js":[function(require,module,exports){
        'use strict'
        var inherits = require('inherits')
        var Buffer = require('safe-buffer').Buffer

        var Base = require('cipher-base')

        var ZEROS = Buffer.alloc(128)
        var blocksize = 64

        function Hmac (alg, key) {
            Base.call(this, 'digest')
            if (typeof key === 'string') {
                key = Buffer.from(key)
            }

            this._alg = alg
            this._key = key

            if (key.length > blocksize) {
                key = alg(key)
            } else if (key.length < blocksize) {
                key = Buffer.concat([key, ZEROS], blocksize)
            }

            var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
            var opad = this._opad = Buffer.allocUnsafe(blocksize)

            for (var i = 0; i < blocksize; i++) {
                ipad[i] = key[i] ^ 0x36
                opad[i] = key[i] ^ 0x5C
            }

            this._hash = [ipad]
        }

        inherits(Hmac, Base)

        Hmac.prototype._update = function (data) {
            this._hash.push(data)
        }

        Hmac.prototype._final = function () {
            var h = this._alg(Buffer.concat(this._hash))
            return this._alg(Buffer.concat([this._opad, h]))
        }
        module.exports = Hmac

    },{"cipher-base":"/bytetrade-js/node_modules/cipher-base/index.js","inherits":"/bytetrade-js/node_modules/inherits/inherits_browser.js","safe-buffer":"/bytetrade-js/node_modules/safe-buffer/index.js"}],"/bytetrade-js/node_modules/crypto-js/aes.js":[function(require,module,exports){
        ;(function (root, factory, undef) {
            if (typeof exports === "object") {
                // CommonJS
                module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
            }
            else if (typeof define === "function" && define.amd) {
                // AMD
                define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
            }
            else {
                // Global (browser)
                factory(root.CryptoJS);
            }
        }(this, function (CryptoJS) {

            (function () {
                // Shortcuts
                var C = CryptoJS;
                var C_lib = C.lib;
                var BlockCipher = C_lib.BlockCipher;
                var C_algo = C.algo;

                // Lookup tables
                var SBOX = [];
                var INV_SBOX = [];
                var SUB_MIX_0 = [];
                var SUB_MIX_1 = [];
                var SUB_MIX_2 = [];
                var SUB_MIX_3 = [];
                var INV_SUB_MIX_0 = [];
                var INV_SUB_MIX_1 = [];
                var INV_SUB_MIX_2 = [];
                var INV_SUB_MIX_3 = [];

                // Compute lookup tables
                (function () {
                    // Compute double table
                    var d = [];
                    for (var i = 0; i < 256; i++) {
                        if (i < 128) {
                            d[i] = i << 1;
                        } else {
                            d[i] = (i << 1) ^ 0x11b;
                        }
                    }

                    // Walk GF(2^8)
                    var x = 0;
                    var xi = 0;
                    for (var i = 0; i < 256; i++) {
                        // Compute sbox
                        var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
                        sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
                        SBOX[x] = sx;
                        INV_SBOX[sx] = x;

                        // Compute multiplication
                        var x2 = d[x];
                        var x4 = d[x2];
                        var x8 = d[x4];

                        // Compute sub bytes, mix columns tables
                        var t = (d[sx] * 0x101) ^ (sx * 0x1010100);
                        SUB_MIX_0[x] = (t << 24) | (t >>> 8);
                        SUB_MIX_1[x] = (t << 16) | (t >>> 16);
                        SUB_MIX_2[x] = (t << 8)  | (t >>> 24);
                        SUB_MIX_3[x] = t;

                        // Compute inv sub bytes, inv mix columns tables
                        var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
                        INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);
                        INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);
                        INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);
                        INV_SUB_MIX_3[sx] = t;

                        // Compute next counter
                        if (!x) {
                            x = xi = 1;
                        } else {
                            x = x2 ^ d[d[d[x8 ^ x2]]];
                            xi ^= d[d[xi]];
                        }
                    }
                }());

                // Precomputed Rcon lookup
                var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

                /**
                 * AES block cipher algorithm.
                 */
                var AES = C_algo.AES = BlockCipher.extend({
                    _doReset: function () {
                        // Skip reset of nRounds has been set before and key did not change
                        if (this._nRounds && this._keyPriorReset === this._key) {
                            return;
                        }

                        // Shortcuts
                        var key = this._keyPriorReset = this._key;
                        var keyWords = key.words;
                        var keySize = key.sigBytes / 4;

                        // Compute number of rounds
                        var nRounds = this._nRounds = keySize + 6;

                        // Compute number of key schedule rows
                        var ksRows = (nRounds + 1) * 4;

                        // Compute key schedule
                        var keySchedule = this._keySchedule = [];
                        for (var ksRow = 0; ksRow < ksRows; ksRow++) {
                            if (ksRow < keySize) {
                                keySchedule[ksRow] = keyWords[ksRow];
                            } else {
                                var t = keySchedule[ksRow - 1];

                                if (!(ksRow % keySize)) {
                                    // Rot word
                                    t = (t << 8) | (t >>> 24);

                                    // Sub word
                                    t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];

                                    // Mix Rcon
                                    t ^= RCON[(ksRow / keySize) | 0] << 24;
                                } else if (keySize > 6 && ksRow % keySize == 4) {
                                    // Sub word
                                    t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
                                }

                                keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
                            }
                        }

                        // Compute inv key schedule
                        var invKeySchedule = this._invKeySchedule = [];
                        for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
                            var ksRow = ksRows - invKsRow;

                            if (invKsRow % 4) {
                                var t = keySchedule[ksRow];
                            } else {
                                var t = keySchedule[ksRow - 4];
                            }

                            if (invKsRow < 4 || ksRow <= 4) {
                                invKeySchedule[invKsRow] = t;
                            } else {
                                invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^
                                    INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
                            }
                        }
                    },

                    encryptBlock: function (M, offset) {
                        this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
                    },

                    decryptBlock: function (M, offset) {
                        // Swap 2nd and 4th rows
                        var t = M[offset + 1];
                        M[offset + 1] = M[offset + 3];
                        M[offset + 3] = t;

                        this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);

                        // Inv swap 2nd and 4th rows
                        var t = M[offset + 1];
                        M[offset + 1] = M[offset + 3];
                        M[offset + 3] = t;
                    },

                    _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
                        // Shortcut
                        var nRounds = this._nRounds;

                        // Get input, add round key
                        var s0 = M[offset]     ^ keySchedule[0];
                        var s1 = M[offset + 1] ^ keySchedule[1];
                        var s2 = M[offset + 2] ^ keySchedule[2];
                        var s3 = M[offset + 3] ^ keySchedule[3];

                        // Key schedule row counter
                        var ksRow = 4;

                        // Rounds
                        for (var round = 1; round < nRounds; round++) {
                            // Shift rows, sub bytes, mix columns, add round key
                            var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
                            var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
                            var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
                            var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];

                            // Update state
                            s0 = t0;
                            s1 = t1;
                            s2 = t2;
                            s3 = t3;
                        }

                        // Shift rows, sub bytes, add round key
                        var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
                        var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
                        var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
                        var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];

                        // Set output
                        M[offset]     = t0;
                        M[offset + 1] = t1;
                        M[offset + 2] = t2;
                        M[offset + 3] = t3;
                    },

                    keySize: 256/32
                });

                /**
                 * Shortcut functions to the cipher's object interface.
                 *
                 * @example
                 *
                 *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
                 *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
                 */
                C.AES = BlockCipher._createHelper(AES);
            }());


            return CryptoJS.AES;

        }));
    },{"./cipher-core":"/bytetrade-js/node_modules/crypto-js/cipher-core.js","./core":"/bytetrade-js/node_modules/crypto-js/core.js","./enc-base64":"/bytetrade-js/node_modules/crypto-js/enc-base64.js","./evpkdf":"/bytetrade-js/node_modules/crypto-js/evpkdf.js","./md5":"/bytetrade-js/node_modules/crypto-js/md5.js"}],"/bytetrade-js/node_modules/crypto-js/cipher-core.js":[function(require,module,exports){
        ;(function (root, factory, undef) {
            if (typeof exports === "object") {
                // CommonJS
                module.exports = exports = factory(require("./core"), require("./evpkdf"));
            }
            else if (typeof define === "function" && define.amd) {
                // AMD
                define(["./core", "./evpkdf"], factory);
            }
            else {
                // Global (browser)
                factory(root.CryptoJS);
            }
        }(this, function (CryptoJS) {

            /**
             * Cipher core components.
             */
            CryptoJS.lib.Cipher || (function (undefined) {
                // Shortcuts
                var C = CryptoJS;
                var C_lib = C.lib;
                var Base = C_lib.Base;
                var WordArray = C_lib.WordArray;
                var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
                var C_enc = C.enc;
                var Utf8 = C_enc.Utf8;
                var Base64 = C_enc.Base64;
                var C_algo = C.algo;
                var EvpKDF = C_algo.EvpKDF;

                /**
                 * Abstract base cipher template.
                 *
                 * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
                 * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
                 * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
                 * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
                 */
                var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
                    /**
                     * Configuration options.
                     *
                     * @property {WordArray} iv The IV to use for this operation.
                     */
                    cfg: Base.extend(),

                    /**
                     * Creates this cipher in encryption mode.
                     *
                     * @param {WordArray} key The key.
                     * @param {Object} cfg (Optional) The configuration options to use for this operation.
                     *
                     * @return {Cipher} A cipher instance.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
                     */
                    createEncryptor: function (key, cfg) {
                        return this.create(this._ENC_XFORM_MODE, key, cfg);
                    },

                    /**
                     * Creates this cipher in decryption mode.
                     *
                     * @param {WordArray} key The key.
                     * @param {Object} cfg (Optional) The configuration options to use for this operation.
                     *
                     * @return {Cipher} A cipher instance.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
                     */
                    createDecryptor: function (key, cfg) {
                        return this.create(this._DEC_XFORM_MODE, key, cfg);
                    },

                    /**
                     * Initializes a newly created cipher.
                     *
                     * @param {number} xformMode Either the encryption or decryption transormation mode constant.
                     * @param {WordArray} key The key.
                     * @param {Object} cfg (Optional) The configuration options to use for this operation.
                     *
                     * @example
                     *
                     *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
                     */
                    init: function (xformMode, key, cfg) {
                        // Apply config defaults
                        this.cfg = this.cfg.extend(cfg);

                        // Store transform mode and key
                        this._xformMode = xformMode;
                        this._key = key;

                        // Set initial values
                        this.reset();
                    },

                    /**
                     * Resets this cipher to its initial state.
                     *
                     * @example
                     *
                     *     cipher.reset();
                     */
                    reset: function () {
                        // Reset data buffer
                        BufferedBlockAlgorithm.reset.call(this);

                        // Perform concrete-cipher logic
                        this._doReset();
                    },

                    /**
                     * Adds data to be encrypted or decrypted.
                     *
                     * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
                     *
                     * @return {WordArray} The data after processing.
                     *
                     * @example
                     *
                     *     var encrypted = cipher.process('data');
                     *     var encrypted = cipher.process(wordArray);
                     */
                    process: function (dataUpdate) {
                        // Append
                        this._append(dataUpdate);

                        // Process available blocks
                        return this._process();
                    },

                    /**
                     * Finalizes the encryption or decryption process.
                     * Note that the finalize operation is effectively a destructive, read-once operation.
                     *
                     * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
                     *
                     * @return {WordArray} The data after final processing.
                     *
                     * @example
                     *
                     *     var encrypted = cipher.finalize();
                     *     var encrypted = cipher.finalize('data');
                     *     var encrypted = cipher.finalize(wordArray);
                     */
                    finalize: function (dataUpdate) {
                        // Final data update
                        if (dataUpdate) {
                            this._append(dataUpdate);
                        }

                        // Perform concrete-cipher logic
                        var finalProcessedData = this._doFinalize();

                        return finalProcessedData;
                    },

                    keySize: 128/32,

                    ivSize: 128/32,

                    _ENC_XFORM_MODE: 1,

                    _DEC_XFORM_MODE: 2,

                    /**
                     * Creates shortcut functions to a cipher's object interface.
                     *
                     * @param {Cipher} cipher The cipher to create a helper for.
                     *
                     * @return {Object} An object with encrypt and decrypt shortcut functions.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
                     */
                    _createHelper: (function () {
                        function selectCipherStrategy(key) {
                            if (typeof key == 'string') {
                                return PasswordBasedCipher;
                            } else {
                                return SerializableCipher;
                            }
                        }

                        return function (cipher) {
                            return {
                                encrypt: function (message, key, cfg) {
                                    return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
                                },

                                decrypt: function (ciphertext, key, cfg) {
                                    return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                                }
                            };
                        };
                    }())
                });

                /**
                 * Abstract base stream cipher template.
                 *
                 * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
                 */
                var StreamCipher = C_lib.StreamCipher = Cipher.extend({
                    _doFinalize: function () {
                        // Process partial blocks
                        var finalProcessedBlocks = this._process(!!'flush');

                        return finalProcessedBlocks;
                    },

                    blockSize: 1
                });

                /**
                 * Mode namespace.
                 */
                var C_mode = C.mode = {};

                /**
                 * Abstract base block cipher mode template.
                 */
                var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
                    /**
                     * Creates this mode for encryption.
                     *
                     * @param {Cipher} cipher A block cipher instance.
                     * @param {Array} iv The IV words.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
                     */
                    createEncryptor: function (cipher, iv) {
                        return this.Encryptor.create(cipher, iv);
                    },

                    /**
                     * Creates this mode for decryption.
                     *
                     * @param {Cipher} cipher A block cipher instance.
                     * @param {Array} iv The IV words.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
                     */
                    createDecryptor: function (cipher, iv) {
                        return this.Decryptor.create(cipher, iv);
                    },

                    /**
                     * Initializes a newly created mode.
                     *
                     * @param {Cipher} cipher A block cipher instance.
                     * @param {Array} iv The IV words.
                     *
                     * @example
                     *
                     *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
                     */
                    init: function (cipher, iv) {
                        this._cipher = cipher;
                        this._iv = iv;
                    }
                });

                /**
                 * Cipher Block Chaining mode.
                 */
                var CBC = C_mode.CBC = (function () {
                    /**
                     * Abstract base CBC mode.
                     */
                    var CBC = BlockCipherMode.extend();

                    /**
                     * CBC encryptor.
                     */
                    CBC.Encryptor = CBC.extend({
                        /**
                         * Processes the data block at offset.
                         *
                         * @param {Array} words The data words to operate on.
                         * @param {number} offset The offset where the block starts.
                         *
                         * @example
                         *
                         *     mode.processBlock(data.words, offset);
                         */
                        processBlock: function (words, offset) {
                            // Shortcuts
                            var cipher = this._cipher;
                            var blockSize = cipher.blockSize;

                            // XOR and encrypt
                            xorBlock.call(this, words, offset, blockSize);
                            cipher.encryptBlock(words, offset);

                            // Remember this block to use with next block
                            this._prevBlock = words.slice(offset, offset + blockSize);
                        }
                    });

                    /**
                     * CBC decryptor.
                     */
                    CBC.Decryptor = CBC.extend({
                        /**
                         * Processes the data block at offset.
                         *
                         * @param {Array} words The data words to operate on.
                         * @param {number} offset The offset where the block starts.
                         *
                         * @example
                         *
                         *     mode.processBlock(data.words, offset);
                         */
                        processBlock: function (words, offset) {
                            // Shortcuts
                            var cipher = this._cipher;
                            var blockSize = cipher.blockSize;

                            // Remember this block to use with next block
                            var thisBlock = words.slice(offset, offset + blockSize);

                            // Decrypt and XOR
                            cipher.decryptBlock(words, offset);
                            xorBlock.call(this, words, offset, blockSize);

                            // This block becomes the previous block
                            this._prevBlock = thisBlock;
                        }
                    });

                    function xorBlock(words, offset, blockSize) {
                        // Shortcut
                        var iv = this._iv;

                        // Choose mixing block
                        if (iv) {
                            var block = iv;

                            // Remove IV for subsequent blocks
                            this._iv = undefined;
                        } else {
                            var block = this._prevBlock;
                        }

                        // XOR blocks
                        for (var i = 0; i < blockSize; i++) {
                            words[offset + i] ^= block[i];
                        }
                    }

                    return CBC;
                }());

                /**
                 * Padding namespace.
                 */
                var C_pad = C.pad = {};

                /**
                 * PKCS #5/7 padding strategy.
                 */
                var Pkcs7 = C_pad.Pkcs7 = {
                    /**
                     * Pads data using the algorithm defined in PKCS #5/7.
                     *
                     * @param {WordArray} data The data to pad.
                     * @param {number} blockSize The multiple that the data should be padded to.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
                     */
                    pad: function (data, blockSize) {
                        // Shortcut
                        var blockSizeBytes = blockSize * 4;

                        // Count padding bytes
                        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

                        // Create padding word
                        var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;

                        // Create padding
                        var paddingWords = [];
                        for (var i = 0; i < nPaddingBytes; i += 4) {
                            paddingWords.push(paddingWord);
                        }
                        var padding = WordArray.create(paddingWords, nPaddingBytes);

                        // Add padding
                        data.concat(padding);
                    },

                    /**
                     * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
                     *
                     * @param {WordArray} data The data to unpad.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     CryptoJS.pad.Pkcs7.unpad(wordArray);
                     */
                    unpad: function (data) {
                        // Get number of padding bytes from last byte
                        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

                        // Remove padding
                        data.sigBytes -= nPaddingBytes;
                    }
                };

                /**
                 * Abstract base block cipher template.
                 *
                 * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
                 */
                var BlockCipher = C_lib.BlockCipher = Cipher.extend({
                    /**
                     * Configuration options.
                     *
                     * @property {Mode} mode The block mode to use. Default: CBC
                     * @property {Padding} padding The padding strategy to use. Default: Pkcs7
                     */
                    cfg: Cipher.cfg.extend({
                        mode: CBC,
                        padding: Pkcs7
                    }),

                    reset: function () {
                        // Reset cipher
                        Cipher.reset.call(this);

                        // Shortcuts
                        var cfg = this.cfg;
                        var iv = cfg.iv;
                        var mode = cfg.mode;

                        // Reset block mode
                        if (this._xformMode == this._ENC_XFORM_MODE) {
                            var modeCreator = mode.createEncryptor;
                        } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
                            var modeCreator = mode.createDecryptor;
                            // Keep at least one block in the buffer for unpadding
                            this._minBufferSize = 1;
                        }

                        if (this._mode && this._mode.__creator == modeCreator) {
                            this._mode.init(this, iv && iv.words);
                        } else {
                            this._mode = modeCreator.call(mode, this, iv && iv.words);
                            this._mode.__creator = modeCreator;
                        }
                    },

                    _doProcessBlock: function (words, offset) {
                        this._mode.processBlock(words, offset);
                    },

                    _doFinalize: function () {
                        // Shortcut
                        var padding = this.cfg.padding;

                        // Finalize
                        if (this._xformMode == this._ENC_XFORM_MODE) {
                            // Pad data
                            padding.pad(this._data, this.blockSize);

                            // Process final blocks
                            var finalProcessedBlocks = this._process(!!'flush');
                        } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
                            // Process final blocks
                            var finalProcessedBlocks = this._process(!!'flush');

                            // Unpad data
                            padding.unpad(finalProcessedBlocks);
                        }

                        return finalProcessedBlocks;
                    },

                    blockSize: 128/32
                });

                /**
                 * A collection of cipher parameters.
                 *
                 * @property {WordArray} ciphertext The raw ciphertext.
                 * @property {WordArray} key The key to this ciphertext.
                 * @property {WordArray} iv The IV used in the ciphering operation.
                 * @property {WordArray} salt The salt used with a key derivation function.
                 * @property {Cipher} algorithm The cipher algorithm.
                 * @property {Mode} mode The block mode used in the ciphering operation.
                 * @property {Padding} padding The padding scheme used in the ciphering operation.
                 * @property {number} blockSize The block size of the cipher.
                 * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
                 */
                var CipherParams = C_lib.CipherParams = Base.extend({
                    /**
                     * Initializes a newly created cipher params object.
                     *
                     * @param {Object} cipherParams An object with any of the possible cipher parameters.
                     *
                     * @example
                     *
                     *     var cipherParams = CryptoJS.lib.CipherParams.create({
                     *         ciphertext: ciphertextWordArray,
                     *         key: keyWordArray,
                     *         iv: ivWordArray,
                     *         salt: saltWordArray,
                     *         algorithm: CryptoJS.algo.AES,
                     *         mode: CryptoJS.mode.CBC,
                     *         padding: CryptoJS.pad.PKCS7,
                     *         blockSize: 4,
                     *         formatter: CryptoJS.format.OpenSSL
                     *     });
                     */
                    init: function (cipherParams) {
                        this.mixIn(cipherParams);
                    },

                    /**
                     * Converts this cipher params object to a string.
                     *
                     * @param {Format} formatter (Optional) The formatting strategy to use.
                     *
                     * @return {string} The stringified cipher params.
                     *
                     * @throws Error If neither the formatter nor the default formatter is set.
                     *
                     * @example
                     *
                     *     var string = cipherParams + '';
                     *     var string = cipherParams.toString();
                     *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
                     */
                    toString: function (formatter) {
                        return (formatter || this.formatter).stringify(this);
                    }
                });

                /**
                 * Format namespace.
                 */
                var C_format = C.format = {};

                /**
                 * OpenSSL formatting strategy.
                 */
                var OpenSSLFormatter = C_format.OpenSSL = {
                    /**
                     * Converts a cipher params object to an OpenSSL-compatible string.
                     *
                     * @param {CipherParams} cipherParams The cipher params object.
                     *
                     * @return {string} The OpenSSL-compatible string.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
                     */
                    stringify: function (cipherParams) {
                        // Shortcuts
                        var ciphertext = cipherParams.ciphertext;
                        var salt = cipherParams.salt;

                        // Format
                        if (salt) {
                            var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
                        } else {
                            var wordArray = ciphertext;
                        }

                        return wordArray.toString(Base64);
                    },

                    /**
                     * Converts an OpenSSL-compatible string to a cipher params object.
                     *
                     * @param {string} openSSLStr The OpenSSL-compatible string.
                     *
                     * @return {CipherParams} The cipher params object.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
                     */
                    parse: function (openSSLStr) {
                        // Parse base64
                        var ciphertext = Base64.parse(openSSLStr);

                        // Shortcut
                        var ciphertextWords = ciphertext.words;

                        // Test for salt
                        if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
                            // Extract salt
                            var salt = WordArray.create(ciphertextWords.slice(2, 4));

                            // Remove salt from ciphertext
                            ciphertextWords.splice(0, 4);
                            ciphertext.sigBytes -= 16;
                        }

                        return CipherParams.create({ ciphertext: ciphertext, salt: salt });
                    }
                };

                /**
                 * A cipher wrapper that returns ciphertext as a serializable cipher params object.
                 */
                var SerializableCipher = C_lib.SerializableCipher = Base.extend({
                    /**
                     * Configuration options.
                     *
                     * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
                     */
                    cfg: Base.extend({
                        format: OpenSSLFormatter
                    }),

                    /**
                     * Encrypts a message.
                     *
                     * @param {Cipher} cipher The cipher algorithm to use.
                     * @param {WordArray|string} message The message to encrypt.
                     * @param {WordArray} key The key.
                     * @param {Object} cfg (Optional) The configuration options to use for this operation.
                     *
                     * @return {CipherParams} A cipher params object.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
                     *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
                     *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
                     */
                    encrypt: function (cipher, message, key, cfg) {
                        // Apply config defaults
                        cfg = this.cfg.extend(cfg);

                        // Encrypt
                        var encryptor = cipher.createEncryptor(key, cfg);
                        var ciphertext = encryptor.finalize(message);

                        // Shortcut
                        var cipherCfg = encryptor.cfg;

                        // Create and return serializable cipher params
                        return CipherParams.create({
                            ciphertext: ciphertext,
                            key: key,
                            iv: cipherCfg.iv,
                            algorithm: cipher,
                            mode: cipherCfg.mode,
                            padding: cipherCfg.padding,
                            blockSize: cipher.blockSize,
                            formatter: cfg.format
                        });
                    },

                    /**
                     * Decrypts serialized ciphertext.
                     *
                     * @param {Cipher} cipher The cipher algorithm to use.
                     * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
                     * @param {WordArray} key The key.
                     * @param {Object} cfg (Optional) The configuration options to use for this operation.
                     *
                     * @return {WordArray} The plaintext.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
                     *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
                     */
                    decrypt: function (cipher, ciphertext, key, cfg) {
                        // Apply config defaults
                        cfg = this.cfg.extend(cfg);

                        // Convert string to CipherParams
                        ciphertext = this._parse(ciphertext, cfg.format);

                        // Decrypt
                        var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);

                        return plaintext;
                    },

                    /**
                     * Converts serialized ciphertext to CipherParams,
                     * else assumed CipherParams already and returns ciphertext unchanged.
                     *
                     * @param {CipherParams|string} ciphertext The ciphertext.
                     * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
                     *
                     * @return {CipherParams} The unserialized ciphertext.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
                     */
                    _parse: function (ciphertext, format) {
                        if (typeof ciphertext == 'string') {
                            return format.parse(ciphertext, this);
                        } else {
                            return ciphertext;
                        }
                    }
                });

                /**
                 * Key derivation function namespace.
                 */
                var C_kdf = C.kdf = {};

                /**
                 * OpenSSL key derivation function.
                 */
                var OpenSSLKdf = C_kdf.OpenSSL = {
                    /**
                     * Derives a key and IV from a password.
                     *
                     * @param {string} password The password to derive from.
                     * @param {number} keySize The size in words of the key to generate.
                     * @param {number} ivSize The size in words of the IV to generate.
                     * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
                     *
                     * @return {CipherParams} A cipher params object with the key, IV, and salt.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
                     *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
                     */
                    execute: function (password, keySize, ivSize, salt) {
                        // Generate random salt
                        if (!salt) {
                            salt = WordArray.random(64/8);
                        }

                        // Derive key and IV
                        var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);

                        // Separate key and IV
                        var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
                        key.sigBytes = keySize * 4;

                        // Return params
                        return CipherParams.create({ key: key, iv: iv, salt: salt });
                    }
                };

                /**
                 * A serializable cipher wrapper that derives the key from a password,
                 * and returns ciphertext as a serializable cipher params object.
                 */
                var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
                    /**
                     * Configuration options.
                     *
                     * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
                     */
                    cfg: SerializableCipher.cfg.extend({
                        kdf: OpenSSLKdf
                    }),

                    /**
                     * Encrypts a message using a password.
                     *
                     * @param {Cipher} cipher The cipher algorithm to use.
                     * @param {WordArray|string} message The message to encrypt.
                     * @param {string} password The password.
                     * @param {Object} cfg (Optional) The configuration options to use for this operation.
                     *
                     * @return {CipherParams} A cipher params object.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
                     *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
                     */
                    encrypt: function (cipher, message, password, cfg) {
                        // Apply config defaults
                        cfg = this.cfg.extend(cfg);

                        // Derive key and other params
                        var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);

                        // Add IV to config
                        cfg.iv = derivedParams.iv;

                        // Encrypt
                        var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);

                        // Mix in derived params
                        ciphertext.mixIn(derivedParams);

                        return ciphertext;
                    },

                    /**
                     * Decrypts serialized ciphertext using a password.
                     *
                     * @param {Cipher} cipher The cipher algorithm to use.
                     * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
                     * @param {string} password The password.
                     * @param {Object} cfg (Optional) The configuration options to use for this operation.
                     *
                     * @return {WordArray} The plaintext.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
                     *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
                     */
                    decrypt: function (cipher, ciphertext, password, cfg) {
                        // Apply config defaults
                        cfg = this.cfg.extend(cfg);

                        // Convert string to CipherParams
                        ciphertext = this._parse(ciphertext, cfg.format);

                        // Derive key and other params
                        var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);

                        // Add IV to config
                        cfg.iv = derivedParams.iv;

                        // Decrypt
                        var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);

                        return plaintext;
                    }
                });
            }());


        }));
    },{"./core":"/bytetrade-js/node_modules/crypto-js/core.js","./evpkdf":"/bytetrade-js/node_modules/crypto-js/evpkdf.js"}],"/bytetrade-js/node_modules/crypto-js/core.js":[function(require,module,exports){
        ;(function (root, factory) {
            if (typeof exports === "object") {
                // CommonJS
                module.exports = exports = factory();
            }
            else if (typeof define === "function" && define.amd) {
                // AMD
                define([], factory);
            }
            else {
                // Global (browser)
                root.CryptoJS = factory();
            }
        }(this, function () {

            /**
             * CryptoJS core components.
             */
            var CryptoJS = CryptoJS || (function (Math, undefined) {
                /*
	     * Local polyfil of Object.create
	     */
                var create = Object.create || (function () {
                    function F() {};

                    return function (obj) {
                        var subtype;

                        F.prototype = obj;

                        subtype = new F();

                        F.prototype = null;

                        return subtype;
                    };
                }())

                /**
                 * CryptoJS namespace.
                 */
                var C = {};

                /**
                 * Library namespace.
                 */
                var C_lib = C.lib = {};

                /**
                 * Base object for prototypal inheritance.
                 */
                var Base = C_lib.Base = (function () {


                    return {
                        /**
                         * Creates a new object that inherits from this object.
                         *
                         * @param {Object} overrides Properties to copy into the new object.
                         *
                         * @return {Object} The new object.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var MyType = CryptoJS.lib.Base.extend({
                         *         field: 'value',
                         *
                         *         method: function () {
                         *         }
                         *     });
                         */
                        extend: function (overrides) {
                            // Spawn
                            var subtype = create(this);

                            // Augment
                            if (overrides) {
                                subtype.mixIn(overrides);
                            }

                            // Create default initializer
                            if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
                                subtype.init = function () {
                                    subtype.$super.init.apply(this, arguments);
                                };
                            }

                            // Initializer's prototype is the subtype object
                            subtype.init.prototype = subtype;

                            // Reference supertype
                            subtype.$super = this;

                            return subtype;
                        },

                        /**
                         * Extends this object and runs the init method.
                         * Arguments to create() will be passed to init().
                         *
                         * @return {Object} The new object.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var instance = MyType.create();
                         */
                        create: function () {
                            var instance = this.extend();
                            instance.init.apply(instance, arguments);

                            return instance;
                        },

                        /**
                         * Initializes a newly created object.
                         * Override this method to add some logic when your objects are created.
                         *
                         * @example
                         *
                         *     var MyType = CryptoJS.lib.Base.extend({
                         *         init: function () {
                         *             // ...
                         *         }
                         *     });
                         */
                        init: function () {
                        },

                        /**
                         * Copies properties into this object.
                         *
                         * @param {Object} properties The properties to mix in.
                         *
                         * @example
                         *
                         *     MyType.mixIn({
                         *         field: 'value'
                         *     });
                         */
                        mixIn: function (properties) {
                            for (var propertyName in properties) {
                                if (properties.hasOwnProperty(propertyName)) {
                                    this[propertyName] = properties[propertyName];
                                }
                            }

                            // IE won't copy toString using the loop above
                            if (properties.hasOwnProperty('toString')) {
                                this.toString = properties.toString;
                            }
                        },

                        /**
                         * Creates a copy of this object.
                         *
                         * @return {Object} The clone.
                         *
                         * @example
                         *
                         *     var clone = instance.clone();
                         */
                        clone: function () {
                            return this.init.prototype.extend(this);
                        }
                    };
                }());

                /**
                 * An array of 32-bit words.
                 *
                 * @property {Array} words The array of 32-bit words.
                 * @property {number} sigBytes The number of significant bytes in this word array.
                 */
                var WordArray = C_lib.WordArray = Base.extend({
                    /**
                     * Initializes a newly created word array.
                     *
                     * @param {Array} words (Optional) An array of 32-bit words.
                     * @param {number} sigBytes (Optional) The number of significant bytes in the words.
                     *
                     * @example
                     *
                     *     var wordArray = CryptoJS.lib.WordArray.create();
                     *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
                     *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
                     */
                    init: function (words, sigBytes) {
                        words = this.words = words || [];

                        if (sigBytes != undefined) {
                            this.sigBytes = sigBytes;
                        } else {
                            this.sigBytes = words.length * 4;
                        }
                    },

                    /**
                     * Converts this word array to a string.
                     *
                     * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
                     *
                     * @return {string} The stringified word array.
                     *
                     * @example
                     *
                     *     var string = wordArray + '';
                     *     var string = wordArray.toString();
                     *     var string = wordArray.toString(CryptoJS.enc.Utf8);
                     */
                    toString: function (encoder) {
                        return (encoder || Hex).stringify(this);
                    },

                    /**
                     * Concatenates a word array to this word array.
                     *
                     * @param {WordArray} wordArray The word array to append.
                     *
                     * @return {WordArray} This word array.
                     *
                     * @example
                     *
                     *     wordArray1.concat(wordArray2);
                     */
                    concat: function (wordArray) {
                        // Shortcuts
                        var thisWords = this.words;
                        var thatWords = wordArray.words;
                        var thisSigBytes = this.sigBytes;
                        var thatSigBytes = wordArray.sigBytes;

                        // Clamp excess bits
                        this.clamp();

                        // Concat
                        if (thisSigBytes % 4) {
                            // Copy one byte at a time
                            for (var i = 0; i < thatSigBytes; i++) {
                                var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
                                thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
                            }
                        } else {
                            // Copy one word at a time
                            for (var i = 0; i < thatSigBytes; i += 4) {
                                thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];
                            }
                        }
                        this.sigBytes += thatSigBytes;

                        // Chainable
                        return this;
                    },

                    /**
                     * Removes insignificant bits.
                     *
                     * @example
                     *
                     *     wordArray.clamp();
                     */
                    clamp: function () {
                        // Shortcuts
                        var words = this.words;
                        var sigBytes = this.sigBytes;

                        // Clamp
                        words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
                        words.length = Math.ceil(sigBytes / 4);
                    },

                    /**
                     * Creates a copy of this word array.
                     *
                     * @return {WordArray} The clone.
                     *
                     * @example
                     *
                     *     var clone = wordArray.clone();
                     */
                    clone: function () {
                        var clone = Base.clone.call(this);
                        clone.words = this.words.slice(0);

                        return clone;
                    },

                    /**
                     * Creates a word array filled with random bytes.
                     *
                     * @param {number} nBytes The number of random bytes to generate.
                     *
                     * @return {WordArray} The random word array.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var wordArray = CryptoJS.lib.WordArray.random(16);
                     */
                    random: function (nBytes) {
                        var words = [];

                        var r = (function (m_w) {
                            var m_w = m_w;
                            var m_z = 0x3ade68b1;
                            var mask = 0xffffffff;

                            return function () {
                                m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;
                                m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;
                                var result = ((m_z << 0x10) + m_w) & mask;
                                result /= 0x100000000;
                                result += 0.5;
                                return result * (Math.random() > .5 ? 1 : -1);
                            }
                        });

                        for (var i = 0, rcache; i < nBytes; i += 4) {
                            var _r = r((rcache || Math.random()) * 0x100000000);

                            rcache = _r() * 0x3ade67b7;
                            words.push((_r() * 0x100000000) | 0);
                        }

                        return new WordArray.init(words, nBytes);
                    }
                });

                /**
                 * Encoder namespace.
                 */
                var C_enc = C.enc = {};

                /**
                 * Hex encoding strategy.
                 */
                var Hex = C_enc.Hex = {
                    /**
                     * Converts a word array to a hex string.
                     *
                     * @param {WordArray} wordArray The word array.
                     *
                     * @return {string} The hex string.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
                     */
                    stringify: function (wordArray) {
                        // Shortcuts
                        var words = wordArray.words;
                        var sigBytes = wordArray.sigBytes;

                        // Convert
                        var hexChars = [];
                        for (var i = 0; i < sigBytes; i++) {
                            var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
                            hexChars.push((bite >>> 4).toString(16));
                            hexChars.push((bite & 0x0f).toString(16));
                        }

                        return hexChars.join('');
                    },

                    /**
                     * Converts a hex string to a word array.
                     *
                     * @param {string} hexStr The hex string.
                     *
                     * @return {WordArray} The word array.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
                     */
                    parse: function (hexStr) {
                        // Shortcut
                        var hexStrLength = hexStr.length;

                        // Convert
                        var words = [];
                        for (var i = 0; i < hexStrLength; i += 2) {
                            words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
                        }

                        return new WordArray.init(words, hexStrLength / 2);
                    }
                };

                /**
                 * Latin1 encoding strategy.
                 */
                var Latin1 = C_enc.Latin1 = {
                    /**
                     * Converts a word array to a Latin1 string.
                     *
                     * @param {WordArray} wordArray The word array.
                     *
                     * @return {string} The Latin1 string.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
                     */
                    stringify: function (wordArray) {
                        // Shortcuts
                        var words = wordArray.words;
                        var sigBytes = wordArray.sigBytes;

                        // Convert
                        var latin1Chars = [];
                        for (var i = 0; i < sigBytes; i++) {
                            var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
                            latin1Chars.push(String.fromCharCode(bite));
                        }

                        return latin1Chars.join('');
                    },

                    /**
                     * Converts a Latin1 string to a word array.
                     *
                     * @param {string} latin1Str The Latin1 string.
                     *
                     * @return {WordArray} The word array.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
                     */
                    parse: function (latin1Str) {
                        // Shortcut
                        var latin1StrLength = latin1Str.length;

                        // Convert
                        var words = [];
                        for (var i = 0; i < latin1StrLength; i++) {
                            words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
                        }

                        return new WordArray.init(words, latin1StrLength);
                    }
                };

                /**
                 * UTF-8 encoding strategy.
                 */
                var Utf8 = C_enc.Utf8 = {
                    /**
                     * Converts a word array to a UTF-8 string.
                     *
                     * @param {WordArray} wordArray The word array.
                     *
                     * @return {string} The UTF-8 string.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
                     */
                    stringify: function (wordArray) {
                        try {
                            return decodeURIComponent(escape(Latin1.stringify(wordArray)));
                        } catch (e) {
                            throw new Error('Malformed UTF-8 data');
                        }
                    },

                    /**
                     * Converts a UTF-8 string to a word array.
                     *
                     * @param {string} utf8Str The UTF-8 string.
                     *
                     * @return {WordArray} The word array.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
                     */
                    parse: function (utf8Str) {
                        return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
                    }
                };

                /**
                 * Abstract buffered block algorithm template.
                 *
                 * The property blockSize must be implemented in a concrete subtype.
                 *
                 * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
                 */
                var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
                    /**
                     * Resets this block algorithm's data buffer to its initial state.
                     *
                     * @example
                     *
                     *     bufferedBlockAlgorithm.reset();
                     */
                    reset: function () {
                        // Initial values
                        this._data = new WordArray.init();
                        this._nDataBytes = 0;
                    },

                    /**
                     * Adds new data to this block algorithm's buffer.
                     *
                     * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
                     *
                     * @example
                     *
                     *     bufferedBlockAlgorithm._append('data');
                     *     bufferedBlockAlgorithm._append(wordArray);
                     */
                    _append: function (data) {
                        // Convert string to WordArray, else assume WordArray already
                        if (typeof data == 'string') {
                            data = Utf8.parse(data);
                        }

                        // Append
                        this._data.concat(data);
                        this._nDataBytes += data.sigBytes;
                    },

                    /**
                     * Processes available data blocks.
                     *
                     * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
                     *
                     * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
                     *
                     * @return {WordArray} The processed data.
                     *
                     * @example
                     *
                     *     var processedData = bufferedBlockAlgorithm._process();
                     *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
                     */
                    _process: function (doFlush) {
                        // Shortcuts
                        var data = this._data;
                        var dataWords = data.words;
                        var dataSigBytes = data.sigBytes;
                        var blockSize = this.blockSize;
                        var blockSizeBytes = blockSize * 4;

                        // Count blocks ready
                        var nBlocksReady = dataSigBytes / blockSizeBytes;
                        if (doFlush) {
                            // Round up to include partial blocks
                            nBlocksReady = Math.ceil(nBlocksReady);
                        } else {
                            // Round down to include only full blocks,
                            // less the number of blocks that must remain in the buffer
                            nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
                        }

                        // Count words ready
                        var nWordsReady = nBlocksReady * blockSize;

                        // Count bytes ready
                        var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

                        // Process blocks
                        if (nWordsReady) {
                            for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                                // Perform concrete-algorithm logic
                                this._doProcessBlock(dataWords, offset);
                            }

                            // Remove processed words
                            var processedWords = dataWords.splice(0, nWordsReady);
                            data.sigBytes -= nBytesReady;
                        }

                        // Return processed words
                        return new WordArray.init(processedWords, nBytesReady);
                    },

                    /**
                     * Creates a copy of this object.
                     *
                     * @return {Object} The clone.
                     *
                     * @example
                     *
                     *     var clone = bufferedBlockAlgorithm.clone();
                     */
                    clone: function () {
                        var clone = Base.clone.call(this);
                        clone._data = this._data.clone();

                        return clone;
                    },

                    _minBufferSize: 0
                });

                /**
                 * Abstract hasher template.
                 *
                 * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
                 */
                var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
                    /**
                     * Configuration options.
                     */
                    cfg: Base.extend(),

                    /**
                     * Initializes a newly created hasher.
                     *
                     * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
                     *
                     * @example
                     *
                     *     var hasher = CryptoJS.algo.SHA256.create();
                     */
                    init: function (cfg) {
                        // Apply config defaults
                        this.cfg = this.cfg.extend(cfg);

                        // Set initial values
                        this.reset();
                    },

                    /**
                     * Resets this hasher to its initial state.
                     *
                     * @example
                     *
                     *     hasher.reset();
                     */
                    reset: function () {
                        // Reset data buffer
                        BufferedBlockAlgorithm.reset.call(this);

                        // Perform concrete-hasher logic
                        this._doReset();
                    },

                    /**
                     * Updates this hasher with a message.
                     *
                     * @param {WordArray|string} messageUpdate The message to append.
                     *
                     * @return {Hasher} This hasher.
                     *
                     * @example
                     *
                     *     hasher.update('message');
                     *     hasher.update(wordArray);
                     */
                    update: function (messageUpdate) {
                        // Append
                        this._append(messageUpdate);

                        // Update the hash
                        this._process();

                        // Chainable
                        return this;
                    },

                    /**
                     * Finalizes the hash computation.
                     * Note that the finalize operation is effectively a destructive, read-once operation.
                     *
                     * @param {WordArray|string} messageUpdate (Optional) A final message update.
                     *
                     * @return {WordArray} The hash.
                     *
                     * @example
                     *
                     *     var hash = hasher.finalize();
                     *     var hash = hasher.finalize('message');
                     *     var hash = hasher.finalize(wordArray);
                     */
                    finalize: function (messageUpdate) {
                        // Final message update
                        if (messageUpdate) {
                            this._append(messageUpdate);
                        }

                        // Perform concrete-hasher logic
                        var hash = this._doFinalize();

                        return hash;
                    },

                    blockSize: 512/32,

                    /**
                     * Creates a shortcut function to a hasher's object interface.
                     *
                     * @param {Hasher} hasher The hasher to create a helper for.
                     *
                     * @return {Function} The shortcut function.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
                     */
                    _createHelper: function (hasher) {
                        return function (message, cfg) {
                            return new hasher.init(cfg).finalize(message);
                        };
                    },

                    /**
                     * Creates a shortcut function to the HMAC's object interface.
                     *
                     * @param {Hasher} hasher The hasher to use in this HMAC helper.
                     *
                     * @return {Function} The shortcut function.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
                     */
                    _createHmacHelper: function (hasher) {
                        return function (message, key) {
                            return new C_algo.HMAC.init(hasher, key).finalize(message);
                        };
                    }
                });

                /**
                 * Algorithm namespace.
                 */
                var C_algo = C.algo = {};

                return C;
            }(Math));


            return CryptoJS;

        }));
    },{}],"/bytetrade-js/node_modules/crypto-js/enc-base64.js":[function(require,module,exports){
        ;(function (root, factory) {
            if (typeof exports === "object") {
                // CommonJS
                module.exports = exports = factory(require("./core"));
            }
            else if (typeof define === "function" && define.amd) {
                // AMD
                define(["./core"], factory);
            }
            else {
                // Global (browser)
                factory(root.CryptoJS);
            }
        }(this, function (CryptoJS) {

            (function () {
                // Shortcuts
                var C = CryptoJS;
                var C_lib = C.lib;
                var WordArray = C_lib.WordArray;
                var C_enc = C.enc;

                /**
                 * Base64 encoding strategy.
                 */
                var Base64 = C_enc.Base64 = {
                    /**
                     * Converts a word array to a Base64 string.
                     *
                     * @param {WordArray} wordArray The word array.
                     *
                     * @return {string} The Base64 string.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
                     */
                    stringify: function (wordArray) {
                        // Shortcuts
                        var words = wordArray.words;
                        var sigBytes = wordArray.sigBytes;
                        var map = this._map;

                        // Clamp excess bits
                        wordArray.clamp();

                        // Convert
                        var base64Chars = [];
                        for (var i = 0; i < sigBytes; i += 3) {
                            var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;
                            var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
                            var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;

                            var triplet = (byte1 << 16) | (byte2 << 8) | byte3;

                            for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
                                base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
                            }
                        }

                        // Add padding
                        var paddingChar = map.charAt(64);
                        if (paddingChar) {
                            while (base64Chars.length % 4) {
                                base64Chars.push(paddingChar);
                            }
                        }

                        return base64Chars.join('');
                    },

                    /**
                     * Converts a Base64 string to a word array.
                     *
                     * @param {string} base64Str The Base64 string.
                     *
                     * @return {WordArray} The word array.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
                     */
                    parse: function (base64Str) {
                        // Shortcuts
                        var base64StrLength = base64Str.length;
                        var map = this._map;
                        var reverseMap = this._reverseMap;

                        if (!reverseMap) {
                            reverseMap = this._reverseMap = [];
                            for (var j = 0; j < map.length; j++) {
                                reverseMap[map.charCodeAt(j)] = j;
                            }
                        }

                        // Ignore padding
                        var paddingChar = map.charAt(64);
                        if (paddingChar) {
                            var paddingIndex = base64Str.indexOf(paddingChar);
                            if (paddingIndex !== -1) {
                                base64StrLength = paddingIndex;
                            }
                        }

                        // Convert
                        return parseLoop(base64Str, base64StrLength, reverseMap);

                    },

                    _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
                };

                function parseLoop(base64Str, base64StrLength, reverseMap) {
                    var words = [];
                    var nBytes = 0;
                    for (var i = 0; i < base64StrLength; i++) {
                        if (i % 4) {
                            var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);
                            var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);
                            words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);
                            nBytes++;
                        }
                    }
                    return WordArray.create(words, nBytes);
                }
            }());


            return CryptoJS.enc.Base64;

        }));
    },{"./core":"/bytetrade-js/node_modules/crypto-js/core.js"}],"/bytetrade-js/node_modules/crypto-js/enc-hex.js":[function(require,module,exports){
        ;(function (root, factory) {
            if (typeof exports === "object") {
                // CommonJS
                module.exports = exports = factory(require("./core"));
            }
            else if (typeof define === "function" && define.amd) {
                // AMD
                define(["./core"], factory);
            }
            else {
                // Global (browser)
                factory(root.CryptoJS);
            }
        }(this, function (CryptoJS) {

            return CryptoJS.enc.Hex;

        }));
    },{"./core":"/bytetrade-js/node_modules/crypto-js/core.js"}],"/bytetrade-js/node_modules/crypto-js/evpkdf.js":[function(require,module,exports){
        ;(function (root, factory, undef) {
            if (typeof exports === "object") {
                // CommonJS
                module.exports = exports = factory(require("./core"), require("./sha1"), require("./hmac"));
            }
            else if (typeof define === "function" && define.amd) {
                // AMD
                define(["./core", "./sha1", "./hmac"], factory);
            }
            else {
                // Global (browser)
                factory(root.CryptoJS);
            }
        }(this, function (CryptoJS) {

            (function () {
                // Shortcuts
                var C = CryptoJS;
                var C_lib = C.lib;
                var Base = C_lib.Base;
                var WordArray = C_lib.WordArray;
                var C_algo = C.algo;
                var MD5 = C_algo.MD5;

                /**
                 * This key derivation function is meant to conform with EVP_BytesToKey.
                 * www.openssl.org/docs/crypto/EVP_BytesToKey.html
                 */
                var EvpKDF = C_algo.EvpKDF = Base.extend({
                    /**
                     * Configuration options.
                     *
                     * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
                     * @property {Hasher} hasher The hash algorithm to use. Default: MD5
                     * @property {number} iterations The number of iterations to perform. Default: 1
                     */
                    cfg: Base.extend({
                        keySize: 128/32,
                        hasher: MD5,
                        iterations: 1
                    }),

                    /**
                     * Initializes a newly created key derivation function.
                     *
                     * @param {Object} cfg (Optional) The configuration options to use for the derivation.
                     *
                     * @example
                     *
                     *     var kdf = CryptoJS.algo.EvpKDF.create();
                     *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
                     *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
                     */
                    init: function (cfg) {
                        this.cfg = this.cfg.extend(cfg);
                    },

                    /**
                     * Derives a key from a password.
                     *
                     * @param {WordArray|string} password The password.
                     * @param {WordArray|string} salt A salt.
                     *
                     * @return {WordArray} The derived key.
                     *
                     * @example
                     *
                     *     var key = kdf.compute(password, salt);
                     */
                    compute: function (password, salt) {
                        // Shortcut
                        var cfg = this.cfg;

                        // Init hasher
                        var hasher = cfg.hasher.create();

                        // Initial values
                        var derivedKey = WordArray.create();

                        // Shortcuts
                        var derivedKeyWords = derivedKey.words;
                        var keySize = cfg.keySize;
                        var iterations = cfg.iterations;

                        // Generate key
                        while (derivedKeyWords.length < keySize) {
                            if (block) {
                                hasher.update(block);
                            }
                            var block = hasher.update(password).finalize(salt);
                            hasher.reset();

                            // Iterations
                            for (var i = 1; i < iterations; i++) {
                                block = hasher.finalize(block);
                                hasher.reset();
                            }

                            derivedKey.concat(block);
                        }
                        derivedKey.sigBytes = keySize * 4;

                        return derivedKey;
                    }
                });

                /**
                 * Derives a key from a password.
                 *
                 * @param {WordArray|string} password The password.
                 * @param {WordArray|string} salt A salt.
                 * @param {Object} cfg (Optional) The configuration options to use for this computation.
                 *
                 * @return {WordArray} The derived key.
                 *
                 * @static
                 *
                 * @example
                 *
                 *     var key = CryptoJS.EvpKDF(password, salt);
                 *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
                 *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
                 */
                C.EvpKDF = function (password, salt, cfg) {
                    return EvpKDF.create(cfg).compute(password, salt);
                };
            }());


            return CryptoJS.EvpKDF;

        }));
    },{"./core":"/bytetrade-js/node_modules/crypto-js/core.js","./hmac":"/bytetrade-js/node_modules/crypto-js/hmac.js","./sha1":"/bytetrade-js/node_modules/crypto-js/sha1.js"}],"/bytetrade-js/node_modules/crypto-js/hmac.js":[function(require,module,exports){
        ;(function (root, factory) {
            if (typeof exports === "object") {
                // CommonJS
                module.exports = exports = factory(require("./core"));
            }
            else if (typeof define === "function" && define.amd) {
                // AMD
                define(["./core"], factory);
            }
            else {
                // Global (browser)
                factory(root.CryptoJS);
            }
        }(this, function (CryptoJS) {

            (function () {
                // Shortcuts
                var C = CryptoJS;
                var C_lib = C.lib;
                var Base = C_lib.Base;
                var C_enc = C.enc;
                var Utf8 = C_enc.Utf8;
                var C_algo = C.algo;

                /**
                 * HMAC algorithm.
                 */
                var HMAC = C_algo.HMAC = Base.extend({
                    /**
                     * Initializes a newly created HMAC.
                     *
                     * @param {Hasher} hasher The hash algorithm to use.
                     * @param {WordArray|string} key The secret key.
                     *
                     * @example
                     *
                     *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
                     */
                    init: function (hasher, key) {
                        // Init hasher
                        hasher = this._hasher = new hasher.init();

                        // Convert string to WordArray, else assume WordArray already
                        if (typeof key == 'string') {
                            key = Utf8.parse(key);
                        }

                        // Shortcuts
                        var hasherBlockSize = hasher.blockSize;
                        var hasherBlockSizeBytes = hasherBlockSize * 4;

                        // Allow arbitrary length keys
                        if (key.sigBytes > hasherBlockSizeBytes) {
                            key = hasher.finalize(key);
                        }

                        // Clamp excess bits
                        key.clamp();

                        // Clone key for inner and outer pads
                        var oKey = this._oKey = key.clone();
                        var iKey = this._iKey = key.clone();

                        // Shortcuts
                        var oKeyWords = oKey.words;
                        var iKeyWords = iKey.words;

                        // XOR keys with pad constants
                        for (var i = 0; i < hasherBlockSize; i++) {
                            oKeyWords[i] ^= 0x5c5c5c5c;
                            iKeyWords[i] ^= 0x36363636;
                        }
                        oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;

                        // Set initial values
                        this.reset();
                    },

                    /**
                     * Resets this HMAC to its initial state.
                     *
                     * @example
                     *
                     *     hmacHasher.reset();
                     */
                    reset: function () {
                        // Shortcut
                        var hasher = this._hasher;

                        // Reset
                        hasher.reset();
                        hasher.update(this._iKey);
                    },

                    /**
                     * Updates this HMAC with a message.
                     *
                     * @param {WordArray|string} messageUpdate The message to append.
                     *
                     * @return {HMAC} This HMAC instance.
                     *
                     * @example
                     *
                     *     hmacHasher.update('message');
                     *     hmacHasher.update(wordArray);
                     */
                    update: function (messageUpdate) {
                        this._hasher.update(messageUpdate);

                        // Chainable
                        return this;
                    },

                    /**
                     * Finalizes the HMAC computation.
                     * Note that the finalize operation is effectively a destructive, read-once operation.
                     *
                     * @param {WordArray|string} messageUpdate (Optional) A final message update.
                     *
                     * @return {WordArray} The HMAC.
                     *
                     * @example
                     *
                     *     var hmac = hmacHasher.finalize();
                     *     var hmac = hmacHasher.finalize('message');
                     *     var hmac = hmacHasher.finalize(wordArray);
                     */
                    finalize: function (messageUpdate) {
                        // Shortcut
                        var hasher = this._hasher;

                        // Compute HMAC
                        var innerHash = hasher.finalize(messageUpdate);
                        hasher.reset();
                        var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));

                        return hmac;
                    }
                });
            }());


        }));
    },{"./core":"/bytetrade-js/node_modules/crypto-js/core.js"}],"/bytetrade-js/node_modules/crypto-js/md5.js":[function(require,module,exports){
        ;(function (root, factory) {
            if (typeof exports === "object") {
                // CommonJS
                module.exports = exports = factory(require("./core"));
            }
            else if (typeof define === "function" && define.amd) {
                // AMD
                define(["./core"], factory);
            }
            else {
                // Global (browser)
                factory(root.CryptoJS);
            }
        }(this, function (CryptoJS) {

            (function (Math) {
                // Shortcuts
                var C = CryptoJS;
                var C_lib = C.lib;
                var WordArray = C_lib.WordArray;
                var Hasher = C_lib.Hasher;
                var C_algo = C.algo;

                // Constants table
                var T = [];

                // Compute constants
                (function () {
                    for (var i = 0; i < 64; i++) {
                        T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;
                    }
                }());

                /**
                 * MD5 hash algorithm.
                 */
                var MD5 = C_algo.MD5 = Hasher.extend({
                    _doReset: function () {
                        this._hash = new WordArray.init([
                            0x67452301, 0xefcdab89,
                            0x98badcfe, 0x10325476
                        ]);
                    },

                    _doProcessBlock: function (M, offset) {
                        // Swap endian
                        for (var i = 0; i < 16; i++) {
                            // Shortcuts
                            var offset_i = offset + i;
                            var M_offset_i = M[offset_i];

                            M[offset_i] = (
                                (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
                                (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
                            );
                        }

                        // Shortcuts
                        var H = this._hash.words;

                        var M_offset_0  = M[offset + 0];
                        var M_offset_1  = M[offset + 1];
                        var M_offset_2  = M[offset + 2];
                        var M_offset_3  = M[offset + 3];
                        var M_offset_4  = M[offset + 4];
                        var M_offset_5  = M[offset + 5];
                        var M_offset_6  = M[offset + 6];
                        var M_offset_7  = M[offset + 7];
                        var M_offset_8  = M[offset + 8];
                        var M_offset_9  = M[offset + 9];
                        var M_offset_10 = M[offset + 10];
                        var M_offset_11 = M[offset + 11];
                        var M_offset_12 = M[offset + 12];
                        var M_offset_13 = M[offset + 13];
                        var M_offset_14 = M[offset + 14];
                        var M_offset_15 = M[offset + 15];

                        // Working varialbes
                        var a = H[0];
                        var b = H[1];
                        var c = H[2];
                        var d = H[3];

                        // Computation
                        a = FF(a, b, c, d, M_offset_0,  7,  T[0]);
                        d = FF(d, a, b, c, M_offset_1,  12, T[1]);
                        c = FF(c, d, a, b, M_offset_2,  17, T[2]);
                        b = FF(b, c, d, a, M_offset_3,  22, T[3]);
                        a = FF(a, b, c, d, M_offset_4,  7,  T[4]);
                        d = FF(d, a, b, c, M_offset_5,  12, T[5]);
                        c = FF(c, d, a, b, M_offset_6,  17, T[6]);
                        b = FF(b, c, d, a, M_offset_7,  22, T[7]);
                        a = FF(a, b, c, d, M_offset_8,  7,  T[8]);
                        d = FF(d, a, b, c, M_offset_9,  12, T[9]);
                        c = FF(c, d, a, b, M_offset_10, 17, T[10]);
                        b = FF(b, c, d, a, M_offset_11, 22, T[11]);
                        a = FF(a, b, c, d, M_offset_12, 7,  T[12]);
                        d = FF(d, a, b, c, M_offset_13, 12, T[13]);
                        c = FF(c, d, a, b, M_offset_14, 17, T[14]);
                        b = FF(b, c, d, a, M_offset_15, 22, T[15]);

                        a = GG(a, b, c, d, M_offset_1,  5,  T[16]);
                        d = GG(d, a, b, c, M_offset_6,  9,  T[17]);
                        c = GG(c, d, a, b, M_offset_11, 14, T[18]);
                        b = GG(b, c, d, a, M_offset_0,  20, T[19]);
                        a = GG(a, b, c, d, M_offset_5,  5,  T[20]);
                        d = GG(d, a, b, c, M_offset_10, 9,  T[21]);
                        c = GG(c, d, a, b, M_offset_15, 14, T[22]);
                        b = GG(b, c, d, a, M_offset_4,  20, T[23]);
                        a = GG(a, b, c, d, M_offset_9,  5,  T[24]);
                        d = GG(d, a, b, c, M_offset_14, 9,  T[25]);
                        c = GG(c, d, a, b, M_offset_3,  14, T[26]);
                        b = GG(b, c, d, a, M_offset_8,  20, T[27]);
                        a = GG(a, b, c, d, M_offset_13, 5,  T[28]);
                        d = GG(d, a, b, c, M_offset_2,  9,  T[29]);
                        c = GG(c, d, a, b, M_offset_7,  14, T[30]);
                        b = GG(b, c, d, a, M_offset_12, 20, T[31]);

                        a = HH(a, b, c, d, M_offset_5,  4,  T[32]);
                        d = HH(d, a, b, c, M_offset_8,  11, T[33]);
                        c = HH(c, d, a, b, M_offset_11, 16, T[34]);
                        b = HH(b, c, d, a, M_offset_14, 23, T[35]);
                        a = HH(a, b, c, d, M_offset_1,  4,  T[36]);
                        d = HH(d, a, b, c, M_offset_4,  11, T[37]);
                        c = HH(c, d, a, b, M_offset_7,  16, T[38]);
                        b = HH(b, c, d, a, M_offset_10, 23, T[39]);
                        a = HH(a, b, c, d, M_offset_13, 4,  T[40]);
                        d = HH(d, a, b, c, M_offset_0,  11, T[41]);
                        c = HH(c, d, a, b, M_offset_3,  16, T[42]);
                        b = HH(b, c, d, a, M_offset_6,  23, T[43]);
                        a = HH(a, b, c, d, M_offset_9,  4,  T[44]);
                        d = HH(d, a, b, c, M_offset_12, 11, T[45]);
                        c = HH(c, d, a, b, M_offset_15, 16, T[46]);
                        b = HH(b, c, d, a, M_offset_2,  23, T[47]);

                        a = II(a, b, c, d, M_offset_0,  6,  T[48]);
                        d = II(d, a, b, c, M_offset_7,  10, T[49]);
                        c = II(c, d, a, b, M_offset_14, 15, T[50]);
                        b = II(b, c, d, a, M_offset_5,  21, T[51]);
                        a = II(a, b, c, d, M_offset_12, 6,  T[52]);
                        d = II(d, a, b, c, M_offset_3,  10, T[53]);
                        c = II(c, d, a, b, M_offset_10, 15, T[54]);
                        b = II(b, c, d, a, M_offset_1,  21, T[55]);
                        a = II(a, b, c, d, M_offset_8,  6,  T[56]);
                        d = II(d, a, b, c, M_offset_15, 10, T[57]);
                        c = II(c, d, a, b, M_offset_6,  15, T[58]);
                        b = II(b, c, d, a, M_offset_13, 21, T[59]);
                        a = II(a, b, c, d, M_offset_4,  6,  T[60]);
                        d = II(d, a, b, c, M_offset_11, 10, T[61]);
                        c = II(c, d, a, b, M_offset_2,  15, T[62]);
                        b = II(b, c, d, a, M_offset_9,  21, T[63]);

                        // Intermediate hash value
                        H[0] = (H[0] + a) | 0;
                        H[1] = (H[1] + b) | 0;
                        H[2] = (H[2] + c) | 0;
                        H[3] = (H[3] + d) | 0;
                    },

                    _doFinalize: function () {
                        // Shortcuts
                        var data = this._data;
                        var dataWords = data.words;

                        var nBitsTotal = this._nDataBytes * 8;
                        var nBitsLeft = data.sigBytes * 8;

                        // Add padding
                        dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);

                        var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
                        var nBitsTotalL = nBitsTotal;
                        dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (
                            (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |
                            (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)
                        );
                        dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
                            (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |
                            (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)
                        );

                        data.sigBytes = (dataWords.length + 1) * 4;

                        // Hash final blocks
                        this._process();

                        // Shortcuts
                        var hash = this._hash;
                        var H = hash.words;

                        // Swap endian
                        for (var i = 0; i < 4; i++) {
                            // Shortcut
                            var H_i = H[i];

                            H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
                                (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
                        }

                        // Return final computed hash
                        return hash;
                    },

                    clone: function () {
                        var clone = Hasher.clone.call(this);
                        clone._hash = this._hash.clone();

                        return clone;
                    }
                });

                function FF(a, b, c, d, x, s, t) {
                    var n = a + ((b & c) | (~b & d)) + x + t;
                    return ((n << s) | (n >>> (32 - s))) + b;
                }

                function GG(a, b, c, d, x, s, t) {
                    var n = a + ((b & d) | (c & ~d)) + x + t;
                    return ((n << s) | (n >>> (32 - s))) + b;
                }

                function HH(a, b, c, d, x, s, t) {
                    var n = a + (b ^ c ^ d) + x + t;
                    return ((n << s) | (n >>> (32 - s))) + b;
                }

                function II(a, b, c, d, x, s, t) {
                    var n = a + (c ^ (b | ~d)) + x + t;
                    return ((n << s) | (n >>> (32 - s))) + b;
                }

                /**
                 * Shortcut function to the hasher's object interface.
                 *
                 * @param {WordArray|string} message The message to hash.
                 *
                 * @return {WordArray} The hash.
                 *
                 * @static
                 *
                 * @example
                 *
                 *     var hash = CryptoJS.MD5('message');
                 *     var hash = CryptoJS.MD5(wordArray);
                 */
                C.MD5 = Hasher._createHelper(MD5);

                /**
                 * Shortcut function to the HMAC's object interface.
                 *
                 * @param {WordArray|string} message The message to hash.
                 * @param {WordArray|string} key The secret key.
                 *
                 * @return {WordArray} The HMAC.
                 *
                 * @static
                 *
                 * @example
                 *
                 *     var hmac = CryptoJS.HmacMD5(message, key);
                 */
                C.HmacMD5 = Hasher._createHmacHelper(MD5);
            }(Math));


            return CryptoJS.MD5;

        }));
    },{"./core":"/bytetrade-js/node_modules/crypto-js/core.js"}],"/bytetrade-js/node_modules/crypto-js/sha1.js":[function(require,module,exports){
        ;(function (root, factory) {
            if (typeof exports === "object") {
                // CommonJS
                module.exports = exports = factory(require("./core"));
            }
            else if (typeof define === "function" && define.amd) {
                // AMD
                define(["./core"], factory);
            }
            else {
                // Global (browser)
                factory(root.CryptoJS);
            }
        }(this, function (CryptoJS) {

            (function () {
                // Shortcuts
                var C = CryptoJS;
                var C_lib = C.lib;
                var WordArray = C_lib.WordArray;
                var Hasher = C_lib.Hasher;
                var C_algo = C.algo;

                // Reusable object
                var W = [];

                /**
                 * SHA-1 hash algorithm.
                 */
                var SHA1 = C_algo.SHA1 = Hasher.extend({
                    _doReset: function () {
                        this._hash = new WordArray.init([
                            0x67452301, 0xefcdab89,
                            0x98badcfe, 0x10325476,
                            0xc3d2e1f0
                        ]);
                    },

                    _doProcessBlock: function (M, offset) {
                        // Shortcut
                        var H = this._hash.words;

                        // Working variables
                        var a = H[0];
                        var b = H[1];
                        var c = H[2];
                        var d = H[3];
                        var e = H[4];

                        // Computation
                        for (var i = 0; i < 80; i++) {
                            if (i < 16) {
                                W[i] = M[offset + i] | 0;
                            } else {
                                var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
                                W[i] = (n << 1) | (n >>> 31);
                            }

                            var t = ((a << 5) | (a >>> 27)) + e + W[i];
                            if (i < 20) {
                                t += ((b & c) | (~b & d)) + 0x5a827999;
                            } else if (i < 40) {
                                t += (b ^ c ^ d) + 0x6ed9eba1;
                            } else if (i < 60) {
                                t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;
                            } else /* if (i < 80) */ {
                                t += (b ^ c ^ d) - 0x359d3e2a;
                            }

                            e = d;
                            d = c;
                            c = (b << 30) | (b >>> 2);
                            b = a;
                            a = t;
                        }

                        // Intermediate hash value
                        H[0] = (H[0] + a) | 0;
                        H[1] = (H[1] + b) | 0;
                        H[2] = (H[2] + c) | 0;
                        H[3] = (H[3] + d) | 0;
                        H[4] = (H[4] + e) | 0;
                    },

                    _doFinalize: function () {
                        // Shortcuts
                        var data = this._data;
                        var dataWords = data.words;

                        var nBitsTotal = this._nDataBytes * 8;
                        var nBitsLeft = data.sigBytes * 8;

                        // Add padding
                        dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
                        dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
                        dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
                        data.sigBytes = dataWords.length * 4;

                        // Hash final blocks
                        this._process();

                        // Return final computed hash
                        return this._hash;
                    },

                    clone: function () {
                        var clone = Hasher.clone.call(this);
                        clone._hash = this._hash.clone();

                        return clone;
                    }
                });

                /**
                 * Shortcut function to the hasher's object interface.
                 *
                 * @param {WordArray|string} message The message to hash.
                 *
                 * @return {WordArray} The hash.
                 *
                 * @static
                 *
                 * @example
                 *
                 *     var hash = CryptoJS.SHA1('message');
                 *     var hash = CryptoJS.SHA1(wordArray);
                 */
                C.SHA1 = Hasher._createHelper(SHA1);

                /**
                 * Shortcut function to the HMAC's object interface.
                 *
                 * @param {WordArray|string} message The message to hash.
                 * @param {WordArray|string} key The secret key.
                 *
                 * @return {WordArray} The HMAC.
                 *
                 * @static
                 *
                 * @example
                 *
                 *     var hmac = CryptoJS.HmacSHA1(message, key);
                 */
                C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
            }());


            return CryptoJS.SHA1;

        }));
    },{"./core":"/bytetrade-js/node_modules/crypto-js/core.js"}],"/bytetrade-js/node_modules/deep-equal/index.js":[function(require,module,exports){
        var pSlice = Array.prototype.slice;
        var objectKeys = require('./lib/keys.js');
        var isArguments = require('./lib/is_arguments.js');

        var deepEqual = module.exports = function (actual, expected, opts) {
            if (!opts) opts = {};
            // 7.1. All identical values are equivalent, as determined by ===.
            if (actual === expected) {
                return true;

            } else if (actual instanceof Date && expected instanceof Date) {
                return actual.getTime() === expected.getTime();

                // 7.3. Other pairs that do not both pass typeof value == 'object',
                // equivalence is determined by ==.
            } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
                return opts.strict ? actual === expected : actual == expected;

                // 7.4. For all other Object pairs, including Array objects, equivalence is
                // determined by having the same number of owned properties (as verified
                // with Object.prototype.hasOwnProperty.call), the same set of keys
                // (although not necessarily the same order), equivalent values for every
                // corresponding key, and an identical 'prototype' property. Note: this
                // accounts for both named and indexed properties on Arrays.
            } else {
                return objEquiv(actual, expected, opts);
            }
        }

        function isUndefinedOrNull(value) {
            return value === null || value === undefined;
        }

        function isBuffer (x) {
            if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
            if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
                return false;
            }
            if (x.length > 0 && typeof x[0] !== 'number') return false;
            return true;
        }

        function objEquiv(a, b, opts) {
            var i, key;
            if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
                return false;
            // an identical 'prototype' property.
            if (a.prototype !== b.prototype) return false;
            //~~~I've managed to break Object.keys through screwy arguments passing.
            //   Converting to array solves the problem.
            if (isArguments(a)) {
                if (!isArguments(b)) {
                    return false;
                }
                a = pSlice.call(a);
                b = pSlice.call(b);
                return deepEqual(a, b, opts);
            }
            if (isBuffer(a)) {
                if (!isBuffer(b)) {
                    return false;
                }
                if (a.length !== b.length) return false;
                for (i = 0; i < a.length; i++) {
                    if (a[i] !== b[i]) return false;
                }
                return true;
            }
            try {
                var ka = objectKeys(a),
                    kb = objectKeys(b);
            } catch (e) {//happens when one is a string literal and the other isn't
                return false;
            }
            // having the same number of owned properties (keys incorporates
            // hasOwnProperty)
            if (ka.length != kb.length)
                return false;
            //the same set of keys (although not necessarily the same order),
            ka.sort();
            kb.sort();
            //~~~cheap key test
            for (i = ka.length - 1; i >= 0; i--) {
                if (ka[i] != kb[i])
                    return false;
            }
            //equivalent values for every corresponding key, and
            //~~~possibly expensive deep test
            for (i = ka.length - 1; i >= 0; i--) {
                key = ka[i];
                if (!deepEqual(a[key], b[key], opts)) return false;
            }
            return typeof a === typeof b;
        }

    },{"./lib/is_arguments.js":"/bytetrade-js/node_modules/deep-equal/lib/is_arguments.js","./lib/keys.js":"/bytetrade-js/node_modules/deep-equal/lib/keys.js"}],"/bytetrade-js/node_modules/deep-equal/lib/is_arguments.js":[function(require,module,exports){
        var supportsArgumentsClass = (function(){
            return Object.prototype.toString.call(arguments)
        })() == '[object Arguments]';

        exports = module.exports = supportsArgumentsClass ? supported : unsupported;

        exports.supported = supported;
        function supported(object) {
            return Object.prototype.toString.call(object) == '[object Arguments]';
        };

        exports.unsupported = unsupported;
        function unsupported(object){
            return object &&
                typeof object == 'object' &&
                typeof object.length == 'number' &&
                Object.prototype.hasOwnProperty.call(object, 'callee') &&
                !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
                false;
        };

    },{}],"/bytetrade-js/node_modules/deep-equal/lib/keys.js":[function(require,module,exports){
        exports = module.exports = typeof Object.keys === 'function'
            ? Object.keys : shim;

        exports.shim = shim;
        function shim (obj) {
            var keys = [];
            for (var key in obj) keys.push(key);
            return keys;
        }

    },{}],"/bytetrade-js/node_modules/ecurve/lib/curve.js":[function(require,module,exports){
        var assert = require('assert')
        var BigInteger = require('bigi')

        var Point = require('./point')

        function Curve (p, a, b, Gx, Gy, n, h) {
            this.p = p
            this.a = a
            this.b = b
            this.G = Point.fromAffine(this, Gx, Gy)
            this.n = n
            this.h = h

            this.infinity = new Point(this, null, null, BigInteger.ZERO)

            // result caching
            this.pOverFour = p.add(BigInteger.ONE).shiftRight(2)

            // determine size of p in bytes
            this.pLength = Math.floor((this.p.bitLength() + 7) / 8)
        }

        Curve.prototype.pointFromX = function (isOdd, x) {
            var alpha = x.pow(3).add(this.a.multiply(x)).add(this.b).mod(this.p)
            var beta = alpha.modPow(this.pOverFour, this.p) // XXX: not compatible with all curves

            var y = beta
            if (beta.isEven() ^ !isOdd) {
                y = this.p.subtract(y) // -y % p
            }

            return Point.fromAffine(this, x, y)
        }

        Curve.prototype.isInfinity = function (Q) {
            if (Q === this.infinity) return true

            return Q.z.signum() === 0 && Q.y.signum() !== 0
        }

        Curve.prototype.isOnCurve = function (Q) {
            if (this.isInfinity(Q)) return true

            var x = Q.affineX
            var y = Q.affineY
            var a = this.a
            var b = this.b
            var p = this.p

            // Check that xQ and yQ are integers in the interval [0, p - 1]
            if (x.signum() < 0 || x.compareTo(p) >= 0) return false
            if (y.signum() < 0 || y.compareTo(p) >= 0) return false

            // and check that y^2 = x^3 + ax + b (mod p)
            var lhs = y.square().mod(p)
            var rhs = x.pow(3).add(a.multiply(x)).add(b).mod(p)
            return lhs.equals(rhs)
        }

        /**
         * Validate an elliptic curve point.
         *
         * See SEC 1, section 3.2.2.1: Elliptic Curve Public Key Validation Primitive
         */
        Curve.prototype.validate = function (Q) {
            // Check Q != O
            assert(!this.isInfinity(Q), 'Point is at infinity')
            assert(this.isOnCurve(Q), 'Point is not on the curve')

            // Check nQ = O (where Q is a scalar multiple of G)
            var nQ = Q.multiply(this.n)
            assert(this.isInfinity(nQ), 'Point is not a scalar multiple of G')

            return true
        }

        module.exports = Curve

    },{"./point":"/bytetrade-js/node_modules/ecurve/lib/point.js","assert":"/bytetrade-js/node_modules/assert/assert.js","bigi":"/bytetrade-js/node_modules/bigi/lib/index.js"}],"/bytetrade-js/node_modules/ecurve/lib/curves.json":[function(require,module,exports){
        module.exports={
            "secp128r1": {
                "p": "fffffffdffffffffffffffffffffffff",
                "a": "fffffffdfffffffffffffffffffffffc",
                "b": "e87579c11079f43dd824993c2cee5ed3",
                "n": "fffffffe0000000075a30d1b9038a115",
                "h": "01",
                "Gx": "161ff7528b899b2d0c28607ca52c5b86",
                "Gy": "cf5ac8395bafeb13c02da292dded7a83"
            },
            "secp160k1": {
                "p": "fffffffffffffffffffffffffffffffeffffac73",
                "a": "00",
                "b": "07",
                "n": "0100000000000000000001b8fa16dfab9aca16b6b3",
                "h": "01",
                "Gx": "3b4c382ce37aa192a4019e763036f4f5dd4d7ebb",
                "Gy": "938cf935318fdced6bc28286531733c3f03c4fee"
            },
            "secp160r1": {
                "p": "ffffffffffffffffffffffffffffffff7fffffff",
                "a": "ffffffffffffffffffffffffffffffff7ffffffc",
                "b": "1c97befc54bd7a8b65acf89f81d4d4adc565fa45",
                "n": "0100000000000000000001f4c8f927aed3ca752257",
                "h": "01",
                "Gx": "4a96b5688ef573284664698968c38bb913cbfc82",
                "Gy": "23a628553168947d59dcc912042351377ac5fb32"
            },
            "secp192k1": {
                "p": "fffffffffffffffffffffffffffffffffffffffeffffee37",
                "a": "00",
                "b": "03",
                "n": "fffffffffffffffffffffffe26f2fc170f69466a74defd8d",
                "h": "01",
                "Gx": "db4ff10ec057e9ae26b07d0280b7f4341da5d1b1eae06c7d",
                "Gy": "9b2f2f6d9c5628a7844163d015be86344082aa88d95e2f9d"
            },
            "secp192r1": {
                "p": "fffffffffffffffffffffffffffffffeffffffffffffffff",
                "a": "fffffffffffffffffffffffffffffffefffffffffffffffc",
                "b": "64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1",
                "n": "ffffffffffffffffffffffff99def836146bc9b1b4d22831",
                "h": "01",
                "Gx": "188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012",
                "Gy": "07192b95ffc8da78631011ed6b24cdd573f977a11e794811"
            },
            "secp256k1": {
                "p": "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f",
                "a": "00",
                "b": "07",
                "n": "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",
                "h": "01",
                "Gx": "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
                "Gy": "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"
            },
            "secp256r1": {
                "p": "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff",
                "a": "ffffffff00000001000000000000000000000000fffffffffffffffffffffffc",
                "b": "5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b",
                "n": "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551",
                "h": "01",
                "Gx": "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296",
                "Gy": "4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5"
            }
        }

    },{}],"/bytetrade-js/node_modules/ecurve/lib/index.js":[function(require,module,exports){
        var Point = require('./point')
        var Curve = require('./curve')

        var getCurveByName = require('./names')

        module.exports = {
            Curve: Curve,
            Point: Point,
            getCurveByName: getCurveByName
        }

    },{"./curve":"/bytetrade-js/node_modules/ecurve/lib/curve.js","./names":"/bytetrade-js/node_modules/ecurve/lib/names.js","./point":"/bytetrade-js/node_modules/ecurve/lib/point.js"}],"/bytetrade-js/node_modules/ecurve/lib/names.js":[function(require,module,exports){
        var BigInteger = require('bigi')

        var curves = require('./curves.json')
        var Curve = require('./curve')

        function getCurveByName (name) {
            var curve = curves[name]
            if (!curve) return null

            var p = new BigInteger(curve.p, 16)
            var a = new BigInteger(curve.a, 16)
            var b = new BigInteger(curve.b, 16)
            var n = new BigInteger(curve.n, 16)
            var h = new BigInteger(curve.h, 16)
            var Gx = new BigInteger(curve.Gx, 16)
            var Gy = new BigInteger(curve.Gy, 16)

            return new Curve(p, a, b, Gx, Gy, n, h)
        }

        module.exports = getCurveByName

    },{"./curve":"/bytetrade-js/node_modules/ecurve/lib/curve.js","./curves.json":"/bytetrade-js/node_modules/ecurve/lib/curves.json","bigi":"/bytetrade-js/node_modules/bigi/lib/index.js"}],"/bytetrade-js/node_modules/ecurve/lib/point.js":[function(require,module,exports){
        var assert = require('assert')
        var Buffer = require('safe-buffer').Buffer
        var BigInteger = require('bigi')

        var THREE = BigInteger.valueOf(3)

        function Point (curve, x, y, z) {
            assert.notStrictEqual(z, undefined, 'Missing Z coordinate')

            this.curve = curve
            this.x = x
            this.y = y
            this.z = z
            this._zInv = null

            this.compressed = true
        }

        Object.defineProperty(Point.prototype, 'zInv', {
            get: function () {
                if (this._zInv === null) {
                    this._zInv = this.z.modInverse(this.curve.p)
                }

                return this._zInv
            }
        })

        Object.defineProperty(Point.prototype, 'affineX', {
            get: function () {
                return this.x.multiply(this.zInv).mod(this.curve.p)
            }
        })

        Object.defineProperty(Point.prototype, 'affineY', {
            get: function () {
                return this.y.multiply(this.zInv).mod(this.curve.p)
            }
        })

        Point.fromAffine = function (curve, x, y) {
            return new Point(curve, x, y, BigInteger.ONE)
        }

        Point.prototype.equals = function (other) {
            if (other === this) return true
            if (this.curve.isInfinity(this)) return this.curve.isInfinity(other)
            if (this.curve.isInfinity(other)) return this.curve.isInfinity(this)

            // u = Y2 * Z1 - Y1 * Z2
            var u = other.y.multiply(this.z).subtract(this.y.multiply(other.z)).mod(this.curve.p)

            if (u.signum() !== 0) return false

            // v = X2 * Z1 - X1 * Z2
            var v = other.x.multiply(this.z).subtract(this.x.multiply(other.z)).mod(this.curve.p)

            return v.signum() === 0
        }

        Point.prototype.negate = function () {
            var y = this.curve.p.subtract(this.y)

            return new Point(this.curve, this.x, y, this.z)
        }

        Point.prototype.add = function (b) {
            if (this.curve.isInfinity(this)) return b
            if (this.curve.isInfinity(b)) return this

            var x1 = this.x
            var y1 = this.y
            var x2 = b.x
            var y2 = b.y

            // u = Y2 * Z1 - Y1 * Z2
            var u = y2.multiply(this.z).subtract(y1.multiply(b.z)).mod(this.curve.p)
            // v = X2 * Z1 - X1 * Z2
            var v = x2.multiply(this.z).subtract(x1.multiply(b.z)).mod(this.curve.p)

            if (v.signum() === 0) {
                if (u.signum() === 0) {
                    return this.twice() // this == b, so double
                }

                return this.curve.infinity // this = -b, so infinity
            }

            var v2 = v.square()
            var v3 = v2.multiply(v)
            var x1v2 = x1.multiply(v2)
            var zu2 = u.square().multiply(this.z)

            // x3 = v * (z2 * (z1 * u^2 - 2 * x1 * v^2) - v^3)
            var x3 = zu2.subtract(x1v2.shiftLeft(1)).multiply(b.z).subtract(v3).multiply(v).mod(this.curve.p)
            // y3 = z2 * (3 * x1 * u * v^2 - y1 * v^3 - z1 * u^3) + u * v^3
            var y3 = x1v2.multiply(THREE).multiply(u).subtract(y1.multiply(v3)).subtract(zu2.multiply(u)).multiply(b.z).add(u.multiply(v3)).mod(this.curve.p)
            // z3 = v^3 * z1 * z2
            var z3 = v3.multiply(this.z).multiply(b.z).mod(this.curve.p)

            return new Point(this.curve, x3, y3, z3)
        }

        Point.prototype.twice = function () {
            if (this.curve.isInfinity(this)) return this
            if (this.y.signum() === 0) return this.curve.infinity

            var x1 = this.x
            var y1 = this.y

            var y1z1 = y1.multiply(this.z).mod(this.curve.p)
            var y1sqz1 = y1z1.multiply(y1).mod(this.curve.p)
            var a = this.curve.a

            // w = 3 * x1^2 + a * z1^2
            var w = x1.square().multiply(THREE)

            if (a.signum() !== 0) {
                w = w.add(this.z.square().multiply(a))
            }

            w = w.mod(this.curve.p)
            // x3 = 2 * y1 * z1 * (w^2 - 8 * x1 * y1^2 * z1)
            var x3 = w.square().subtract(x1.shiftLeft(3).multiply(y1sqz1)).shiftLeft(1).multiply(y1z1).mod(this.curve.p)
            // y3 = 4 * y1^2 * z1 * (3 * w * x1 - 2 * y1^2 * z1) - w^3
            var y3 = w.multiply(THREE).multiply(x1).subtract(y1sqz1.shiftLeft(1)).shiftLeft(2).multiply(y1sqz1).subtract(w.pow(3)).mod(this.curve.p)
            // z3 = 8 * (y1 * z1)^3
            var z3 = y1z1.pow(3).shiftLeft(3).mod(this.curve.p)

            return new Point(this.curve, x3, y3, z3)
        }

// Simple NAF (Non-Adjacent Form) multiplication algorithm
// TODO: modularize the multiplication algorithm
        Point.prototype.multiply = function (k) {
            if (this.curve.isInfinity(this)) return this
            if (k.signum() === 0) return this.curve.infinity

            var e = k
            var h = e.multiply(THREE)

            var neg = this.negate()
            var R = this

            for (var i = h.bitLength() - 2; i > 0; --i) {
                var hBit = h.testBit(i)
                var eBit = e.testBit(i)

                R = R.twice()

                if (hBit !== eBit) {
                    R = R.add(hBit ? this : neg)
                }
            }

            return R
        }

// Compute this*j + x*k (simultaneous multiplication)
        Point.prototype.multiplyTwo = function (j, x, k) {
            var i = Math.max(j.bitLength(), k.bitLength()) - 1
            var R = this.curve.infinity
            var both = this.add(x)

            while (i >= 0) {
                var jBit = j.testBit(i)
                var kBit = k.testBit(i)

                R = R.twice()

                if (jBit) {
                    if (kBit) {
                        R = R.add(both)
                    } else {
                        R = R.add(this)
                    }
                } else if (kBit) {
                    R = R.add(x)
                }
                --i
            }

            return R
        }

        Point.prototype.getEncoded = function (compressed) {
            if (compressed == null) compressed = this.compressed
            if (this.curve.isInfinity(this)) return Buffer.alloc(1, 0) // Infinity point encoded is simply '00'

            var x = this.affineX
            var y = this.affineY
            var byteLength = this.curve.pLength
            var buffer

            // 0x02/0x03 | X
            if (compressed) {
                buffer = Buffer.allocUnsafe(1 + byteLength)
                buffer.writeUInt8(y.isEven() ? 0x02 : 0x03, 0)

                // 0x04 | X | Y
            } else {
                buffer = Buffer.allocUnsafe(1 + byteLength + byteLength)
                buffer.writeUInt8(0x04, 0)

                y.toBuffer(byteLength).copy(buffer, 1 + byteLength)
            }

            x.toBuffer(byteLength).copy(buffer, 1)

            return buffer
        }

        Point.decodeFrom = function (curve, buffer) {
            var type = buffer.readUInt8(0)
            var compressed = (type !== 4)

            var byteLength = Math.floor((curve.p.bitLength() + 7) / 8)
            var x = BigInteger.fromBuffer(buffer.slice(1, 1 + byteLength))

            var Q
            if (compressed) {
                assert.equal(buffer.length, byteLength + 1, 'Invalid sequence length')
                assert(type === 0x02 || type === 0x03, 'Invalid sequence tag')

                var isOdd = (type === 0x03)
                Q = curve.pointFromX(isOdd, x)
            } else {
                assert.equal(buffer.length, 1 + byteLength + byteLength, 'Invalid sequence length')

                var y = BigInteger.fromBuffer(buffer.slice(1 + byteLength))
                Q = Point.fromAffine(curve, x, y)
            }

            Q.compressed = compressed
            return Q
        }

        Point.prototype.toString = function () {
            if (this.curve.isInfinity(this)) return '(INFINITY)'

            return '(' + this.affineX.toString() + ',' + this.affineY.toString() + ')'
        }

        module.exports = Point

    },{"assert":"/bytetrade-js/node_modules/assert/assert.js","bigi":"/bytetrade-js/node_modules/bigi/lib/index.js","safe-buffer":"/bytetrade-js/node_modules/safe-buffer/index.js"}],"/bytetrade-js/node_modules/events/events.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

        function EventEmitter() {
            this._events = this._events || {};
            this._maxListeners = this._maxListeners || undefined;
        }
        module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
        EventEmitter.EventEmitter = EventEmitter;

        EventEmitter.prototype._events = undefined;
        EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
        EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
        EventEmitter.prototype.setMaxListeners = function(n) {
            if (!isNumber(n) || n < 0 || isNaN(n))
                throw TypeError('n must be a positive number');
            this._maxListeners = n;
            return this;
        };

        EventEmitter.prototype.emit = function(type) {
            var er, handler, len, args, i, listeners;

            if (!this._events)
                this._events = {};

            // If there is no 'error' event listener then throw.
            if (type === 'error') {
                if (!this._events.error ||
                    (isObject(this._events.error) && !this._events.error.length)) {
                    er = arguments[1];
                    if (er instanceof Error) {
                        throw er; // Unhandled 'error' event
                    } else {
                        // At least give some kind of context to the user
                        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
                        err.context = er;
                        throw err;
                    }
                }
            }

            handler = this._events[type];

            if (isUndefined(handler))
                return false;

            if (isFunction(handler)) {
                switch (arguments.length) {
                    // fast cases
                    case 1:
                        handler.call(this);
                        break;
                    case 2:
                        handler.call(this, arguments[1]);
                        break;
                    case 3:
                        handler.call(this, arguments[1], arguments[2]);
                        break;
                    // slower
                    default:
                        args = Array.prototype.slice.call(arguments, 1);
                        handler.apply(this, args);
                }
            } else if (isObject(handler)) {
                args = Array.prototype.slice.call(arguments, 1);
                listeners = handler.slice();
                len = listeners.length;
                for (i = 0; i < len; i++)
                    listeners[i].apply(this, args);
            }

            return true;
        };

        EventEmitter.prototype.addListener = function(type, listener) {
            var m;

            if (!isFunction(listener))
                throw TypeError('listener must be a function');

            if (!this._events)
                this._events = {};

            // To avoid recursion in the case that type === "newListener"! Before
            // adding it to the listeners, first emit "newListener".
            if (this._events.newListener)
                this.emit('newListener', type,
                    isFunction(listener.listener) ?
                        listener.listener : listener);

            if (!this._events[type])
            // Optimize the case of one listener. Don't need the extra array object.
                this._events[type] = listener;
            else if (isObject(this._events[type]))
            // If we've already got an array, just append.
                this._events[type].push(listener);
            else
            // Adding the second element, need to change to array.
                this._events[type] = [this._events[type], listener];

            // Check for listener leak
            if (isObject(this._events[type]) && !this._events[type].warned) {
                if (!isUndefined(this._maxListeners)) {
                    m = this._maxListeners;
                } else {
                    m = EventEmitter.defaultMaxListeners;
                }

                if (m && m > 0 && this._events[type].length > m) {
                    this._events[type].warned = true;
                    console.error('(node) warning: possible EventEmitter memory ' +
                        'leak detected. %d listeners added. ' +
                        'Use emitter.setMaxListeners() to increase limit.',
                        this._events[type].length);
                    if (typeof console.trace === 'function') {
                        // not supported in IE 10
                        console.trace();
                    }
                }
            }

            return this;
        };

        EventEmitter.prototype.on = EventEmitter.prototype.addListener;

        EventEmitter.prototype.once = function(type, listener) {
            if (!isFunction(listener))
                throw TypeError('listener must be a function');

            var fired = false;

            function g() {
                this.removeListener(type, g);

                if (!fired) {
                    fired = true;
                    listener.apply(this, arguments);
                }
            }

            g.listener = listener;
            this.on(type, g);

            return this;
        };

// emits a 'removeListener' event iff the listener was removed
        EventEmitter.prototype.removeListener = function(type, listener) {
            var list, position, length, i;

            if (!isFunction(listener))
                throw TypeError('listener must be a function');

            if (!this._events || !this._events[type])
                return this;

            list = this._events[type];
            length = list.length;
            position = -1;

            if (list === listener ||
                (isFunction(list.listener) && list.listener === listener)) {
                delete this._events[type];
                if (this._events.removeListener)
                    this.emit('removeListener', type, listener);

            } else if (isObject(list)) {
                for (i = length; i-- > 0;) {
                    if (list[i] === listener ||
                        (list[i].listener && list[i].listener === listener)) {
                        position = i;
                        break;
                    }
                }

                if (position < 0)
                    return this;

                if (list.length === 1) {
                    list.length = 0;
                    delete this._events[type];
                } else {
                    list.splice(position, 1);
                }

                if (this._events.removeListener)
                    this.emit('removeListener', type, listener);
            }

            return this;
        };

        EventEmitter.prototype.removeAllListeners = function(type) {
            var key, listeners;

            if (!this._events)
                return this;

            // not listening for removeListener, no need to emit
            if (!this._events.removeListener) {
                if (arguments.length === 0)
                    this._events = {};
                else if (this._events[type])
                    delete this._events[type];
                return this;
            }

            // emit removeListener for all listeners on all events
            if (arguments.length === 0) {
                for (key in this._events) {
                    if (key === 'removeListener') continue;
                    this.removeAllListeners(key);
                }
                this.removeAllListeners('removeListener');
                this._events = {};
                return this;
            }

            listeners = this._events[type];

            if (isFunction(listeners)) {
                this.removeListener(type, listeners);
            } else if (listeners) {
                // LIFO order
                while (listeners.length)
                    this.removeListener(type, listeners[listeners.length - 1]);
            }
            delete this._events[type];

            return this;
        };

        EventEmitter.prototype.listeners = function(type) {
            var ret;
            if (!this._events || !this._events[type])
                ret = [];
            else if (isFunction(this._events[type]))
                ret = [this._events[type]];
            else
                ret = this._events[type].slice();
            return ret;
        };

        EventEmitter.prototype.listenerCount = function(type) {
            if (this._events) {
                var evlistener = this._events[type];

                if (isFunction(evlistener))
                    return 1;
                else if (evlistener)
                    return evlistener.length;
            }
            return 0;
        };

        EventEmitter.listenerCount = function(emitter, type) {
            return emitter.listenerCount(type);
        };

        function isFunction(arg) {
            return typeof arg === 'function';
        }

        function isNumber(arg) {
            return typeof arg === 'number';
        }

        function isObject(arg) {
            return typeof arg === 'object' && arg !== null;
        }

        function isUndefined(arg) {
            return arg === void 0;
        }

    },{}],"/bytetrade-js/node_modules/hash-base/index.js":[function(require,module,exports){
        'use strict'
        var Buffer = require('safe-buffer').Buffer
        var Transform = require('stream').Transform
        var inherits = require('inherits')

        function throwIfNotStringOrBuffer (val, prefix) {
            if (!Buffer.isBuffer(val) && typeof val !== 'string') {
                throw new TypeError(prefix + ' must be a string or a buffer')
            }
        }

        function HashBase (blockSize) {
            Transform.call(this)

            this._block = Buffer.allocUnsafe(blockSize)
            this._blockSize = blockSize
            this._blockOffset = 0
            this._length = [0, 0, 0, 0]

            this._finalized = false
        }

        inherits(HashBase, Transform)

        HashBase.prototype._transform = function (chunk, encoding, callback) {
            var error = null
            try {
                this.update(chunk, encoding)
            } catch (err) {
                error = err
            }

            callback(error)
        }

        HashBase.prototype._flush = function (callback) {
            var error = null
            try {
                this.push(this.digest())
            } catch (err) {
                error = err
            }

            callback(error)
        }

        HashBase.prototype.update = function (data, encoding) {
            throwIfNotStringOrBuffer(data, 'Data')
            if (this._finalized) throw new Error('Digest already called')
            if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

            // consume data
            var block = this._block
            var offset = 0
            while (this._blockOffset + data.length - offset >= this._blockSize) {
                for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
                this._update()
                this._blockOffset = 0
            }
            while (offset < data.length) block[this._blockOffset++] = data[offset++]

            // update length
            for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
                this._length[j] += carry
                carry = (this._length[j] / 0x0100000000) | 0
                if (carry > 0) this._length[j] -= 0x0100000000 * carry
            }

            return this
        }

        HashBase.prototype._update = function () {
            throw new Error('_update is not implemented')
        }

        HashBase.prototype.digest = function (encoding) {
            if (this._finalized) throw new Error('Digest already called')
            this._finalized = true

            var digest = this._digest()
            if (encoding !== undefined) digest = digest.toString(encoding)

            // reset state
            this._block.fill(0)
            this._blockOffset = 0
            for (var i = 0; i < 4; ++i) this._length[i] = 0

            return digest
        }

        HashBase.prototype._digest = function () {
            throw new Error('_digest is not implemented')
        }

        module.exports = HashBase

    },{"inherits":"/bytetrade-js/node_modules/inherits/inherits_browser.js","safe-buffer":"/bytetrade-js/node_modules/safe-buffer/index.js","stream":"/bytetrade-js/node_modules/stream-browserify/index.js"}],"/bytetrade-js/node_modules/ieee754/index.js":[function(require,module,exports){
        exports.read = function (buffer, offset, isLE, mLen, nBytes) {
            var e, m
            var eLen = (nBytes * 8) - mLen - 1
            var eMax = (1 << eLen) - 1
            var eBias = eMax >> 1
            var nBits = -7
            var i = isLE ? (nBytes - 1) : 0
            var d = isLE ? -1 : 1
            var s = buffer[offset + i]

            i += d

            e = s & ((1 << (-nBits)) - 1)
            s >>= (-nBits)
            nBits += eLen
            for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

            m = e & ((1 << (-nBits)) - 1)
            e >>= (-nBits)
            nBits += mLen
            for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

            if (e === 0) {
                e = 1 - eBias
            } else if (e === eMax) {
                return m ? NaN : ((s ? -1 : 1) * Infinity)
            } else {
                m = m + Math.pow(2, mLen)
                e = e - eBias
            }
            return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
        }

        exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
            var e, m, c
            var eLen = (nBytes * 8) - mLen - 1
            var eMax = (1 << eLen) - 1
            var eBias = eMax >> 1
            var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
            var i = isLE ? 0 : (nBytes - 1)
            var d = isLE ? 1 : -1
            var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

            value = Math.abs(value)

            if (isNaN(value) || value === Infinity) {
                m = isNaN(value) ? 1 : 0
                e = eMax
            } else {
                e = Math.floor(Math.log(value) / Math.LN2)
                if (value * (c = Math.pow(2, -e)) < 1) {
                    e--
                    c *= 2
                }
                if (e + eBias >= 1) {
                    value += rt / c
                } else {
                    value += rt * Math.pow(2, 1 - eBias)
                }
                if (value * c >= 2) {
                    e++
                    c /= 2
                }

                if (e + eBias >= eMax) {
                    m = 0
                    e = eMax
                } else if (e + eBias >= 1) {
                    m = ((value * c) - 1) * Math.pow(2, mLen)
                    e = e + eBias
                } else {
                    m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
                    e = 0
                }
            }

            for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

            e = (e << mLen) | m
            eLen += mLen
            for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

            buffer[offset + i - d] |= s * 128
        }

    },{}],"/bytetrade-js/node_modules/inherits/inherits_browser.js":[function(require,module,exports){
        if (typeof Object.create === 'function') {
            // implementation from standard node.js 'util' module
            module.exports = function inherits(ctor, superCtor) {
                ctor.super_ = superCtor
                ctor.prototype = Object.create(superCtor.prototype, {
                    constructor: {
                        value: ctor,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
            };
        } else {
            // old school shim for old browsers
            module.exports = function inherits(ctor, superCtor) {
                ctor.super_ = superCtor
                var TempCtor = function () {}
                TempCtor.prototype = superCtor.prototype
                ctor.prototype = new TempCtor()
                ctor.prototype.constructor = ctor
            }
        }

    },{}],"/bytetrade-js/node_modules/is-buffer/index.js":[function(require,module,exports){
        /*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
        module.exports = function (obj) {
            return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
        }

        function isBuffer (obj) {
            return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
        }

// For Node v0.10 support. Remove this eventually.
        function isSlowBuffer (obj) {
            return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
        }

    },{}],"/bytetrade-js/node_modules/isarray/index.js":[function(require,module,exports){
        var toString = {}.toString;

        module.exports = Array.isArray || function (arr) {
            return toString.call(arr) == '[object Array]';
        };

    },{}],"/bytetrade-js/node_modules/long/dist/long.js":[function(require,module,exports){
        /*
 Copyright 2013 Daniel Wirtz <dcode@dcode.io>
 Copyright 2009 The Closure Library Authors. All Rights Reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS-IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

        /**
         * @license long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>
         * Released under the Apache License, Version 2.0
         * see: https://github.com/dcodeIO/long.js for details
         */
        (function(global, factory) {

            /* AMD */ if (typeof define === 'function' && define["amd"])
                define([], factory);
            /* CommonJS */ else if (typeof require === 'function' && typeof module === "object" && module && module["exports"])
                module["exports"] = factory();
            /* Global */ else
                (global["dcodeIO"] = global["dcodeIO"] || {})["Long"] = factory();

        })(this, function() {
            "use strict";

            /**
             * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
             *  See the from* functions below for more convenient ways of constructing Longs.
             * @exports Long
             * @class A Long class for representing a 64 bit two's-complement integer value.
             * @param {number} low The low (signed) 32 bits of the long
             * @param {number} high The high (signed) 32 bits of the long
             * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
             * @constructor
             */
            function Long(low, high, unsigned) {

                /**
                 * The low 32 bits as a signed value.
                 * @type {number}
                 */
                this.low = low | 0;

                /**
                 * The high 32 bits as a signed value.
                 * @type {number}
                 */
                this.high = high | 0;

                /**
                 * Whether unsigned or not.
                 * @type {boolean}
                 */
                this.unsigned = !!unsigned;
            }

            // The internal representation of a long is the two given signed, 32-bit values.
            // We use 32-bit pieces because these are the size of integers on which
            // Javascript performs bit-operations.  For operations like addition and
            // multiplication, we split each number into 16 bit pieces, which can easily be
            // multiplied within Javascript's floating-point representation without overflow
            // or change in sign.
            //
            // In the algorithms below, we frequently reduce the negative case to the
            // positive case by negating the input(s) and then post-processing the result.
            // Note that we must ALWAYS check specially whether those values are MIN_VALUE
            // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
            // a positive number, it overflows back into a negative).  Not handling this
            // case would often result in infinite recursion.
            //
            // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
            // methods on which they depend.

            /**
             * An indicator used to reliably determine if an object is a Long or not.
             * @type {boolean}
             * @const
             * @private
             */
            Long.prototype.__isLong__;

            Object.defineProperty(Long.prototype, "__isLong__", {
                value: true,
                enumerable: false,
                configurable: false
            });

            /**
             * @function
             * @param {*} obj Object
             * @returns {boolean}
             * @inner
             */
            function isLong(obj) {
                return (obj && obj["__isLong__"]) === true;
            }

            /**
             * Tests if the specified object is a Long.
             * @function
             * @param {*} obj Object
             * @returns {boolean}
             */
            Long.isLong = isLong;

            /**
             * A cache of the Long representations of small integer values.
             * @type {!Object}
             * @inner
             */
            var INT_CACHE = {};

            /**
             * A cache of the Long representations of small unsigned integer values.
             * @type {!Object}
             * @inner
             */
            var UINT_CACHE = {};

            /**
             * @param {number} value
             * @param {boolean=} unsigned
             * @returns {!Long}
             * @inner
             */
            function fromInt(value, unsigned) {
                var obj, cachedObj, cache;
                if (unsigned) {
                    value >>>= 0;
                    if (cache = (0 <= value && value < 256)) {
                        cachedObj = UINT_CACHE[value];
                        if (cachedObj)
                            return cachedObj;
                    }
                    obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
                    if (cache)
                        UINT_CACHE[value] = obj;
                    return obj;
                } else {
                    value |= 0;
                    if (cache = (-128 <= value && value < 128)) {
                        cachedObj = INT_CACHE[value];
                        if (cachedObj)
                            return cachedObj;
                    }
                    obj = fromBits(value, value < 0 ? -1 : 0, false);
                    if (cache)
                        INT_CACHE[value] = obj;
                    return obj;
                }
            }

            /**
             * Returns a Long representing the given 32 bit integer value.
             * @function
             * @param {number} value The 32 bit integer in question
             * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
             * @returns {!Long} The corresponding Long value
             */
            Long.fromInt = fromInt;

            /**
             * @param {number} value
             * @param {boolean=} unsigned
             * @returns {!Long}
             * @inner
             */
            function fromNumber(value, unsigned) {
                if (isNaN(value) || !isFinite(value))
                    return unsigned ? UZERO : ZERO;
                if (unsigned) {
                    if (value < 0)
                        return UZERO;
                    if (value >= TWO_PWR_64_DBL)
                        return MAX_UNSIGNED_VALUE;
                } else {
                    if (value <= -TWO_PWR_63_DBL)
                        return MIN_VALUE;
                    if (value + 1 >= TWO_PWR_63_DBL)
                        return MAX_VALUE;
                }
                if (value < 0)
                    return fromNumber(-value, unsigned).neg();
                return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);
            }

            /**
             * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
             * @function
             * @param {number} value The number in question
             * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
             * @returns {!Long} The corresponding Long value
             */
            Long.fromNumber = fromNumber;

            /**
             * @param {number} lowBits
             * @param {number} highBits
             * @param {boolean=} unsigned
             * @returns {!Long}
             * @inner
             */
            function fromBits(lowBits, highBits, unsigned) {
                return new Long(lowBits, highBits, unsigned);
            }

            /**
             * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
             *  assumed to use 32 bits.
             * @function
             * @param {number} lowBits The low 32 bits
             * @param {number} highBits The high 32 bits
             * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
             * @returns {!Long} The corresponding Long value
             */
            Long.fromBits = fromBits;

            /**
             * @function
             * @param {number} base
             * @param {number} exponent
             * @returns {number}
             * @inner
             */
            var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)

            /**
             * @param {string} str
             * @param {(boolean|number)=} unsigned
             * @param {number=} radix
             * @returns {!Long}
             * @inner
             */
            function fromString(str, unsigned, radix) {
                if (str.length === 0)
                    throw Error('empty string');
                if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
                    return ZERO;
                if (typeof unsigned === 'number') {
                    // For goog.math.long compatibility
                    radix = unsigned,
                        unsigned = false;
                } else {
                    unsigned = !! unsigned;
                }
                radix = radix || 10;
                if (radix < 2 || 36 < radix)
                    throw RangeError('radix');

                var p;
                if ((p = str.indexOf('-')) > 0)
                    throw Error('interior hyphen');
                else if (p === 0) {
                    return fromString(str.substring(1), unsigned, radix).neg();
                }

                // Do several (8) digits each time through the loop, so as to
                // minimize the calls to the very expensive emulated div.
                var radixToPower = fromNumber(pow_dbl(radix, 8));

                var result = ZERO;
                for (var i = 0; i < str.length; i += 8) {
                    var size = Math.min(8, str.length - i),
                        value = parseInt(str.substring(i, i + size), radix);
                    if (size < 8) {
                        var power = fromNumber(pow_dbl(radix, size));
                        result = result.mul(power).add(fromNumber(value));
                    } else {
                        result = result.mul(radixToPower);
                        result = result.add(fromNumber(value));
                    }
                }
                result.unsigned = unsigned;
                return result;
            }

            /**
             * Returns a Long representation of the given string, written using the specified radix.
             * @function
             * @param {string} str The textual representation of the Long
             * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to `false` for signed
             * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
             * @returns {!Long} The corresponding Long value
             */
            Long.fromString = fromString;

            /**
             * @function
             * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
             * @returns {!Long}
             * @inner
             */
            function fromValue(val) {
                if (val /* is compatible */ instanceof Long)
                    return val;
                if (typeof val === 'number')
                    return fromNumber(val);
                if (typeof val === 'string')
                    return fromString(val);
                // Throws for non-objects, converts non-instanceof Long:
                return fromBits(val.low, val.high, val.unsigned);
            }

            /**
             * Converts the specified value to a Long.
             * @function
             * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
             * @returns {!Long}
             */
            Long.fromValue = fromValue;

            // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
            // no runtime penalty for these.

            /**
             * @type {number}
             * @const
             * @inner
             */
            var TWO_PWR_16_DBL = 1 << 16;

            /**
             * @type {number}
             * @const
             * @inner
             */
            var TWO_PWR_24_DBL = 1 << 24;

            /**
             * @type {number}
             * @const
             * @inner
             */
            var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;

            /**
             * @type {number}
             * @const
             * @inner
             */
            var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;

            /**
             * @type {number}
             * @const
             * @inner
             */
            var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;

            /**
             * @type {!Long}
             * @const
             * @inner
             */
            var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);

            /**
             * @type {!Long}
             * @inner
             */
            var ZERO = fromInt(0);

            /**
             * Signed zero.
             * @type {!Long}
             */
            Long.ZERO = ZERO;

            /**
             * @type {!Long}
             * @inner
             */
            var UZERO = fromInt(0, true);

            /**
             * Unsigned zero.
             * @type {!Long}
             */
            Long.UZERO = UZERO;

            /**
             * @type {!Long}
             * @inner
             */
            var ONE = fromInt(1);

            /**
             * Signed one.
             * @type {!Long}
             */
            Long.ONE = ONE;

            /**
             * @type {!Long}
             * @inner
             */
            var UONE = fromInt(1, true);

            /**
             * Unsigned one.
             * @type {!Long}
             */
            Long.UONE = UONE;

            /**
             * @type {!Long}
             * @inner
             */
            var NEG_ONE = fromInt(-1);

            /**
             * Signed negative one.
             * @type {!Long}
             */
            Long.NEG_ONE = NEG_ONE;

            /**
             * @type {!Long}
             * @inner
             */
            var MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);

            /**
             * Maximum signed value.
             * @type {!Long}
             */
            Long.MAX_VALUE = MAX_VALUE;

            /**
             * @type {!Long}
             * @inner
             */
            var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);

            /**
             * Maximum unsigned value.
             * @type {!Long}
             */
            Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;

            /**
             * @type {!Long}
             * @inner
             */
            var MIN_VALUE = fromBits(0, 0x80000000|0, false);

            /**
             * Minimum signed value.
             * @type {!Long}
             */
            Long.MIN_VALUE = MIN_VALUE;

            /**
             * @alias Long.prototype
             * @inner
             */
            var LongPrototype = Long.prototype;

            /**
             * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
             * @returns {number}
             */
            LongPrototype.toInt = function toInt() {
                return this.unsigned ? this.low >>> 0 : this.low;
            };

            /**
             * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
             * @returns {number}
             */
            LongPrototype.toNumber = function toNumber() {
                if (this.unsigned)
                    return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);
                return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
            };

            /**
             * Converts the Long to a string written in the specified radix.
             * @param {number=} radix Radix (2-36), defaults to 10
             * @returns {string}
             * @override
             * @throws {RangeError} If `radix` is out of range
             */
            LongPrototype.toString = function toString(radix) {
                radix = radix || 10;
                if (radix < 2 || 36 < radix)
                    throw RangeError('radix');
                if (this.isZero())
                    return '0';
                if (this.isNegative()) { // Unsigned Longs are never negative
                    if (this.eq(MIN_VALUE)) {
                        // We need to change the Long value before it can be negated, so we remove
                        // the bottom-most digit in this base and then recurse to do the rest.
                        var radixLong = fromNumber(radix),
                            div = this.div(radixLong),
                            rem1 = div.mul(radixLong).sub(this);
                        return div.toString(radix) + rem1.toInt().toString(radix);
                    } else
                        return '-' + this.neg().toString(radix);
                }

                // Do several (6) digits each time through the loop, so as to
                // minimize the calls to the very expensive emulated div.
                var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),
                    rem = this;
                var result = '';
                while (true) {
                    var remDiv = rem.div(radixToPower),
                        intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
                        digits = intval.toString(radix);
                    rem = remDiv;
                    if (rem.isZero())
                        return digits + result;
                    else {
                        while (digits.length < 6)
                            digits = '0' + digits;
                        result = '' + digits + result;
                    }
                }
            };

            /**
             * Gets the high 32 bits as a signed integer.
             * @returns {number} Signed high bits
             */
            LongPrototype.getHighBits = function getHighBits() {
                return this.high;
            };

            /**
             * Gets the high 32 bits as an unsigned integer.
             * @returns {number} Unsigned high bits
             */
            LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
                return this.high >>> 0;
            };

            /**
             * Gets the low 32 bits as a signed integer.
             * @returns {number} Signed low bits
             */
            LongPrototype.getLowBits = function getLowBits() {
                return this.low;
            };

            /**
             * Gets the low 32 bits as an unsigned integer.
             * @returns {number} Unsigned low bits
             */
            LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
                return this.low >>> 0;
            };

            /**
             * Gets the number of bits needed to represent the absolute value of this Long.
             * @returns {number}
             */
            LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
                if (this.isNegative()) // Unsigned Longs are never negative
                    return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
                var val = this.high != 0 ? this.high : this.low;
                for (var bit = 31; bit > 0; bit--)
                    if ((val & (1 << bit)) != 0)
                        break;
                return this.high != 0 ? bit + 33 : bit + 1;
            };

            /**
             * Tests if this Long's value equals zero.
             * @returns {boolean}
             */
            LongPrototype.isZero = function isZero() {
                return this.high === 0 && this.low === 0;
            };

            /**
             * Tests if this Long's value is negative.
             * @returns {boolean}
             */
            LongPrototype.isNegative = function isNegative() {
                return !this.unsigned && this.high < 0;
            };

            /**
             * Tests if this Long's value is positive.
             * @returns {boolean}
             */
            LongPrototype.isPositive = function isPositive() {
                return this.unsigned || this.high >= 0;
            };

            /**
             * Tests if this Long's value is odd.
             * @returns {boolean}
             */
            LongPrototype.isOdd = function isOdd() {
                return (this.low & 1) === 1;
            };

            /**
             * Tests if this Long's value is even.
             * @returns {boolean}
             */
            LongPrototype.isEven = function isEven() {
                return (this.low & 1) === 0;
            };

            /**
             * Tests if this Long's value equals the specified's.
             * @param {!Long|number|string} other Other value
             * @returns {boolean}
             */
            LongPrototype.equals = function equals(other) {
                if (!isLong(other))
                    other = fromValue(other);
                if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)
                    return false;
                return this.high === other.high && this.low === other.low;
            };

            /**
             * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
             * @function
             * @param {!Long|number|string} other Other value
             * @returns {boolean}
             */
            LongPrototype.eq = LongPrototype.equals;

            /**
             * Tests if this Long's value differs from the specified's.
             * @param {!Long|number|string} other Other value
             * @returns {boolean}
             */
            LongPrototype.notEquals = function notEquals(other) {
                return !this.eq(/* validates */ other);
            };

            /**
             * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
             * @function
             * @param {!Long|number|string} other Other value
             * @returns {boolean}
             */
            LongPrototype.neq = LongPrototype.notEquals;

            /**
             * Tests if this Long's value is less than the specified's.
             * @param {!Long|number|string} other Other value
             * @returns {boolean}
             */
            LongPrototype.lessThan = function lessThan(other) {
                return this.comp(/* validates */ other) < 0;
            };

            /**
             * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
             * @function
             * @param {!Long|number|string} other Other value
             * @returns {boolean}
             */
            LongPrototype.lt = LongPrototype.lessThan;

            /**
             * Tests if this Long's value is less than or equal the specified's.
             * @param {!Long|number|string} other Other value
             * @returns {boolean}
             */
            LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
                return this.comp(/* validates */ other) <= 0;
            };

            /**
             * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
             * @function
             * @param {!Long|number|string} other Other value
             * @returns {boolean}
             */
            LongPrototype.lte = LongPrototype.lessThanOrEqual;

            /**
             * Tests if this Long's value is greater than the specified's.
             * @param {!Long|number|string} other Other value
             * @returns {boolean}
             */
            LongPrototype.greaterThan = function greaterThan(other) {
                return this.comp(/* validates */ other) > 0;
            };

            /**
             * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
             * @function
             * @param {!Long|number|string} other Other value
             * @returns {boolean}
             */
            LongPrototype.gt = LongPrototype.greaterThan;

            /**
             * Tests if this Long's value is greater than or equal the specified's.
             * @param {!Long|number|string} other Other value
             * @returns {boolean}
             */
            LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
                return this.comp(/* validates */ other) >= 0;
            };

            /**
             * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
             * @function
             * @param {!Long|number|string} other Other value
             * @returns {boolean}
             */
            LongPrototype.gte = LongPrototype.greaterThanOrEqual;

            /**
             * Compares this Long's value with the specified's.
             * @param {!Long|number|string} other Other value
             * @returns {number} 0 if they are the same, 1 if the this is greater and -1
             *  if the given one is greater
             */
            LongPrototype.compare = function compare(other) {
                if (!isLong(other))
                    other = fromValue(other);
                if (this.eq(other))
                    return 0;
                var thisNeg = this.isNegative(),
                    otherNeg = other.isNegative();
                if (thisNeg && !otherNeg)
                    return -1;
                if (!thisNeg && otherNeg)
                    return 1;
                // At this point the sign bits are the same
                if (!this.unsigned)
                    return this.sub(other).isNegative() ? -1 : 1;
                // Both are positive if at least one is unsigned
                return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;
            };

            /**
             * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
             * @function
             * @param {!Long|number|string} other Other value
             * @returns {number} 0 if they are the same, 1 if the this is greater and -1
             *  if the given one is greater
             */
            LongPrototype.comp = LongPrototype.compare;

            /**
             * Negates this Long's value.
             * @returns {!Long} Negated Long
             */
            LongPrototype.negate = function negate() {
                if (!this.unsigned && this.eq(MIN_VALUE))
                    return MIN_VALUE;
                return this.not().add(ONE);
            };

            /**
             * Negates this Long's value. This is an alias of {@link Long#negate}.
             * @function
             * @returns {!Long} Negated Long
             */
            LongPrototype.neg = LongPrototype.negate;

            /**
             * Returns the sum of this and the specified Long.
             * @param {!Long|number|string} addend Addend
             * @returns {!Long} Sum
             */
            LongPrototype.add = function add(addend) {
                if (!isLong(addend))
                    addend = fromValue(addend);

                // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

                var a48 = this.high >>> 16;
                var a32 = this.high & 0xFFFF;
                var a16 = this.low >>> 16;
                var a00 = this.low & 0xFFFF;

                var b48 = addend.high >>> 16;
                var b32 = addend.high & 0xFFFF;
                var b16 = addend.low >>> 16;
                var b00 = addend.low & 0xFFFF;

                var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
                c00 += a00 + b00;
                c16 += c00 >>> 16;
                c00 &= 0xFFFF;
                c16 += a16 + b16;
                c32 += c16 >>> 16;
                c16 &= 0xFFFF;
                c32 += a32 + b32;
                c48 += c32 >>> 16;
                c32 &= 0xFFFF;
                c48 += a48 + b48;
                c48 &= 0xFFFF;
                return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
            };

            /**
             * Returns the difference of this and the specified Long.
             * @param {!Long|number|string} subtrahend Subtrahend
             * @returns {!Long} Difference
             */
            LongPrototype.subtract = function subtract(subtrahend) {
                if (!isLong(subtrahend))
                    subtrahend = fromValue(subtrahend);
                return this.add(subtrahend.neg());
            };

            /**
             * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
             * @function
             * @param {!Long|number|string} subtrahend Subtrahend
             * @returns {!Long} Difference
             */
            LongPrototype.sub = LongPrototype.subtract;

            /**
             * Returns the product of this and the specified Long.
             * @param {!Long|number|string} multiplier Multiplier
             * @returns {!Long} Product
             */
            LongPrototype.multiply = function multiply(multiplier) {
                if (this.isZero())
                    return ZERO;
                if (!isLong(multiplier))
                    multiplier = fromValue(multiplier);
                if (multiplier.isZero())
                    return ZERO;
                if (this.eq(MIN_VALUE))
                    return multiplier.isOdd() ? MIN_VALUE : ZERO;
                if (multiplier.eq(MIN_VALUE))
                    return this.isOdd() ? MIN_VALUE : ZERO;

                if (this.isNegative()) {
                    if (multiplier.isNegative())
                        return this.neg().mul(multiplier.neg());
                    else
                        return this.neg().mul(multiplier).neg();
                } else if (multiplier.isNegative())
                    return this.mul(multiplier.neg()).neg();

                // If both longs are small, use float multiplication
                if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
                    return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);

                // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
                // We can skip products that would overflow.

                var a48 = this.high >>> 16;
                var a32 = this.high & 0xFFFF;
                var a16 = this.low >>> 16;
                var a00 = this.low & 0xFFFF;

                var b48 = multiplier.high >>> 16;
                var b32 = multiplier.high & 0xFFFF;
                var b16 = multiplier.low >>> 16;
                var b00 = multiplier.low & 0xFFFF;

                var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
                c00 += a00 * b00;
                c16 += c00 >>> 16;
                c00 &= 0xFFFF;
                c16 += a16 * b00;
                c32 += c16 >>> 16;
                c16 &= 0xFFFF;
                c16 += a00 * b16;
                c32 += c16 >>> 16;
                c16 &= 0xFFFF;
                c32 += a32 * b00;
                c48 += c32 >>> 16;
                c32 &= 0xFFFF;
                c32 += a16 * b16;
                c48 += c32 >>> 16;
                c32 &= 0xFFFF;
                c32 += a00 * b32;
                c48 += c32 >>> 16;
                c32 &= 0xFFFF;
                c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
                c48 &= 0xFFFF;
                return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
            };

            /**
             * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
             * @function
             * @param {!Long|number|string} multiplier Multiplier
             * @returns {!Long} Product
             */
            LongPrototype.mul = LongPrototype.multiply;

            /**
             * Returns this Long divided by the specified. The result is signed if this Long is signed or
             *  unsigned if this Long is unsigned.
             * @param {!Long|number|string} divisor Divisor
             * @returns {!Long} Quotient
             */
            LongPrototype.divide = function divide(divisor) {
                if (!isLong(divisor))
                    divisor = fromValue(divisor);
                if (divisor.isZero())
                    throw Error('division by zero');
                if (this.isZero())
                    return this.unsigned ? UZERO : ZERO;
                var approx, rem, res;
                if (!this.unsigned) {
                    // This section is only relevant for signed longs and is derived from the
                    // closure library as a whole.
                    if (this.eq(MIN_VALUE)) {
                        if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
                            return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
                        else if (divisor.eq(MIN_VALUE))
                            return ONE;
                        else {
                            // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                            var halfThis = this.shr(1);
                            approx = halfThis.div(divisor).shl(1);
                            if (approx.eq(ZERO)) {
                                return divisor.isNegative() ? ONE : NEG_ONE;
                            } else {
                                rem = this.sub(divisor.mul(approx));
                                res = approx.add(rem.div(divisor));
                                return res;
                            }
                        }
                    } else if (divisor.eq(MIN_VALUE))
                        return this.unsigned ? UZERO : ZERO;
                    if (this.isNegative()) {
                        if (divisor.isNegative())
                            return this.neg().div(divisor.neg());
                        return this.neg().div(divisor).neg();
                    } else if (divisor.isNegative())
                        return this.div(divisor.neg()).neg();
                    res = ZERO;
                } else {
                    // The algorithm below has not been made for unsigned longs. It's therefore
                    // required to take special care of the MSB prior to running it.
                    if (!divisor.unsigned)
                        divisor = divisor.toUnsigned();
                    if (divisor.gt(this))
                        return UZERO;
                    if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
                        return UONE;
                    res = UZERO;
                }

                // Repeat the following until the remainder is less than other:  find a
                // floating-point that approximates remainder / other *from below*, add this
                // into the result, and subtract it from the remainder.  It is critical that
                // the approximate value is less than or equal to the real value so that the
                // remainder never becomes negative.
                rem = this;
                while (rem.gte(divisor)) {
                    // Approximate the result of division. This may be a little greater or
                    // smaller than the actual value.
                    approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));

                    // We will tweak the approximate result by changing it in the 48-th digit or
                    // the smallest non-fractional digit, whichever is larger.
                    var log2 = Math.ceil(Math.log(approx) / Math.LN2),
                        delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),

                        // Decrease the approximation until it is smaller than the remainder.  Note
                        // that if it is too large, the product overflows and is negative.
                        approxRes = fromNumber(approx),
                        approxRem = approxRes.mul(divisor);
                    while (approxRem.isNegative() || approxRem.gt(rem)) {
                        approx -= delta;
                        approxRes = fromNumber(approx, this.unsigned);
                        approxRem = approxRes.mul(divisor);
                    }

                    // We know the answer can't be zero... and actually, zero would cause
                    // infinite recursion since we would make no progress.
                    if (approxRes.isZero())
                        approxRes = ONE;

                    res = res.add(approxRes);
                    rem = rem.sub(approxRem);
                }
                return res;
            };

            /**
             * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
             * @function
             * @param {!Long|number|string} divisor Divisor
             * @returns {!Long} Quotient
             */
            LongPrototype.div = LongPrototype.divide;

            /**
             * Returns this Long modulo the specified.
             * @param {!Long|number|string} divisor Divisor
             * @returns {!Long} Remainder
             */
            LongPrototype.modulo = function modulo(divisor) {
                if (!isLong(divisor))
                    divisor = fromValue(divisor);
                return this.sub(this.div(divisor).mul(divisor));
            };

            /**
             * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
             * @function
             * @param {!Long|number|string} divisor Divisor
             * @returns {!Long} Remainder
             */
            LongPrototype.mod = LongPrototype.modulo;

            /**
             * Returns the bitwise NOT of this Long.
             * @returns {!Long}
             */
            LongPrototype.not = function not() {
                return fromBits(~this.low, ~this.high, this.unsigned);
            };

            /**
             * Returns the bitwise AND of this Long and the specified.
             * @param {!Long|number|string} other Other Long
             * @returns {!Long}
             */
            LongPrototype.and = function and(other) {
                if (!isLong(other))
                    other = fromValue(other);
                return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
            };

            /**
             * Returns the bitwise OR of this Long and the specified.
             * @param {!Long|number|string} other Other Long
             * @returns {!Long}
             */
            LongPrototype.or = function or(other) {
                if (!isLong(other))
                    other = fromValue(other);
                return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
            };

            /**
             * Returns the bitwise XOR of this Long and the given one.
             * @param {!Long|number|string} other Other Long
             * @returns {!Long}
             */
            LongPrototype.xor = function xor(other) {
                if (!isLong(other))
                    other = fromValue(other);
                return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
            };

            /**
             * Returns this Long with bits shifted to the left by the given amount.
             * @param {number|!Long} numBits Number of bits
             * @returns {!Long} Shifted Long
             */
            LongPrototype.shiftLeft = function shiftLeft(numBits) {
                if (isLong(numBits))
                    numBits = numBits.toInt();
                if ((numBits &= 63) === 0)
                    return this;
                else if (numBits < 32)
                    return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);
                else
                    return fromBits(0, this.low << (numBits - 32), this.unsigned);
            };

            /**
             * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
             * @function
             * @param {number|!Long} numBits Number of bits
             * @returns {!Long} Shifted Long
             */
            LongPrototype.shl = LongPrototype.shiftLeft;

            /**
             * Returns this Long with bits arithmetically shifted to the right by the given amount.
             * @param {number|!Long} numBits Number of bits
             * @returns {!Long} Shifted Long
             */
            LongPrototype.shiftRight = function shiftRight(numBits) {
                if (isLong(numBits))
                    numBits = numBits.toInt();
                if ((numBits &= 63) === 0)
                    return this;
                else if (numBits < 32)
                    return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);
                else
                    return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);
            };

            /**
             * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
             * @function
             * @param {number|!Long} numBits Number of bits
             * @returns {!Long} Shifted Long
             */
            LongPrototype.shr = LongPrototype.shiftRight;

            /**
             * Returns this Long with bits logically shifted to the right by the given amount.
             * @param {number|!Long} numBits Number of bits
             * @returns {!Long} Shifted Long
             */
            LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
                if (isLong(numBits))
                    numBits = numBits.toInt();
                numBits &= 63;
                if (numBits === 0)
                    return this;
                else {
                    var high = this.high;
                    if (numBits < 32) {
                        var low = this.low;
                        return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);
                    } else if (numBits === 32)
                        return fromBits(high, 0, this.unsigned);
                    else
                        return fromBits(high >>> (numBits - 32), 0, this.unsigned);
                }
            };

            /**
             * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
             * @function
             * @param {number|!Long} numBits Number of bits
             * @returns {!Long} Shifted Long
             */
            LongPrototype.shru = LongPrototype.shiftRightUnsigned;

            /**
             * Converts this Long to signed.
             * @returns {!Long} Signed long
             */
            LongPrototype.toSigned = function toSigned() {
                if (!this.unsigned)
                    return this;
                return fromBits(this.low, this.high, false);
            };

            /**
             * Converts this Long to unsigned.
             * @returns {!Long} Unsigned long
             */
            LongPrototype.toUnsigned = function toUnsigned() {
                if (this.unsigned)
                    return this;
                return fromBits(this.low, this.high, true);
            };

            /**
             * Converts this Long to its byte representation.
             * @param {boolean=} le Whether little or big endian, defaults to big endian
             * @returns {!Array.<number>} Byte representation
             */
            LongPrototype.toBytes = function(le) {
                return le ? this.toBytesLE() : this.toBytesBE();
            }

            /**
             * Converts this Long to its little endian byte representation.
             * @returns {!Array.<number>} Little endian byte representation
             */
            LongPrototype.toBytesLE = function() {
                var hi = this.high,
                    lo = this.low;
                return [
                    lo         & 0xff,
                    (lo >>>  8) & 0xff,
                    (lo >>> 16) & 0xff,
                    (lo >>> 24) & 0xff,
                    hi         & 0xff,
                    (hi >>>  8) & 0xff,
                    (hi >>> 16) & 0xff,
                    (hi >>> 24) & 0xff
                ];
            }

            /**
             * Converts this Long to its big endian byte representation.
             * @returns {!Array.<number>} Big endian byte representation
             */
            LongPrototype.toBytesBE = function() {
                var hi = this.high,
                    lo = this.low;
                return [
                    (hi >>> 24) & 0xff,
                    (hi >>> 16) & 0xff,
                    (hi >>>  8) & 0xff,
                    hi         & 0xff,
                    (lo >>> 24) & 0xff,
                    (lo >>> 16) & 0xff,
                    (lo >>>  8) & 0xff,
                    lo         & 0xff
                ];
            }

            return Long;
        });

    },{}],"/bytetrade-js/node_modules/md5.js/index.js":[function(require,module,exports){
        (function (Buffer){
            'use strict'
            var inherits = require('inherits')
            var HashBase = require('hash-base')

            var ARRAY16 = new Array(16)

            function MD5 () {
                HashBase.call(this, 64)

                // state
                this._a = 0x67452301
                this._b = 0xefcdab89
                this._c = 0x98badcfe
                this._d = 0x10325476
            }

            inherits(MD5, HashBase)

            MD5.prototype._update = function () {
                var M = ARRAY16
                for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

                var a = this._a
                var b = this._b
                var c = this._c
                var d = this._d

                a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
                d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
                c = fnF(c, d, a, b, M[2], 0x242070db, 17)
                b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
                a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
                d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
                c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
                b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
                a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
                d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
                c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
                b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
                a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
                d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
                c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
                b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

                a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
                d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
                c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
                b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
                a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
                d = fnG(d, a, b, c, M[10], 0x02441453, 9)
                c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
                b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
                a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
                d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
                c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
                b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
                a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
                d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
                c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
                b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

                a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
                d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
                c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
                b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
                a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
                d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
                c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
                b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
                a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
                d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
                c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
                b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
                a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
                d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
                c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
                b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

                a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
                d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
                c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
                b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
                a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
                d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
                c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
                b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
                a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
                d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
                c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
                b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
                a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
                d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
                c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
                b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

                this._a = (this._a + a) | 0
                this._b = (this._b + b) | 0
                this._c = (this._c + c) | 0
                this._d = (this._d + d) | 0
            }

            MD5.prototype._digest = function () {
                // create padding and handle blocks
                this._block[this._blockOffset++] = 0x80
                if (this._blockOffset > 56) {
                    this._block.fill(0, this._blockOffset, 64)
                    this._update()
                    this._blockOffset = 0
                }

                this._block.fill(0, this._blockOffset, 56)
                this._block.writeUInt32LE(this._length[0], 56)
                this._block.writeUInt32LE(this._length[1], 60)
                this._update()

                // produce result
                var buffer = new Buffer(16)
                buffer.writeInt32LE(this._a, 0)
                buffer.writeInt32LE(this._b, 4)
                buffer.writeInt32LE(this._c, 8)
                buffer.writeInt32LE(this._d, 12)
                return buffer
            }

            function rotl (x, n) {
                return (x << n) | (x >>> (32 - n))
            }

            function fnF (a, b, c, d, m, k, s) {
                return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
            }

            function fnG (a, b, c, d, m, k, s) {
                return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
            }

            function fnH (a, b, c, d, m, k, s) {
                return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
            }

            function fnI (a, b, c, d, m, k, s) {
                return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
            }

            module.exports = MD5

        }).call(this,require("buffer").Buffer)

    },{"buffer":"/bytetrade-js/node_modules/buffer/index.js","hash-base":"/bytetrade-js/node_modules/hash-base/index.js","inherits":"/bytetrade-js/node_modules/inherits/inherits_browser.js"}],"/bytetrade-js/node_modules/pbkdf2/browser.js":[function(require,module,exports){
        exports.pbkdf2 = require('./lib/async')
        exports.pbkdf2Sync = require('./lib/sync')

    },{"./lib/async":"/bytetrade-js/node_modules/pbkdf2/lib/async.js","./lib/sync":"/bytetrade-js/node_modules/pbkdf2/lib/sync-browser.js"}],"/bytetrade-js/node_modules/pbkdf2/lib/async.js":[function(require,module,exports){
        (function (process,global){
            var checkParameters = require('./precondition')
            var defaultEncoding = require('./default-encoding')
            var sync = require('./sync')
            var Buffer = require('safe-buffer').Buffer

            var ZERO_BUF
            var subtle = global.crypto && global.crypto.subtle
            var toBrowser = {
                'sha': 'SHA-1',
                'sha-1': 'SHA-1',
                'sha1': 'SHA-1',
                'sha256': 'SHA-256',
                'sha-256': 'SHA-256',
                'sha384': 'SHA-384',
                'sha-384': 'SHA-384',
                'sha-512': 'SHA-512',
                'sha512': 'SHA-512'
            }
            var checks = []
            function checkNative (algo) {
                if (global.process && !global.process.browser) {
                    return Promise.resolve(false)
                }
                if (!subtle || !subtle.importKey || !subtle.deriveBits) {
                    return Promise.resolve(false)
                }
                if (checks[algo] !== undefined) {
                    return checks[algo]
                }
                ZERO_BUF = ZERO_BUF || Buffer.alloc(8)
                var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
                    .then(function () {
                        return true
                    }).catch(function () {
                        return false
                    })
                checks[algo] = prom
                return prom
            }

            function browserPbkdf2 (password, salt, iterations, length, algo) {
                return subtle.importKey(
                    'raw', password, {name: 'PBKDF2'}, false, ['deriveBits']
                ).then(function (key) {
                    return subtle.deriveBits({
                        name: 'PBKDF2',
                        salt: salt,
                        iterations: iterations,
                        hash: {
                            name: algo
                        }
                    }, key, length << 3)
                }).then(function (res) {
                    return Buffer.from(res)
                })
            }

            function resolvePromise (promise, callback) {
                promise.then(function (out) {
                    process.nextTick(function () {
                        callback(null, out)
                    })
                }, function (e) {
                    process.nextTick(function () {
                        callback(e)
                    })
                })
            }
            module.exports = function (password, salt, iterations, keylen, digest, callback) {
                if (typeof digest === 'function') {
                    callback = digest
                    digest = undefined
                }

                digest = digest || 'sha1'
                var algo = toBrowser[digest.toLowerCase()]

                if (!algo || typeof global.Promise !== 'function') {
                    return process.nextTick(function () {
                        var out
                        try {
                            out = sync(password, salt, iterations, keylen, digest)
                        } catch (e) {
                            return callback(e)
                        }
                        callback(null, out)
                    })
                }

                checkParameters(password, salt, iterations, keylen)
                if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')
                if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
                if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

                resolvePromise(checkNative(algo).then(function (resp) {
                    if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)

                    return sync(password, salt, iterations, keylen, digest)
                }), callback)
            }

        }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

    },{"./default-encoding":"/bytetrade-js/node_modules/pbkdf2/lib/default-encoding.js","./precondition":"/bytetrade-js/node_modules/pbkdf2/lib/precondition.js","./sync":"/bytetrade-js/node_modules/pbkdf2/lib/sync-browser.js","_process":"/bytetrade-js/node_modules/process/browser.js","safe-buffer":"/bytetrade-js/node_modules/safe-buffer/index.js"}],"/bytetrade-js/node_modules/pbkdf2/lib/default-encoding.js":[function(require,module,exports){
        (function (process){
            var defaultEncoding
            /* istanbul ignore next */
            if (process.browser) {
                defaultEncoding = 'utf-8'
            } else {
                var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)

                defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
            }
            module.exports = defaultEncoding

        }).call(this,require('_process'))

    },{"_process":"/bytetrade-js/node_modules/process/browser.js"}],"/bytetrade-js/node_modules/pbkdf2/lib/precondition.js":[function(require,module,exports){
        (function (Buffer){
            var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

            function checkBuffer (buf, name) {
                if (typeof buf !== 'string' && !Buffer.isBuffer(buf)) {
                    throw new TypeError(name + ' must be a buffer or string')
                }
            }

            module.exports = function (password, salt, iterations, keylen) {
                checkBuffer(password, 'Password')
                checkBuffer(salt, 'Salt')

                if (typeof iterations !== 'number') {
                    throw new TypeError('Iterations not a number')
                }

                if (iterations < 0) {
                    throw new TypeError('Bad iterations')
                }

                if (typeof keylen !== 'number') {
                    throw new TypeError('Key length not a number')
                }

                if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
                    throw new TypeError('Bad key length')
                }
            }

        }).call(this,{"isBuffer":require("../../is-buffer/index.js")})

    },{"../../is-buffer/index.js":"/bytetrade-js/node_modules/is-buffer/index.js"}],"/bytetrade-js/node_modules/pbkdf2/lib/sync-browser.js":[function(require,module,exports){
        var md5 = require('create-hash/md5')
        var rmd160 = require('ripemd160')
        var sha = require('sha.js')

        var checkParameters = require('./precondition')
        var defaultEncoding = require('./default-encoding')
        var Buffer = require('safe-buffer').Buffer
        var ZEROS = Buffer.alloc(128)
        var sizes = {
            md5: 16,
            sha1: 20,
            sha224: 28,
            sha256: 32,
            sha384: 48,
            sha512: 64,
            rmd160: 20,
            ripemd160: 20
        }

        function Hmac (alg, key, saltLen) {
            var hash = getDigest(alg)
            var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

            if (key.length > blocksize) {
                key = hash(key)
            } else if (key.length < blocksize) {
                key = Buffer.concat([key, ZEROS], blocksize)
            }

            var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])
            var opad = Buffer.allocUnsafe(blocksize + sizes[alg])
            for (var i = 0; i < blocksize; i++) {
                ipad[i] = key[i] ^ 0x36
                opad[i] = key[i] ^ 0x5C
            }

            var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)
            ipad.copy(ipad1, 0, 0, blocksize)
            this.ipad1 = ipad1
            this.ipad2 = ipad
            this.opad = opad
            this.alg = alg
            this.blocksize = blocksize
            this.hash = hash
            this.size = sizes[alg]
        }

        Hmac.prototype.run = function (data, ipad) {
            data.copy(ipad, this.blocksize)
            var h = this.hash(ipad)
            h.copy(this.opad, this.blocksize)
            return this.hash(this.opad)
        }

        function getDigest (alg) {
            function shaFunc (data) {
                return sha(alg).update(data).digest()
            }

            if (alg === 'rmd160' || alg === 'ripemd160') return rmd160
            if (alg === 'md5') return md5
            return shaFunc
        }

        function pbkdf2 (password, salt, iterations, keylen, digest) {
            checkParameters(password, salt, iterations, keylen)

            if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
            if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

            digest = digest || 'sha1'

            var hmac = new Hmac(digest, password, salt.length)

            var DK = Buffer.allocUnsafe(keylen)
            var block1 = Buffer.allocUnsafe(salt.length + 4)
            salt.copy(block1, 0, 0, salt.length)

            var destPos = 0
            var hLen = sizes[digest]
            var l = Math.ceil(keylen / hLen)

            for (var i = 1; i <= l; i++) {
                block1.writeUInt32BE(i, salt.length)

                var T = hmac.run(block1, hmac.ipad1)
                var U = T

                for (var j = 1; j < iterations; j++) {
                    U = hmac.run(U, hmac.ipad2)
                    for (var k = 0; k < hLen; k++) T[k] ^= U[k]
                }

                T.copy(DK, destPos)
                destPos += hLen
            }

            return DK
        }

        module.exports = pbkdf2

    },{"./default-encoding":"/bytetrade-js/node_modules/pbkdf2/lib/default-encoding.js","./precondition":"/bytetrade-js/node_modules/pbkdf2/lib/precondition.js","create-hash/md5":"/bytetrade-js/node_modules/create-hash/md5.js","ripemd160":"/bytetrade-js/node_modules/ripemd160/index.js","safe-buffer":"/bytetrade-js/node_modules/safe-buffer/index.js","sha.js":"/bytetrade-js/node_modules/sha.js/index.js"}],"/bytetrade-js/node_modules/process-nextick-args/index.js":[function(require,module,exports){
        (function (process){
            'use strict';

            if (!process.version ||
                process.version.indexOf('v0.') === 0 ||
                process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
                module.exports = { nextTick: nextTick };
            } else {
                module.exports = process
            }

            function nextTick(fn, arg1, arg2, arg3) {
                if (typeof fn !== 'function') {
                    throw new TypeError('"callback" argument must be a function');
                }
                var len = arguments.length;
                var args, i;
                switch (len) {
                    case 0:
                    case 1:
                        return process.nextTick(fn);
                    case 2:
                        return process.nextTick(function afterTickOne() {
                            fn.call(null, arg1);
                        });
                    case 3:
                        return process.nextTick(function afterTickTwo() {
                            fn.call(null, arg1, arg2);
                        });
                    case 4:
                        return process.nextTick(function afterTickThree() {
                            fn.call(null, arg1, arg2, arg3);
                        });
                    default:
                        args = new Array(len - 1);
                        i = 0;
                        while (i < args.length) {
                            args[i++] = arguments[i];
                        }
                        return process.nextTick(function afterTick() {
                            fn.apply(null, args);
                        });
                }
            }


        }).call(this,require('_process'))

    },{"_process":"/bytetrade-js/node_modules/process/browser.js"}],"/bytetrade-js/node_modules/process/browser.js":[function(require,module,exports){
// shim for using process in browser
        var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

        var cachedSetTimeout;
        var cachedClearTimeout;

        function defaultSetTimout() {
            throw new Error('setTimeout has not been defined');
        }
        function defaultClearTimeout () {
            throw new Error('clearTimeout has not been defined');
        }
        (function () {
            try {
                if (typeof setTimeout === 'function') {
                    cachedSetTimeout = setTimeout;
                } else {
                    cachedSetTimeout = defaultSetTimout;
                }
            } catch (e) {
                cachedSetTimeout = defaultSetTimout;
            }
            try {
                if (typeof clearTimeout === 'function') {
                    cachedClearTimeout = clearTimeout;
                } else {
                    cachedClearTimeout = defaultClearTimeout;
                }
            } catch (e) {
                cachedClearTimeout = defaultClearTimeout;
            }
        } ())
        function runTimeout(fun) {
            if (cachedSetTimeout === setTimeout) {
                //normal enviroments in sane situations
                return setTimeout(fun, 0);
            }
            // if setTimeout wasn't available but was latter defined
            if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                cachedSetTimeout = setTimeout;
                return setTimeout(fun, 0);
            }
            try {
                // when when somebody has screwed with setTimeout but no I.E. maddness
                return cachedSetTimeout(fun, 0);
            } catch(e){
                try {
                    // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                    return cachedSetTimeout.call(null, fun, 0);
                } catch(e){
                    // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                    return cachedSetTimeout.call(this, fun, 0);
                }
            }


        }
        function runClearTimeout(marker) {
            if (cachedClearTimeout === clearTimeout) {
                //normal enviroments in sane situations
                return clearTimeout(marker);
            }
            // if clearTimeout wasn't available but was latter defined
            if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                cachedClearTimeout = clearTimeout;
                return clearTimeout(marker);
            }
            try {
                // when when somebody has screwed with setTimeout but no I.E. maddness
                return cachedClearTimeout(marker);
            } catch (e){
                try {
                    // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                    return cachedClearTimeout.call(null, marker);
                } catch (e){
                    // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                    // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                    return cachedClearTimeout.call(this, marker);
                }
            }



        }
        var queue = [];
        var draining = false;
        var currentQueue;
        var queueIndex = -1;

        function cleanUpNextTick() {
            if (!draining || !currentQueue) {
                return;
            }
            draining = false;
            if (currentQueue.length) {
                queue = currentQueue.concat(queue);
            } else {
                queueIndex = -1;
            }
            if (queue.length) {
                drainQueue();
            }
        }

        function drainQueue() {
            if (draining) {
                return;
            }
            var timeout = runTimeout(cleanUpNextTick);
            draining = true;

            var len = queue.length;
            while(len) {
                currentQueue = queue;
                queue = [];
                while (++queueIndex < len) {
                    if (currentQueue) {
                        currentQueue[queueIndex].run();
                    }
                }
                queueIndex = -1;
                len = queue.length;
            }
            currentQueue = null;
            draining = false;
            runClearTimeout(timeout);
        }

        process.nextTick = function (fun) {
            var args = new Array(arguments.length - 1);
            if (arguments.length > 1) {
                for (var i = 1; i < arguments.length; i++) {
                    args[i - 1] = arguments[i];
                }
            }
            queue.push(new Item(fun, args));
            if (queue.length === 1 && !draining) {
                runTimeout(drainQueue);
            }
        };

// v8 likes predictible objects
        function Item(fun, array) {
            this.fun = fun;
            this.array = array;
        }
        Item.prototype.run = function () {
            this.fun.apply(null, this.array);
        };
        process.title = 'browser';
        process.browser = true;
        process.env = {};
        process.argv = [];
        process.version = ''; // empty string to avoid regexp issues
        process.versions = {};

        function noop() {}

        process.on = noop;
        process.addListener = noop;
        process.once = noop;
        process.off = noop;
        process.removeListener = noop;
        process.removeAllListeners = noop;
        process.emit = noop;
        process.prependListener = noop;
        process.prependOnceListener = noop;

        process.listeners = function (name) { return [] }

        process.binding = function (name) {
            throw new Error('process.binding is not supported');
        };

        process.cwd = function () { return '/' };
        process.chdir = function (dir) {
            throw new Error('process.chdir is not supported');
        };
        process.umask = function() { return 0; };

    },{}],"/bytetrade-js/node_modules/randombytes/browser.js":[function(require,module,exports){
        (function (process,global){
            'use strict'

            function oldBrowser () {
                throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
            }

            var Buffer = require('safe-buffer').Buffer
            var crypto = global.crypto || global.msCrypto

            if (crypto && crypto.getRandomValues) {
                module.exports = randomBytes
            } else {
                module.exports = oldBrowser
            }

            function randomBytes (size, cb) {
                // phantomjs needs to throw
                if (size > 65536) throw new Error('requested too many random bytes')
                // in case browserify  isn't using the Uint8Array version
                var rawBytes = new global.Uint8Array(size)

                // This will not work in older browsers.
                // See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
                if (size > 0) {  // getRandomValues fails on IE if size == 0
                    crypto.getRandomValues(rawBytes)
                }

                // XXX: phantomjs doesn't like a buffer being passed here
                var bytes = Buffer.from(rawBytes.buffer)

                if (typeof cb === 'function') {
                    return process.nextTick(function () {
                        cb(null, bytes)
                    })
                }

                return bytes
            }

        }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

    },{"_process":"/bytetrade-js/node_modules/process/browser.js","safe-buffer":"/bytetrade-js/node_modules/safe-buffer/index.js"}],"/bytetrade-js/node_modules/readable-stream/duplex-browser.js":[function(require,module,exports){
        module.exports = require('./lib/_stream_duplex.js');

    },{"./lib/_stream_duplex.js":"/bytetrade-js/node_modules/readable-stream/lib/_stream_duplex.js"}],"/bytetrade-js/node_modules/readable-stream/lib/_stream_duplex.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

        'use strict';

        /*<replacement>*/

        var pna = require('process-nextick-args');
        /*</replacement>*/

        /*<replacement>*/
        var objectKeys = Object.keys || function (obj) {
            var keys = [];
            for (var key in obj) {
                keys.push(key);
            }return keys;
        };
        /*</replacement>*/

        module.exports = Duplex;

        /*<replacement>*/
        var util = require('core-util-is');
        util.inherits = require('inherits');
        /*</replacement>*/

        var Readable = require('./_stream_readable');
        var Writable = require('./_stream_writable');

        util.inherits(Duplex, Readable);

        {
            // avoid scope creep, the keys array can then be collected
            var keys = objectKeys(Writable.prototype);
            for (var v = 0; v < keys.length; v++) {
                var method = keys[v];
                if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
            }
        }

        function Duplex(options) {
            if (!(this instanceof Duplex)) return new Duplex(options);

            Readable.call(this, options);
            Writable.call(this, options);

            if (options && options.readable === false) this.readable = false;

            if (options && options.writable === false) this.writable = false;

            this.allowHalfOpen = true;
            if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

            this.once('end', onend);
        }

        Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
            // making it explicit this property is not enumerable
            // because otherwise some prototype manipulation in
            // userland will fail
            enumerable: false,
            get: function () {
                return this._writableState.highWaterMark;
            }
        });

// the no-half-open enforcer
        function onend() {
            // if we allow half-open state, or if the writable side ended,
            // then we're ok.
            if (this.allowHalfOpen || this._writableState.ended) return;

            // no more data can be written.
            // But allow more writes to happen in this tick.
            pna.nextTick(onEndNT, this);
        }

        function onEndNT(self) {
            self.end();
        }

        Object.defineProperty(Duplex.prototype, 'destroyed', {
            get: function () {
                if (this._readableState === undefined || this._writableState === undefined) {
                    return false;
                }
                return this._readableState.destroyed && this._writableState.destroyed;
            },
            set: function (value) {
                // we ignore the value if the stream
                // has not been initialized yet
                if (this._readableState === undefined || this._writableState === undefined) {
                    return;
                }

                // backward compatibility, the user is explicitly
                // managing destroyed
                this._readableState.destroyed = value;
                this._writableState.destroyed = value;
            }
        });

        Duplex.prototype._destroy = function (err, cb) {
            this.push(null);
            this.end();

            pna.nextTick(cb, err);
        };
    },{"./_stream_readable":"/bytetrade-js/node_modules/readable-stream/lib/_stream_readable.js","./_stream_writable":"/bytetrade-js/node_modules/readable-stream/lib/_stream_writable.js","core-util-is":"/bytetrade-js/node_modules/core-util-is/lib/util.js","inherits":"/bytetrade-js/node_modules/inherits/inherits_browser.js","process-nextick-args":"/bytetrade-js/node_modules/process-nextick-args/index.js"}],"/bytetrade-js/node_modules/readable-stream/lib/_stream_passthrough.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

        'use strict';

        module.exports = PassThrough;

        var Transform = require('./_stream_transform');

        /*<replacement>*/
        var util = require('core-util-is');
        util.inherits = require('inherits');
        /*</replacement>*/

        util.inherits(PassThrough, Transform);

        function PassThrough(options) {
            if (!(this instanceof PassThrough)) return new PassThrough(options);

            Transform.call(this, options);
        }

        PassThrough.prototype._transform = function (chunk, encoding, cb) {
            cb(null, chunk);
        };
    },{"./_stream_transform":"/bytetrade-js/node_modules/readable-stream/lib/_stream_transform.js","core-util-is":"/bytetrade-js/node_modules/core-util-is/lib/util.js","inherits":"/bytetrade-js/node_modules/inherits/inherits_browser.js"}],"/bytetrade-js/node_modules/readable-stream/lib/_stream_readable.js":[function(require,module,exports){
        (function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

            'use strict';

            /*<replacement>*/

            var pna = require('process-nextick-args');
            /*</replacement>*/

            module.exports = Readable;

            /*<replacement>*/
            var isArray = require('isarray');
            /*</replacement>*/

            /*<replacement>*/
            var Duplex;
            /*</replacement>*/

            Readable.ReadableState = ReadableState;

            /*<replacement>*/
            var EE = require('events').EventEmitter;

            var EElistenerCount = function (emitter, type) {
                return emitter.listeners(type).length;
            };
            /*</replacement>*/

            /*<replacement>*/
            var Stream = require('./internal/streams/stream');
            /*</replacement>*/

            /*<replacement>*/

            var Buffer = require('safe-buffer').Buffer;
            var OurUint8Array = global.Uint8Array || function () {};
            function _uint8ArrayToBuffer(chunk) {
                return Buffer.from(chunk);
            }
            function _isUint8Array(obj) {
                return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
            }

            /*</replacement>*/

            /*<replacement>*/
            var util = require('core-util-is');
            util.inherits = require('inherits');
            /*</replacement>*/

            /*<replacement>*/
            var debugUtil = require('util');
            var debug = void 0;
            if (debugUtil && debugUtil.debuglog) {
                debug = debugUtil.debuglog('stream');
            } else {
                debug = function () {};
            }
            /*</replacement>*/

            var BufferList = require('./internal/streams/BufferList');
            var destroyImpl = require('./internal/streams/destroy');
            var StringDecoder;

            util.inherits(Readable, Stream);

            var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

            function prependListener(emitter, event, fn) {
                // Sadly this is not cacheable as some libraries bundle their own
                // event emitter implementation with them.
                if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

                // This is a hack to make sure that our error handler is attached before any
                // userland ones.  NEVER DO THIS. This is here only because this code needs
                // to continue to work with older versions of Node.js that do not include
                // the prependListener() method. The goal is to eventually remove this hack.
                if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
            }

            function ReadableState(options, stream) {
                Duplex = Duplex || require('./_stream_duplex');

                options = options || {};

                // Duplex streams are both readable and writable, but share
                // the same options object.
                // However, some cases require setting options to different
                // values for the readable and the writable sides of the duplex stream.
                // These options can be provided separately as readableXXX and writableXXX.
                var isDuplex = stream instanceof Duplex;

                // object stream flag. Used to make read(n) ignore n and to
                // make all the buffer merging and length checks go away
                this.objectMode = !!options.objectMode;

                if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

                // the point at which it stops calling _read() to fill the buffer
                // Note: 0 is a valid value, means "don't call _read preemptively ever"
                var hwm = options.highWaterMark;
                var readableHwm = options.readableHighWaterMark;
                var defaultHwm = this.objectMode ? 16 : 16 * 1024;

                if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

                // cast to ints.
                this.highWaterMark = Math.floor(this.highWaterMark);

                // A linked list is used to store data chunks instead of an array because the
                // linked list can remove elements from the beginning faster than
                // array.shift()
                this.buffer = new BufferList();
                this.length = 0;
                this.pipes = null;
                this.pipesCount = 0;
                this.flowing = null;
                this.ended = false;
                this.endEmitted = false;
                this.reading = false;

                // a flag to be able to tell if the event 'readable'/'data' is emitted
                // immediately, or on a later tick.  We set this to true at first, because
                // any actions that shouldn't happen until "later" should generally also
                // not happen before the first read call.
                this.sync = true;

                // whenever we return null, then we set a flag to say
                // that we're awaiting a 'readable' event emission.
                this.needReadable = false;
                this.emittedReadable = false;
                this.readableListening = false;
                this.resumeScheduled = false;

                // has it been destroyed
                this.destroyed = false;

                // Crypto is kind of old and crusty.  Historically, its default string
                // encoding is 'binary' so we have to make this configurable.
                // Everything else in the universe uses 'utf8', though.
                this.defaultEncoding = options.defaultEncoding || 'utf8';

                // the number of writers that are awaiting a drain event in .pipe()s
                this.awaitDrain = 0;

                // if true, a maybeReadMore has been scheduled
                this.readingMore = false;

                this.decoder = null;
                this.encoding = null;
                if (options.encoding) {
                    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
                    this.decoder = new StringDecoder(options.encoding);
                    this.encoding = options.encoding;
                }
            }

            function Readable(options) {
                Duplex = Duplex || require('./_stream_duplex');

                if (!(this instanceof Readable)) return new Readable(options);

                this._readableState = new ReadableState(options, this);

                // legacy
                this.readable = true;

                if (options) {
                    if (typeof options.read === 'function') this._read = options.read;

                    if (typeof options.destroy === 'function') this._destroy = options.destroy;
                }

                Stream.call(this);
            }

            Object.defineProperty(Readable.prototype, 'destroyed', {
                get: function () {
                    if (this._readableState === undefined) {
                        return false;
                    }
                    return this._readableState.destroyed;
                },
                set: function (value) {
                    // we ignore the value if the stream
                    // has not been initialized yet
                    if (!this._readableState) {
                        return;
                    }

                    // backward compatibility, the user is explicitly
                    // managing destroyed
                    this._readableState.destroyed = value;
                }
            });

            Readable.prototype.destroy = destroyImpl.destroy;
            Readable.prototype._undestroy = destroyImpl.undestroy;
            Readable.prototype._destroy = function (err, cb) {
                this.push(null);
                cb(err);
            };

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
            Readable.prototype.push = function (chunk, encoding) {
                var state = this._readableState;
                var skipChunkCheck;

                if (!state.objectMode) {
                    if (typeof chunk === 'string') {
                        encoding = encoding || state.defaultEncoding;
                        if (encoding !== state.encoding) {
                            chunk = Buffer.from(chunk, encoding);
                            encoding = '';
                        }
                        skipChunkCheck = true;
                    }
                } else {
                    skipChunkCheck = true;
                }

                return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
            };

// Unshift should *always* be something directly out of read()
            Readable.prototype.unshift = function (chunk) {
                return readableAddChunk(this, chunk, null, true, false);
            };

            function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
                var state = stream._readableState;
                if (chunk === null) {
                    state.reading = false;
                    onEofChunk(stream, state);
                } else {
                    var er;
                    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
                    if (er) {
                        stream.emit('error', er);
                    } else if (state.objectMode || chunk && chunk.length > 0) {
                        if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
                            chunk = _uint8ArrayToBuffer(chunk);
                        }

                        if (addToFront) {
                            if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
                        } else if (state.ended) {
                            stream.emit('error', new Error('stream.push() after EOF'));
                        } else {
                            state.reading = false;
                            if (state.decoder && !encoding) {
                                chunk = state.decoder.write(chunk);
                                if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
                            } else {
                                addChunk(stream, state, chunk, false);
                            }
                        }
                    } else if (!addToFront) {
                        state.reading = false;
                    }
                }

                return needMoreData(state);
            }

            function addChunk(stream, state, chunk, addToFront) {
                if (state.flowing && state.length === 0 && !state.sync) {
                    stream.emit('data', chunk);
                    stream.read(0);
                } else {
                    // update the buffer info.
                    state.length += state.objectMode ? 1 : chunk.length;
                    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

                    if (state.needReadable) emitReadable(stream);
                }
                maybeReadMore(stream, state);
            }

            function chunkInvalid(state, chunk) {
                var er;
                if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
                    er = new TypeError('Invalid non-string/buffer chunk');
                }
                return er;
            }

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
            function needMoreData(state) {
                return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
            }

            Readable.prototype.isPaused = function () {
                return this._readableState.flowing === false;
            };

// backwards compatibility.
            Readable.prototype.setEncoding = function (enc) {
                if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
                this._readableState.decoder = new StringDecoder(enc);
                this._readableState.encoding = enc;
                return this;
            };

// Don't raise the hwm > 8MB
            var MAX_HWM = 0x800000;
            function computeNewHighWaterMark(n) {
                if (n >= MAX_HWM) {
                    n = MAX_HWM;
                } else {
                    // Get the next highest power of 2 to prevent increasing hwm excessively in
                    // tiny amounts
                    n--;
                    n |= n >>> 1;
                    n |= n >>> 2;
                    n |= n >>> 4;
                    n |= n >>> 8;
                    n |= n >>> 16;
                    n++;
                }
                return n;
            }

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
            function howMuchToRead(n, state) {
                if (n <= 0 || state.length === 0 && state.ended) return 0;
                if (state.objectMode) return 1;
                if (n !== n) {
                    // Only flow one buffer at a time
                    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
                }
                // If we're asking for more than the current hwm, then raise the hwm.
                if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
                if (n <= state.length) return n;
                // Don't have enough
                if (!state.ended) {
                    state.needReadable = true;
                    return 0;
                }
                return state.length;
            }

// you can override either this method, or the async _read(n) below.
            Readable.prototype.read = function (n) {
                debug('read', n);
                n = parseInt(n, 10);
                var state = this._readableState;
                var nOrig = n;

                if (n !== 0) state.emittedReadable = false;

                // if we're doing read(0) to trigger a readable event, but we
                // already have a bunch of data in the buffer, then just trigger
                // the 'readable' event and move on.
                if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
                    debug('read: emitReadable', state.length, state.ended);
                    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
                    return null;
                }

                n = howMuchToRead(n, state);

                // if we've ended, and we're now clear, then finish it up.
                if (n === 0 && state.ended) {
                    if (state.length === 0) endReadable(this);
                    return null;
                }

                // All the actual chunk generation logic needs to be
                // *below* the call to _read.  The reason is that in certain
                // synthetic stream cases, such as passthrough streams, _read
                // may be a completely synchronous operation which may change
                // the state of the read buffer, providing enough data when
                // before there was *not* enough.
                //
                // So, the steps are:
                // 1. Figure out what the state of things will be after we do
                // a read from the buffer.
                //
                // 2. If that resulting state will trigger a _read, then call _read.
                // Note that this may be asynchronous, or synchronous.  Yes, it is
                // deeply ugly to write APIs this way, but that still doesn't mean
                // that the Readable class should behave improperly, as streams are
                // designed to be sync/async agnostic.
                // Take note if the _read call is sync or async (ie, if the read call
                // has returned yet), so that we know whether or not it's safe to emit
                // 'readable' etc.
                //
                // 3. Actually pull the requested chunks out of the buffer and return.

                // if we need a readable event, then we need to do some reading.
                var doRead = state.needReadable;
                debug('need readable', doRead);

                // if we currently have less than the highWaterMark, then also read some
                if (state.length === 0 || state.length - n < state.highWaterMark) {
                    doRead = true;
                    debug('length less than watermark', doRead);
                }

                // however, if we've ended, then there's no point, and if we're already
                // reading, then it's unnecessary.
                if (state.ended || state.reading) {
                    doRead = false;
                    debug('reading or ended', doRead);
                } else if (doRead) {
                    debug('do read');
                    state.reading = true;
                    state.sync = true;
                    // if the length is currently zero, then we *need* a readable event.
                    if (state.length === 0) state.needReadable = true;
                    // call internal read method
                    this._read(state.highWaterMark);
                    state.sync = false;
                    // If _read pushed data synchronously, then `reading` will be false,
                    // and we need to re-evaluate how much data we can return to the user.
                    if (!state.reading) n = howMuchToRead(nOrig, state);
                }

                var ret;
                if (n > 0) ret = fromList(n, state);else ret = null;

                if (ret === null) {
                    state.needReadable = true;
                    n = 0;
                } else {
                    state.length -= n;
                }

                if (state.length === 0) {
                    // If we have nothing in the buffer, then we want to know
                    // as soon as we *do* get something into the buffer.
                    if (!state.ended) state.needReadable = true;

                    // If we tried to read() past the EOF, then emit end on the next tick.
                    if (nOrig !== n && state.ended) endReadable(this);
                }

                if (ret !== null) this.emit('data', ret);

                return ret;
            };

            function onEofChunk(stream, state) {
                if (state.ended) return;
                if (state.decoder) {
                    var chunk = state.decoder.end();
                    if (chunk && chunk.length) {
                        state.buffer.push(chunk);
                        state.length += state.objectMode ? 1 : chunk.length;
                    }
                }
                state.ended = true;

                // emit 'readable' now to make sure it gets picked up.
                emitReadable(stream);
            }

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
            function emitReadable(stream) {
                var state = stream._readableState;
                state.needReadable = false;
                if (!state.emittedReadable) {
                    debug('emitReadable', state.flowing);
                    state.emittedReadable = true;
                    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
                }
            }

            function emitReadable_(stream) {
                debug('emit readable');
                stream.emit('readable');
                flow(stream);
            }

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
            function maybeReadMore(stream, state) {
                if (!state.readingMore) {
                    state.readingMore = true;
                    pna.nextTick(maybeReadMore_, stream, state);
                }
            }

            function maybeReadMore_(stream, state) {
                var len = state.length;
                while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
                    debug('maybeReadMore read 0');
                    stream.read(0);
                    if (len === state.length)
                    // didn't get any data, stop spinning.
                        break;else len = state.length;
                }
                state.readingMore = false;
            }

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
            Readable.prototype._read = function (n) {
                this.emit('error', new Error('_read() is not implemented'));
            };

            Readable.prototype.pipe = function (dest, pipeOpts) {
                var src = this;
                var state = this._readableState;

                switch (state.pipesCount) {
                    case 0:
                        state.pipes = dest;
                        break;
                    case 1:
                        state.pipes = [state.pipes, dest];
                        break;
                    default:
                        state.pipes.push(dest);
                        break;
                }
                state.pipesCount += 1;
                debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

                var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

                var endFn = doEnd ? onend : unpipe;
                if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

                dest.on('unpipe', onunpipe);
                function onunpipe(readable, unpipeInfo) {
                    debug('onunpipe');
                    if (readable === src) {
                        if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                            unpipeInfo.hasUnpiped = true;
                            cleanup();
                        }
                    }
                }

                function onend() {
                    debug('onend');
                    dest.end();
                }

                // when the dest drains, it reduces the awaitDrain counter
                // on the source.  This would be more elegant with a .once()
                // handler in flow(), but adding and removing repeatedly is
                // too slow.
                var ondrain = pipeOnDrain(src);
                dest.on('drain', ondrain);

                var cleanedUp = false;
                function cleanup() {
                    debug('cleanup');
                    // cleanup event handlers once the pipe is broken
                    dest.removeListener('close', onclose);
                    dest.removeListener('finish', onfinish);
                    dest.removeListener('drain', ondrain);
                    dest.removeListener('error', onerror);
                    dest.removeListener('unpipe', onunpipe);
                    src.removeListener('end', onend);
                    src.removeListener('end', unpipe);
                    src.removeListener('data', ondata);

                    cleanedUp = true;

                    // if the reader is waiting for a drain event from this
                    // specific writer, then it would cause it to never start
                    // flowing again.
                    // So, if this is awaiting a drain, then we just call it now.
                    // If we don't know, then assume that we are waiting for one.
                    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
                }

                // If the user pushes more data while we're writing to dest then we'll end up
                // in ondata again. However, we only want to increase awaitDrain once because
                // dest will only emit one 'drain' event for the multiple writes.
                // => Introduce a guard on increasing awaitDrain.
                var increasedAwaitDrain = false;
                src.on('data', ondata);
                function ondata(chunk) {
                    debug('ondata');
                    increasedAwaitDrain = false;
                    var ret = dest.write(chunk);
                    if (false === ret && !increasedAwaitDrain) {
                        // If the user unpiped during `dest.write()`, it is possible
                        // to get stuck in a permanently paused state if that write
                        // also returned false.
                        // => Check whether `dest` is still a piping destination.
                        if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                            debug('false write response, pause', src._readableState.awaitDrain);
                            src._readableState.awaitDrain++;
                            increasedAwaitDrain = true;
                        }
                        src.pause();
                    }
                }

                // if the dest has an error, then stop piping into it.
                // however, don't suppress the throwing behavior for this.
                function onerror(er) {
                    debug('onerror', er);
                    unpipe();
                    dest.removeListener('error', onerror);
                    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
                }

                // Make sure our error handler is attached before userland ones.
                prependListener(dest, 'error', onerror);

                // Both close and finish should trigger unpipe, but only once.
                function onclose() {
                    dest.removeListener('finish', onfinish);
                    unpipe();
                }
                dest.once('close', onclose);
                function onfinish() {
                    debug('onfinish');
                    dest.removeListener('close', onclose);
                    unpipe();
                }
                dest.once('finish', onfinish);

                function unpipe() {
                    debug('unpipe');
                    src.unpipe(dest);
                }

                // tell the dest that it's being piped to
                dest.emit('pipe', src);

                // start the flow if it hasn't been started already.
                if (!state.flowing) {
                    debug('pipe resume');
                    src.resume();
                }

                return dest;
            };

            function pipeOnDrain(src) {
                return function () {
                    var state = src._readableState;
                    debug('pipeOnDrain', state.awaitDrain);
                    if (state.awaitDrain) state.awaitDrain--;
                    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
                        state.flowing = true;
                        flow(src);
                    }
                };
            }

            Readable.prototype.unpipe = function (dest) {
                var state = this._readableState;
                var unpipeInfo = { hasUnpiped: false };

                // if we're not piping anywhere, then do nothing.
                if (state.pipesCount === 0) return this;

                // just one destination.  most common case.
                if (state.pipesCount === 1) {
                    // passed in one, but it's not the right one.
                    if (dest && dest !== state.pipes) return this;

                    if (!dest) dest = state.pipes;

                    // got a match.
                    state.pipes = null;
                    state.pipesCount = 0;
                    state.flowing = false;
                    if (dest) dest.emit('unpipe', this, unpipeInfo);
                    return this;
                }

                // slow case. multiple pipe destinations.

                if (!dest) {
                    // remove all.
                    var dests = state.pipes;
                    var len = state.pipesCount;
                    state.pipes = null;
                    state.pipesCount = 0;
                    state.flowing = false;

                    for (var i = 0; i < len; i++) {
                        dests[i].emit('unpipe', this, unpipeInfo);
                    }return this;
                }

                // try to find the right one.
                var index = indexOf(state.pipes, dest);
                if (index === -1) return this;

                state.pipes.splice(index, 1);
                state.pipesCount -= 1;
                if (state.pipesCount === 1) state.pipes = state.pipes[0];

                dest.emit('unpipe', this, unpipeInfo);

                return this;
            };

// set up data events if they are asked for
// Ensure readable listeners eventually get something
            Readable.prototype.on = function (ev, fn) {
                var res = Stream.prototype.on.call(this, ev, fn);

                if (ev === 'data') {
                    // Start flowing on next tick if stream isn't explicitly paused
                    if (this._readableState.flowing !== false) this.resume();
                } else if (ev === 'readable') {
                    var state = this._readableState;
                    if (!state.endEmitted && !state.readableListening) {
                        state.readableListening = state.needReadable = true;
                        state.emittedReadable = false;
                        if (!state.reading) {
                            pna.nextTick(nReadingNextTick, this);
                        } else if (state.length) {
                            emitReadable(this);
                        }
                    }
                }

                return res;
            };
            Readable.prototype.addListener = Readable.prototype.on;

            function nReadingNextTick(self) {
                debug('readable nexttick read 0');
                self.read(0);
            }

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
            Readable.prototype.resume = function () {
                var state = this._readableState;
                if (!state.flowing) {
                    debug('resume');
                    state.flowing = true;
                    resume(this, state);
                }
                return this;
            };

            function resume(stream, state) {
                if (!state.resumeScheduled) {
                    state.resumeScheduled = true;
                    pna.nextTick(resume_, stream, state);
                }
            }

            function resume_(stream, state) {
                if (!state.reading) {
                    debug('resume read 0');
                    stream.read(0);
                }

                state.resumeScheduled = false;
                state.awaitDrain = 0;
                stream.emit('resume');
                flow(stream);
                if (state.flowing && !state.reading) stream.read(0);
            }

            Readable.prototype.pause = function () {
                debug('call pause flowing=%j', this._readableState.flowing);
                if (false !== this._readableState.flowing) {
                    debug('pause');
                    this._readableState.flowing = false;
                    this.emit('pause');
                }
                return this;
            };

            function flow(stream) {
                var state = stream._readableState;
                debug('flow', state.flowing);
                while (state.flowing && stream.read() !== null) {}
            }

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
            Readable.prototype.wrap = function (stream) {
                var _this = this;

                var state = this._readableState;
                var paused = false;

                stream.on('end', function () {
                    debug('wrapped end');
                    if (state.decoder && !state.ended) {
                        var chunk = state.decoder.end();
                        if (chunk && chunk.length) _this.push(chunk);
                    }

                    _this.push(null);
                });

                stream.on('data', function (chunk) {
                    debug('wrapped data');
                    if (state.decoder) chunk = state.decoder.write(chunk);

                    // don't skip over falsy values in objectMode
                    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

                    var ret = _this.push(chunk);
                    if (!ret) {
                        paused = true;
                        stream.pause();
                    }
                });

                // proxy all the other methods.
                // important when wrapping filters and duplexes.
                for (var i in stream) {
                    if (this[i] === undefined && typeof stream[i] === 'function') {
                        this[i] = function (method) {
                            return function () {
                                return stream[method].apply(stream, arguments);
                            };
                        }(i);
                    }
                }

                // proxy certain important events.
                for (var n = 0; n < kProxyEvents.length; n++) {
                    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
                }

                // when we try to consume some more bytes, simply unpause the
                // underlying stream.
                this._read = function (n) {
                    debug('wrapped _read', n);
                    if (paused) {
                        paused = false;
                        stream.resume();
                    }
                };

                return this;
            };

            Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function () {
                    return this._readableState.highWaterMark;
                }
            });

// exposed for testing purposes only.
            Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
            function fromList(n, state) {
                // nothing buffered
                if (state.length === 0) return null;

                var ret;
                if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
                    // read it all, truncate the list
                    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
                    state.buffer.clear();
                } else {
                    // read part of list
                    ret = fromListPartial(n, state.buffer, state.decoder);
                }

                return ret;
            }

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
            function fromListPartial(n, list, hasStrings) {
                var ret;
                if (n < list.head.data.length) {
                    // slice is the same for buffers and strings
                    ret = list.head.data.slice(0, n);
                    list.head.data = list.head.data.slice(n);
                } else if (n === list.head.data.length) {
                    // first chunk is a perfect match
                    ret = list.shift();
                } else {
                    // result spans more than one buffer
                    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
                }
                return ret;
            }

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
            function copyFromBufferString(n, list) {
                var p = list.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while (p = p.next) {
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) list.head = p.next;else list.head = list.tail = null;
                        } else {
                            list.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                list.length -= c;
                return ret;
            }

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
            function copyFromBuffer(n, list) {
                var ret = Buffer.allocUnsafe(n);
                var p = list.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while (p = p.next) {
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) list.head = p.next;else list.head = list.tail = null;
                        } else {
                            list.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                list.length -= c;
                return ret;
            }

            function endReadable(stream) {
                var state = stream._readableState;

                // If we get here before consuming all the bytes, then that is a
                // bug in node.  Should never happen.
                if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

                if (!state.endEmitted) {
                    state.ended = true;
                    pna.nextTick(endReadableNT, state, stream);
                }
            }

            function endReadableNT(state, stream) {
                // Check that we didn't get one last unshift.
                if (!state.endEmitted && state.length === 0) {
                    state.endEmitted = true;
                    stream.readable = false;
                    stream.emit('end');
                }
            }

            function indexOf(xs, x) {
                for (var i = 0, l = xs.length; i < l; i++) {
                    if (xs[i] === x) return i;
                }
                return -1;
            }
        }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

    },{"./_stream_duplex":"/bytetrade-js/node_modules/readable-stream/lib/_stream_duplex.js","./internal/streams/BufferList":"/bytetrade-js/node_modules/readable-stream/lib/internal/streams/BufferList.js","./internal/streams/destroy":"/bytetrade-js/node_modules/readable-stream/lib/internal/streams/destroy.js","./internal/streams/stream":"/bytetrade-js/node_modules/readable-stream/lib/internal/streams/stream-browser.js","_process":"/bytetrade-js/node_modules/process/browser.js","core-util-is":"/bytetrade-js/node_modules/core-util-is/lib/util.js","events":"/bytetrade-js/node_modules/events/events.js","inherits":"/bytetrade-js/node_modules/inherits/inherits_browser.js","isarray":"/bytetrade-js/node_modules/isarray/index.js","process-nextick-args":"/bytetrade-js/node_modules/process-nextick-args/index.js","safe-buffer":"/bytetrade-js/node_modules/safe-buffer/index.js","string_decoder/":"/bytetrade-js/node_modules/string_decoder/lib/string_decoder.js","util":"/bytetrade-js/node_modules/browser-resolve/empty.js"}],"/bytetrade-js/node_modules/readable-stream/lib/_stream_transform.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

        'use strict';

        module.exports = Transform;

        var Duplex = require('./_stream_duplex');

        /*<replacement>*/
        var util = require('core-util-is');
        util.inherits = require('inherits');
        /*</replacement>*/

        util.inherits(Transform, Duplex);

        function afterTransform(er, data) {
            var ts = this._transformState;
            ts.transforming = false;

            var cb = ts.writecb;

            if (!cb) {
                return this.emit('error', new Error('write callback called multiple times'));
            }

            ts.writechunk = null;
            ts.writecb = null;

            if (data != null) // single equals check for both `null` and `undefined`
                this.push(data);

            cb(er);

            var rs = this._readableState;
            rs.reading = false;
            if (rs.needReadable || rs.length < rs.highWaterMark) {
                this._read(rs.highWaterMark);
            }
        }

        function Transform(options) {
            if (!(this instanceof Transform)) return new Transform(options);

            Duplex.call(this, options);

            this._transformState = {
                afterTransform: afterTransform.bind(this),
                needTransform: false,
                transforming: false,
                writecb: null,
                writechunk: null,
                writeencoding: null
            };

            // start out asking for a readable event once data is transformed.
            this._readableState.needReadable = true;

            // we have implemented the _read method, and done the other things
            // that Readable wants before the first _read call, so unset the
            // sync guard flag.
            this._readableState.sync = false;

            if (options) {
                if (typeof options.transform === 'function') this._transform = options.transform;

                if (typeof options.flush === 'function') this._flush = options.flush;
            }

            // When the writable side finishes, then flush out anything remaining.
            this.on('prefinish', prefinish);
        }

        function prefinish() {
            var _this = this;

            if (typeof this._flush === 'function') {
                this._flush(function (er, data) {
                    done(_this, er, data);
                });
            } else {
                done(this, null, null);
            }
        }

        Transform.prototype.push = function (chunk, encoding) {
            this._transformState.needTransform = false;
            return Duplex.prototype.push.call(this, chunk, encoding);
        };

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
        Transform.prototype._transform = function (chunk, encoding, cb) {
            throw new Error('_transform() is not implemented');
        };

        Transform.prototype._write = function (chunk, encoding, cb) {
            var ts = this._transformState;
            ts.writecb = cb;
            ts.writechunk = chunk;
            ts.writeencoding = encoding;
            if (!ts.transforming) {
                var rs = this._readableState;
                if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
            }
        };

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
        Transform.prototype._read = function (n) {
            var ts = this._transformState;

            if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
                ts.transforming = true;
                this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
            } else {
                // mark that we need a transform, so that any data that comes in
                // will get processed, now that we've asked for it.
                ts.needTransform = true;
            }
        };

        Transform.prototype._destroy = function (err, cb) {
            var _this2 = this;

            Duplex.prototype._destroy.call(this, err, function (err2) {
                cb(err2);
                _this2.emit('close');
            });
        };

        function done(stream, er, data) {
            if (er) return stream.emit('error', er);

            if (data != null) // single equals check for both `null` and `undefined`
                stream.push(data);

            // if there's nothing in the write buffer, then that means
            // that nothing more will ever be provided
            if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

            if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

            return stream.push(null);
        }
    },{"./_stream_duplex":"/bytetrade-js/node_modules/readable-stream/lib/_stream_duplex.js","core-util-is":"/bytetrade-js/node_modules/core-util-is/lib/util.js","inherits":"/bytetrade-js/node_modules/inherits/inherits_browser.js"}],"/bytetrade-js/node_modules/readable-stream/lib/_stream_writable.js":[function(require,module,exports){
        (function (process,global,setImmediate){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

            'use strict';

            /*<replacement>*/

            var pna = require('process-nextick-args');
            /*</replacement>*/

            module.exports = Writable;

            /* <replacement> */
            function WriteReq(chunk, encoding, cb) {
                this.chunk = chunk;
                this.encoding = encoding;
                this.callback = cb;
                this.next = null;
            }

// It seems a linked list but it is not
// there will be only 2 of these for each stream
            function CorkedRequest(state) {
                var _this = this;

                this.next = null;
                this.entry = null;
                this.finish = function () {
                    onCorkedFinish(_this, state);
                };
            }
            /* </replacement> */

            /*<replacement>*/
            var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
            /*</replacement>*/

            /*<replacement>*/
            var Duplex;
            /*</replacement>*/

            Writable.WritableState = WritableState;

            /*<replacement>*/
            var util = require('core-util-is');
            util.inherits = require('inherits');
            /*</replacement>*/

            /*<replacement>*/
            var internalUtil = {
                deprecate: require('util-deprecate')
            };
            /*</replacement>*/

            /*<replacement>*/
            var Stream = require('./internal/streams/stream');
            /*</replacement>*/

            /*<replacement>*/

            var Buffer = require('safe-buffer').Buffer;
            var OurUint8Array = global.Uint8Array || function () {};
            function _uint8ArrayToBuffer(chunk) {
                return Buffer.from(chunk);
            }
            function _isUint8Array(obj) {
                return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
            }

            /*</replacement>*/

            var destroyImpl = require('./internal/streams/destroy');

            util.inherits(Writable, Stream);

            function nop() {}

            function WritableState(options, stream) {
                Duplex = Duplex || require('./_stream_duplex');

                options = options || {};

                // Duplex streams are both readable and writable, but share
                // the same options object.
                // However, some cases require setting options to different
                // values for the readable and the writable sides of the duplex stream.
                // These options can be provided separately as readableXXX and writableXXX.
                var isDuplex = stream instanceof Duplex;

                // object stream flag to indicate whether or not this stream
                // contains buffers or objects.
                this.objectMode = !!options.objectMode;

                if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

                // the point at which write() starts returning false
                // Note: 0 is a valid value, means that we always return false if
                // the entire buffer is not flushed immediately on write()
                var hwm = options.highWaterMark;
                var writableHwm = options.writableHighWaterMark;
                var defaultHwm = this.objectMode ? 16 : 16 * 1024;

                if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

                // cast to ints.
                this.highWaterMark = Math.floor(this.highWaterMark);

                // if _final has been called
                this.finalCalled = false;

                // drain event flag.
                this.needDrain = false;
                // at the start of calling end()
                this.ending = false;
                // when end() has been called, and returned
                this.ended = false;
                // when 'finish' is emitted
                this.finished = false;

                // has it been destroyed
                this.destroyed = false;

                // should we decode strings into buffers before passing to _write?
                // this is here so that some node-core streams can optimize string
                // handling at a lower level.
                var noDecode = options.decodeStrings === false;
                this.decodeStrings = !noDecode;

                // Crypto is kind of old and crusty.  Historically, its default string
                // encoding is 'binary' so we have to make this configurable.
                // Everything else in the universe uses 'utf8', though.
                this.defaultEncoding = options.defaultEncoding || 'utf8';

                // not an actual buffer we keep track of, but a measurement
                // of how much we're waiting to get pushed to some underlying
                // socket or file.
                this.length = 0;

                // a flag to see when we're in the middle of a write.
                this.writing = false;

                // when true all writes will be buffered until .uncork() call
                this.corked = 0;

                // a flag to be able to tell if the onwrite cb is called immediately,
                // or on a later tick.  We set this to true at first, because any
                // actions that shouldn't happen until "later" should generally also
                // not happen before the first write call.
                this.sync = true;

                // a flag to know if we're processing previously buffered items, which
                // may call the _write() callback in the same tick, so that we don't
                // end up in an overlapped onwrite situation.
                this.bufferProcessing = false;

                // the callback that's passed to _write(chunk,cb)
                this.onwrite = function (er) {
                    onwrite(stream, er);
                };

                // the callback that the user supplies to write(chunk,encoding,cb)
                this.writecb = null;

                // the amount that is being written when _write is called.
                this.writelen = 0;

                this.bufferedRequest = null;
                this.lastBufferedRequest = null;

                // number of pending user-supplied write callbacks
                // this must be 0 before 'finish' can be emitted
                this.pendingcb = 0;

                // emit prefinish if the only thing we're waiting for is _write cbs
                // This is relevant for synchronous Transform streams
                this.prefinished = false;

                // True if the error was already emitted and should not be thrown again
                this.errorEmitted = false;

                // count buffered requests
                this.bufferedRequestCount = 0;

                // allocate the first CorkedRequest, there is always
                // one allocated and free to use, and we maintain at most two
                this.corkedRequestsFree = new CorkedRequest(this);
            }

            WritableState.prototype.getBuffer = function getBuffer() {
                var current = this.bufferedRequest;
                var out = [];
                while (current) {
                    out.push(current);
                    current = current.next;
                }
                return out;
            };

            (function () {
                try {
                    Object.defineProperty(WritableState.prototype, 'buffer', {
                        get: internalUtil.deprecate(function () {
                            return this.getBuffer();
                        }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
                    });
                } catch (_) {}
            })();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
            var realHasInstance;
            if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
                realHasInstance = Function.prototype[Symbol.hasInstance];
                Object.defineProperty(Writable, Symbol.hasInstance, {
                    value: function (object) {
                        if (realHasInstance.call(this, object)) return true;
                        if (this !== Writable) return false;

                        return object && object._writableState instanceof WritableState;
                    }
                });
            } else {
                realHasInstance = function (object) {
                    return object instanceof this;
                };
            }

            function Writable(options) {
                Duplex = Duplex || require('./_stream_duplex');

                // Writable ctor is applied to Duplexes, too.
                // `realHasInstance` is necessary because using plain `instanceof`
                // would return false, as no `_writableState` property is attached.

                // Trying to use the custom `instanceof` for Writable here will also break the
                // Node.js LazyTransform implementation, which has a non-trivial getter for
                // `_writableState` that would lead to infinite recursion.
                if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
                    return new Writable(options);
                }

                this._writableState = new WritableState(options, this);

                // legacy.
                this.writable = true;

                if (options) {
                    if (typeof options.write === 'function') this._write = options.write;

                    if (typeof options.writev === 'function') this._writev = options.writev;

                    if (typeof options.destroy === 'function') this._destroy = options.destroy;

                    if (typeof options.final === 'function') this._final = options.final;
                }

                Stream.call(this);
            }

// Otherwise people can pipe Writable streams, which is just wrong.
            Writable.prototype.pipe = function () {
                this.emit('error', new Error('Cannot pipe, not readable'));
            };

            function writeAfterEnd(stream, cb) {
                var er = new Error('write after end');
                // TODO: defer error events consistently everywhere, not just the cb
                stream.emit('error', er);
                pna.nextTick(cb, er);
            }

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
            function validChunk(stream, state, chunk, cb) {
                var valid = true;
                var er = false;

                if (chunk === null) {
                    er = new TypeError('May not write null values to stream');
                } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
                    er = new TypeError('Invalid non-string/buffer chunk');
                }
                if (er) {
                    stream.emit('error', er);
                    pna.nextTick(cb, er);
                    valid = false;
                }
                return valid;
            }

            Writable.prototype.write = function (chunk, encoding, cb) {
                var state = this._writableState;
                var ret = false;
                var isBuf = !state.objectMode && _isUint8Array(chunk);

                if (isBuf && !Buffer.isBuffer(chunk)) {
                    chunk = _uint8ArrayToBuffer(chunk);
                }

                if (typeof encoding === 'function') {
                    cb = encoding;
                    encoding = null;
                }

                if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

                if (typeof cb !== 'function') cb = nop;

                if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
                    state.pendingcb++;
                    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
                }

                return ret;
            };

            Writable.prototype.cork = function () {
                var state = this._writableState;

                state.corked++;
            };

            Writable.prototype.uncork = function () {
                var state = this._writableState;

                if (state.corked) {
                    state.corked--;

                    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
                }
            };

            Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
                // node::ParseEncoding() requires lower case.
                if (typeof encoding === 'string') encoding = encoding.toLowerCase();
                if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
                this._writableState.defaultEncoding = encoding;
                return this;
            };

            function decodeChunk(state, chunk, encoding) {
                if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
                    chunk = Buffer.from(chunk, encoding);
                }
                return chunk;
            }

            Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function () {
                    return this._writableState.highWaterMark;
                }
            });

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
            function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
                if (!isBuf) {
                    var newChunk = decodeChunk(state, chunk, encoding);
                    if (chunk !== newChunk) {
                        isBuf = true;
                        encoding = 'buffer';
                        chunk = newChunk;
                    }
                }
                var len = state.objectMode ? 1 : chunk.length;

                state.length += len;

                var ret = state.length < state.highWaterMark;
                // we must ensure that previous needDrain will not be reset to false.
                if (!ret) state.needDrain = true;

                if (state.writing || state.corked) {
                    var last = state.lastBufferedRequest;
                    state.lastBufferedRequest = {
                        chunk: chunk,
                        encoding: encoding,
                        isBuf: isBuf,
                        callback: cb,
                        next: null
                    };
                    if (last) {
                        last.next = state.lastBufferedRequest;
                    } else {
                        state.bufferedRequest = state.lastBufferedRequest;
                    }
                    state.bufferedRequestCount += 1;
                } else {
                    doWrite(stream, state, false, len, chunk, encoding, cb);
                }

                return ret;
            }

            function doWrite(stream, state, writev, len, chunk, encoding, cb) {
                state.writelen = len;
                state.writecb = cb;
                state.writing = true;
                state.sync = true;
                if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
                state.sync = false;
            }

            function onwriteError(stream, state, sync, er, cb) {
                --state.pendingcb;

                if (sync) {
                    // defer the callback if we are being called synchronously
                    // to avoid piling up things on the stack
                    pna.nextTick(cb, er);
                    // this can emit finish, and it will always happen
                    // after error
                    pna.nextTick(finishMaybe, stream, state);
                    stream._writableState.errorEmitted = true;
                    stream.emit('error', er);
                } else {
                    // the caller expect this to happen before if
                    // it is async
                    cb(er);
                    stream._writableState.errorEmitted = true;
                    stream.emit('error', er);
                    // this can emit finish, but finish must
                    // always follow error
                    finishMaybe(stream, state);
                }
            }

            function onwriteStateUpdate(state) {
                state.writing = false;
                state.writecb = null;
                state.length -= state.writelen;
                state.writelen = 0;
            }

            function onwrite(stream, er) {
                var state = stream._writableState;
                var sync = state.sync;
                var cb = state.writecb;

                onwriteStateUpdate(state);

                if (er) onwriteError(stream, state, sync, er, cb);else {
                    // Check if we're actually ready to finish, but don't emit yet
                    var finished = needFinish(state);

                    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
                        clearBuffer(stream, state);
                    }

                    if (sync) {
                        /*<replacement>*/
                        asyncWrite(afterWrite, stream, state, finished, cb);
                        /*</replacement>*/
                    } else {
                        afterWrite(stream, state, finished, cb);
                    }
                }
            }

            function afterWrite(stream, state, finished, cb) {
                if (!finished) onwriteDrain(stream, state);
                state.pendingcb--;
                cb();
                finishMaybe(stream, state);
            }

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
            function onwriteDrain(stream, state) {
                if (state.length === 0 && state.needDrain) {
                    state.needDrain = false;
                    stream.emit('drain');
                }
            }

// if there's something in the buffer waiting, then process it
            function clearBuffer(stream, state) {
                state.bufferProcessing = true;
                var entry = state.bufferedRequest;

                if (stream._writev && entry && entry.next) {
                    // Fast case, write everything using _writev()
                    var l = state.bufferedRequestCount;
                    var buffer = new Array(l);
                    var holder = state.corkedRequestsFree;
                    holder.entry = entry;

                    var count = 0;
                    var allBuffers = true;
                    while (entry) {
                        buffer[count] = entry;
                        if (!entry.isBuf) allBuffers = false;
                        entry = entry.next;
                        count += 1;
                    }
                    buffer.allBuffers = allBuffers;

                    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

                    // doWrite is almost always async, defer these to save a bit of time
                    // as the hot path ends with doWrite
                    state.pendingcb++;
                    state.lastBufferedRequest = null;
                    if (holder.next) {
                        state.corkedRequestsFree = holder.next;
                        holder.next = null;
                    } else {
                        state.corkedRequestsFree = new CorkedRequest(state);
                    }
                    state.bufferedRequestCount = 0;
                } else {
                    // Slow case, write chunks one-by-one
                    while (entry) {
                        var chunk = entry.chunk;
                        var encoding = entry.encoding;
                        var cb = entry.callback;
                        var len = state.objectMode ? 1 : chunk.length;

                        doWrite(stream, state, false, len, chunk, encoding, cb);
                        entry = entry.next;
                        state.bufferedRequestCount--;
                        // if we didn't call the onwrite immediately, then
                        // it means that we need to wait until it does.
                        // also, that means that the chunk and cb are currently
                        // being processed, so move the buffer counter past them.
                        if (state.writing) {
                            break;
                        }
                    }

                    if (entry === null) state.lastBufferedRequest = null;
                }

                state.bufferedRequest = entry;
                state.bufferProcessing = false;
            }

            Writable.prototype._write = function (chunk, encoding, cb) {
                cb(new Error('_write() is not implemented'));
            };

            Writable.prototype._writev = null;

            Writable.prototype.end = function (chunk, encoding, cb) {
                var state = this._writableState;

                if (typeof chunk === 'function') {
                    cb = chunk;
                    chunk = null;
                    encoding = null;
                } else if (typeof encoding === 'function') {
                    cb = encoding;
                    encoding = null;
                }

                if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

                // .end() fully uncorks
                if (state.corked) {
                    state.corked = 1;
                    this.uncork();
                }

                // ignore unnecessary end() calls.
                if (!state.ending && !state.finished) endWritable(this, state, cb);
            };

            function needFinish(state) {
                return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
            }
            function callFinal(stream, state) {
                stream._final(function (err) {
                    state.pendingcb--;
                    if (err) {
                        stream.emit('error', err);
                    }
                    state.prefinished = true;
                    stream.emit('prefinish');
                    finishMaybe(stream, state);
                });
            }
            function prefinish(stream, state) {
                if (!state.prefinished && !state.finalCalled) {
                    if (typeof stream._final === 'function') {
                        state.pendingcb++;
                        state.finalCalled = true;
                        pna.nextTick(callFinal, stream, state);
                    } else {
                        state.prefinished = true;
                        stream.emit('prefinish');
                    }
                }
            }

            function finishMaybe(stream, state) {
                var need = needFinish(state);
                if (need) {
                    prefinish(stream, state);
                    if (state.pendingcb === 0) {
                        state.finished = true;
                        stream.emit('finish');
                    }
                }
                return need;
            }

            function endWritable(stream, state, cb) {
                state.ending = true;
                finishMaybe(stream, state);
                if (cb) {
                    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
                }
                state.ended = true;
                stream.writable = false;
            }

            function onCorkedFinish(corkReq, state, err) {
                var entry = corkReq.entry;
                corkReq.entry = null;
                while (entry) {
                    var cb = entry.callback;
                    state.pendingcb--;
                    cb(err);
                    entry = entry.next;
                }
                if (state.corkedRequestsFree) {
                    state.corkedRequestsFree.next = corkReq;
                } else {
                    state.corkedRequestsFree = corkReq;
                }
            }

            Object.defineProperty(Writable.prototype, 'destroyed', {
                get: function () {
                    if (this._writableState === undefined) {
                        return false;
                    }
                    return this._writableState.destroyed;
                },
                set: function (value) {
                    // we ignore the value if the stream
                    // has not been initialized yet
                    if (!this._writableState) {
                        return;
                    }

                    // backward compatibility, the user is explicitly
                    // managing destroyed
                    this._writableState.destroyed = value;
                }
            });

            Writable.prototype.destroy = destroyImpl.destroy;
            Writable.prototype._undestroy = destroyImpl.undestroy;
            Writable.prototype._destroy = function (err, cb) {
                this.end();
                cb(err);
            };
        }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("timers").setImmediate)

    },{"./_stream_duplex":"/bytetrade-js/node_modules/readable-stream/lib/_stream_duplex.js","./internal/streams/destroy":"/bytetrade-js/node_modules/readable-stream/lib/internal/streams/destroy.js","./internal/streams/stream":"/bytetrade-js/node_modules/readable-stream/lib/internal/streams/stream-browser.js","_process":"/bytetrade-js/node_modules/process/browser.js","core-util-is":"/bytetrade-js/node_modules/core-util-is/lib/util.js","inherits":"/bytetrade-js/node_modules/inherits/inherits_browser.js","process-nextick-args":"/bytetrade-js/node_modules/process-nextick-args/index.js","safe-buffer":"/bytetrade-js/node_modules/safe-buffer/index.js","timers":"/bytetrade-js/node_modules/timers-browserify/main.js","util-deprecate":"/bytetrade-js/node_modules/util-deprecate/browser.js"}],"/bytetrade-js/node_modules/readable-stream/lib/internal/streams/BufferList.js":[function(require,module,exports){
        'use strict';

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        var Buffer = require('safe-buffer').Buffer;
        var util = require('util');

        function copyBuffer(src, target, offset) {
            src.copy(target, offset);
        }

        module.exports = function () {
            function BufferList() {
                _classCallCheck(this, BufferList);

                this.head = null;
                this.tail = null;
                this.length = 0;
            }

            BufferList.prototype.push = function push(v) {
                var entry = { data: v, next: null };
                if (this.length > 0) this.tail.next = entry;else this.head = entry;
                this.tail = entry;
                ++this.length;
            };

            BufferList.prototype.unshift = function unshift(v) {
                var entry = { data: v, next: this.head };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            };

            BufferList.prototype.shift = function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
                --this.length;
                return ret;
            };

            BufferList.prototype.clear = function clear() {
                this.head = this.tail = null;
                this.length = 0;
            };

            BufferList.prototype.join = function join(s) {
                if (this.length === 0) return '';
                var p = this.head;
                var ret = '' + p.data;
                while (p = p.next) {
                    ret += s + p.data;
                }return ret;
            };

            BufferList.prototype.concat = function concat(n) {
                if (this.length === 0) return Buffer.alloc(0);
                if (this.length === 1) return this.head.data;
                var ret = Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while (p) {
                    copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            };

            return BufferList;
        }();

        if (util && util.inspect && util.inspect.custom) {
            module.exports.prototype[util.inspect.custom] = function () {
                var obj = util.inspect({ length: this.length });
                return this.constructor.name + ' ' + obj;
            };
        }
    },{"safe-buffer":"/bytetrade-js/node_modules/safe-buffer/index.js","util":"/bytetrade-js/node_modules/browser-resolve/empty.js"}],"/bytetrade-js/node_modules/readable-stream/lib/internal/streams/destroy.js":[function(require,module,exports){
        'use strict';

        /*<replacement>*/

        var pna = require('process-nextick-args');
        /*</replacement>*/

// undocumented cb() API, needed for core, not for public API
        function destroy(err, cb) {
            var _this = this;

            var readableDestroyed = this._readableState && this._readableState.destroyed;
            var writableDestroyed = this._writableState && this._writableState.destroyed;

            if (readableDestroyed || writableDestroyed) {
                if (cb) {
                    cb(err);
                } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
                    pna.nextTick(emitErrorNT, this, err);
                }
                return this;
            }

            // we set destroyed to true before firing error callbacks in order
            // to make it re-entrance safe in case destroy() is called within callbacks

            if (this._readableState) {
                this._readableState.destroyed = true;
            }

            // if this is a duplex stream mark the writable part as destroyed as well
            if (this._writableState) {
                this._writableState.destroyed = true;
            }

            this._destroy(err || null, function (err) {
                if (!cb && err) {
                    pna.nextTick(emitErrorNT, _this, err);
                    if (_this._writableState) {
                        _this._writableState.errorEmitted = true;
                    }
                } else if (cb) {
                    cb(err);
                }
            });

            return this;
        }

        function undestroy() {
            if (this._readableState) {
                this._readableState.destroyed = false;
                this._readableState.reading = false;
                this._readableState.ended = false;
                this._readableState.endEmitted = false;
            }

            if (this._writableState) {
                this._writableState.destroyed = false;
                this._writableState.ended = false;
                this._writableState.ending = false;
                this._writableState.finished = false;
                this._writableState.errorEmitted = false;
            }
        }

        function emitErrorNT(self, err) {
            self.emit('error', err);
        }

        module.exports = {
            destroy: destroy,
            undestroy: undestroy
        };
    },{"process-nextick-args":"/bytetrade-js/node_modules/process-nextick-args/index.js"}],"/bytetrade-js/node_modules/readable-stream/lib/internal/streams/stream-browser.js":[function(require,module,exports){
        module.exports = require('events').EventEmitter;

    },{"events":"/bytetrade-js/node_modules/events/events.js"}],"/bytetrade-js/node_modules/readable-stream/passthrough.js":[function(require,module,exports){
        module.exports = require('./readable').PassThrough

    },{"./readable":"/bytetrade-js/node_modules/readable-stream/readable-browser.js"}],"/bytetrade-js/node_modules/readable-stream/readable-browser.js":[function(require,module,exports){
        exports = module.exports = require('./lib/_stream_readable.js');
        exports.Stream = exports;
        exports.Readable = exports;
        exports.Writable = require('./lib/_stream_writable.js');
        exports.Duplex = require('./lib/_stream_duplex.js');
        exports.Transform = require('./lib/_stream_transform.js');
        exports.PassThrough = require('./lib/_stream_passthrough.js');

    },{"./lib/_stream_duplex.js":"/bytetrade-js/node_modules/readable-stream/lib/_stream_duplex.js","./lib/_stream_passthrough.js":"/bytetrade-js/node_modules/readable-stream/lib/_stream_passthrough.js","./lib/_stream_readable.js":"/bytetrade-js/node_modules/readable-stream/lib/_stream_readable.js","./lib/_stream_transform.js":"/bytetrade-js/node_modules/readable-stream/lib/_stream_transform.js","./lib/_stream_writable.js":"/bytetrade-js/node_modules/readable-stream/lib/_stream_writable.js"}],"/bytetrade-js/node_modules/readable-stream/transform.js":[function(require,module,exports){
        module.exports = require('./readable').Transform

    },{"./readable":"/bytetrade-js/node_modules/readable-stream/readable-browser.js"}],"/bytetrade-js/node_modules/readable-stream/writable-browser.js":[function(require,module,exports){
        module.exports = require('./lib/_stream_writable.js');

    },{"./lib/_stream_writable.js":"/bytetrade-js/node_modules/readable-stream/lib/_stream_writable.js"}],"/bytetrade-js/node_modules/ripemd160/index.js":[function(require,module,exports){
        'use strict'
        var Buffer = require('buffer').Buffer
        var inherits = require('inherits')
        var HashBase = require('hash-base')

        var ARRAY16 = new Array(16)

        var zl = [
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
            7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
            3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
            1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
            4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
        ]

        var zr = [
            5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
            6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
            15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
            8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
            12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
        ]

        var sl = [
            11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
            7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
            11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
            11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
            9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
        ]

        var sr = [
            8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
            9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
            9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
            15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
            8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
        ]

        var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
        var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

        function RIPEMD160 () {
            HashBase.call(this, 64)

            // state
            this._a = 0x67452301
            this._b = 0xefcdab89
            this._c = 0x98badcfe
            this._d = 0x10325476
            this._e = 0xc3d2e1f0
        }

        inherits(RIPEMD160, HashBase)

        RIPEMD160.prototype._update = function () {
            var words = ARRAY16
            for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

            var al = this._a | 0
            var bl = this._b | 0
            var cl = this._c | 0
            var dl = this._d | 0
            var el = this._e | 0

            var ar = this._a | 0
            var br = this._b | 0
            var cr = this._c | 0
            var dr = this._d | 0
            var er = this._e | 0

            // computation
            for (var i = 0; i < 80; i += 1) {
                var tl
                var tr
                if (i < 16) {
                    tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
                    tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
                } else if (i < 32) {
                    tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
                    tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
                } else if (i < 48) {
                    tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
                    tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
                } else if (i < 64) {
                    tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
                    tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
                } else { // if (i<80) {
                    tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
                    tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
                }

                al = el
                el = dl
                dl = rotl(cl, 10)
                cl = bl
                bl = tl

                ar = er
                er = dr
                dr = rotl(cr, 10)
                cr = br
                br = tr
            }

            // update state
            var t = (this._b + cl + dr) | 0
            this._b = (this._c + dl + er) | 0
            this._c = (this._d + el + ar) | 0
            this._d = (this._e + al + br) | 0
            this._e = (this._a + bl + cr) | 0
            this._a = t
        }

        RIPEMD160.prototype._digest = function () {
            // create padding and handle blocks
            this._block[this._blockOffset++] = 0x80
            if (this._blockOffset > 56) {
                this._block.fill(0, this._blockOffset, 64)
                this._update()
                this._blockOffset = 0
            }

            this._block.fill(0, this._blockOffset, 56)
            this._block.writeUInt32LE(this._length[0], 56)
            this._block.writeUInt32LE(this._length[1], 60)
            this._update()

            // produce result
            var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
            buffer.writeInt32LE(this._a, 0)
            buffer.writeInt32LE(this._b, 4)
            buffer.writeInt32LE(this._c, 8)
            buffer.writeInt32LE(this._d, 12)
            buffer.writeInt32LE(this._e, 16)
            return buffer
        }

        function rotl (x, n) {
            return (x << n) | (x >>> (32 - n))
        }

        function fn1 (a, b, c, d, e, m, k, s) {
            return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
        }

        function fn2 (a, b, c, d, e, m, k, s) {
            return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
        }

        function fn3 (a, b, c, d, e, m, k, s) {
            return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
        }

        function fn4 (a, b, c, d, e, m, k, s) {
            return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
        }

        function fn5 (a, b, c, d, e, m, k, s) {
            return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
        }

        module.exports = RIPEMD160

    },{"buffer":"/bytetrade-js/node_modules/buffer/index.js","hash-base":"/bytetrade-js/node_modules/hash-base/index.js","inherits":"/bytetrade-js/node_modules/inherits/inherits_browser.js"}],"/bytetrade-js/node_modules/safe-buffer/index.js":[function(require,module,exports){
        /* eslint-disable node/no-deprecated-api */
        var buffer = require('buffer')
        var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
        function copyProps (src, dst) {
            for (var key in src) {
                dst[key] = src[key]
            }
        }
        if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
            module.exports = buffer
        } else {
            // Copy properties from require('buffer')
            copyProps(buffer, exports)
            exports.Buffer = SafeBuffer
        }

        function SafeBuffer (arg, encodingOrOffset, length) {
            return Buffer(arg, encodingOrOffset, length)
        }

// Copy static methods from Buffer
        copyProps(Buffer, SafeBuffer)

        SafeBuffer.from = function (arg, encodingOrOffset, length) {
            if (typeof arg === 'number') {
                throw new TypeError('Argument must not be a number')
            }
            return Buffer(arg, encodingOrOffset, length)
        }

        SafeBuffer.alloc = function (size, fill, encoding) {
            if (typeof size !== 'number') {
                throw new TypeError('Argument must be a number')
            }
            var buf = Buffer(size)
            if (fill !== undefined) {
                if (typeof encoding === 'string') {
                    buf.fill(fill, encoding)
                } else {
                    buf.fill(fill)
                }
            } else {
                buf.fill(0)
            }
            return buf
        }

        SafeBuffer.allocUnsafe = function (size) {
            if (typeof size !== 'number') {
                throw new TypeError('Argument must be a number')
            }
            return Buffer(size)
        }

        SafeBuffer.allocUnsafeSlow = function (size) {
            if (typeof size !== 'number') {
                throw new TypeError('Argument must be a number')
            }
            return buffer.SlowBuffer(size)
        }

    },{"buffer":"/bytetrade-js/node_modules/buffer/index.js"}],"/bytetrade-js/node_modules/secure-random/lib/secure-random.js":[function(require,module,exports){
        (function (process,Buffer){
            !function(globals){
                'use strict'

//*** UMD BEGIN
                if (typeof define !== 'undefined' && define.amd) { //require.js / AMD
                    define([], function() {
                        return secureRandom
                    })
                } else if (typeof module !== 'undefined' && module.exports) { //CommonJS
                    module.exports = secureRandom
                } else { //script / browser
                    globals.secureRandom = secureRandom
                }
//*** UMD END

//options.type is the only valid option
                function secureRandom(count, options) {
                    options = options || {type: 'Array'}
                    //we check for process.pid to prevent browserify from tricking us
                    if (typeof process != 'undefined' && typeof process.pid == 'number') {
                        return nodeRandom(count, options)
                    } else {
                        var crypto = window.crypto || window.msCrypto
                        if (!crypto) throw new Error("Your browser does not support window.crypto.")
                        return browserRandom(count, options)
                    }
                }

                function nodeRandom(count, options) {
                    var crypto = require('crypto')
                    var buf = crypto.randomBytes(count)

                    switch (options.type) {
                        case 'Array':
                            return [].slice.call(buf)
                        case 'Buffer':
                            return buf
                        case 'Uint8Array':
                            var arr = new Uint8Array(count)
                            for (var i = 0; i < count; ++i) { arr[i] = buf.readUInt8(i) }
                            return arr
                        default:
                            throw new Error(options.type + " is unsupported.")
                    }
                }

                function browserRandom(count, options) {
                    var nativeArr = new Uint8Array(count)
                    var crypto = window.crypto || window.msCrypto
                    crypto.getRandomValues(nativeArr)

                    switch (options.type) {
                        case 'Array':
                            return [].slice.call(nativeArr)
                        case 'Buffer':
                            try { var b = new Buffer(1) } catch(e) { throw new Error('Buffer not supported in this environment. Use Node.js or Browserify for browser support.')}
                            return new Buffer(nativeArr)
                        case 'Uint8Array':
                            return nativeArr
                        default:
                            throw new Error(options.type + " is unsupported.")
                    }
                }

                secureRandom.randomArray = function(byteCount) {
                    return secureRandom(byteCount, {type: 'Array'})
                }

                secureRandom.randomUint8Array = function(byteCount) {
                    return secureRandom(byteCount, {type: 'Uint8Array'})
                }

                secureRandom.randomBuffer = function(byteCount) {
                    return secureRandom(byteCount, {type: 'Buffer'})
                }


            }(this);

        }).call(this,require('_process'),require("buffer").Buffer)

    },{"_process":"/bytetrade-js/node_modules/process/browser.js","buffer":"/bytetrade-js/node_modules/buffer/index.js","crypto":"/bytetrade-js/node_modules/browser-resolve/empty.js"}],"/bytetrade-js/node_modules/sha.js/hash.js":[function(require,module,exports){
        var Buffer = require('safe-buffer').Buffer

// prototype class for hash functions
        function Hash (blockSize, finalSize) {
            this._block = Buffer.alloc(blockSize)
            this._finalSize = finalSize
            this._blockSize = blockSize
            this._len = 0
        }

        Hash.prototype.update = function (data, enc) {
            if (typeof data === 'string') {
                enc = enc || 'utf8'
                data = Buffer.from(data, enc)
            }

            var block = this._block
            var blockSize = this._blockSize
            var length = data.length
            var accum = this._len

            for (var offset = 0; offset < length;) {
                var assigned = accum % blockSize
                var remainder = Math.min(length - offset, blockSize - assigned)

                for (var i = 0; i < remainder; i++) {
                    block[assigned + i] = data[offset + i]
                }

                accum += remainder
                offset += remainder

                if ((accum % blockSize) === 0) {
                    this._update(block)
                }
            }

            this._len += length
            return this
        }

        Hash.prototype.digest = function (enc) {
            var rem = this._len % this._blockSize

            this._block[rem] = 0x80

            // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
            // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
            this._block.fill(0, rem + 1)

            if (rem >= this._finalSize) {
                this._update(this._block)
                this._block.fill(0)
            }

            var bits = this._len * 8

            // uint32
            if (bits <= 0xffffffff) {
                this._block.writeUInt32BE(bits, this._blockSize - 4)

                // uint64
            } else {
                var lowBits = (bits & 0xffffffff) >>> 0
                var highBits = (bits - lowBits) / 0x100000000

                this._block.writeUInt32BE(highBits, this._blockSize - 8)
                this._block.writeUInt32BE(lowBits, this._blockSize - 4)
            }

            this._update(this._block)
            var hash = this._hash()

            return enc ? hash.toString(enc) : hash
        }

        Hash.prototype._update = function () {
            throw new Error('_update must be implemented by subclass')
        }

        module.exports = Hash

    },{"safe-buffer":"/bytetrade-js/node_modules/safe-buffer/index.js"}],"/bytetrade-js/node_modules/sha.js/index.js":[function(require,module,exports){
        var exports = module.exports = function SHA (algorithm) {
            algorithm = algorithm.toLowerCase()

            var Algorithm = exports[algorithm]
            if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

            return new Algorithm()
        }

        exports.sha = require('./sha')
        exports.sha1 = require('./sha1')
        exports.sha224 = require('./sha224')
        exports.sha256 = require('./sha256')
        exports.sha384 = require('./sha384')
        exports.sha512 = require('./sha512')

    },{"./sha":"/bytetrade-js/node_modules/sha.js/sha.js","./sha1":"/bytetrade-js/node_modules/sha.js/sha1.js","./sha224":"/bytetrade-js/node_modules/sha.js/sha224.js","./sha256":"/bytetrade-js/node_modules/sha.js/sha256.js","./sha384":"/bytetrade-js/node_modules/sha.js/sha384.js","./sha512":"/bytetrade-js/node_modules/sha.js/sha512.js"}],"/bytetrade-js/node_modules/sha.js/sha.js":[function(require,module,exports){
        /*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

        var inherits = require('inherits')
        var Hash = require('./hash')
        var Buffer = require('safe-buffer').Buffer

        var K = [
            0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
        ]

        var W = new Array(80)

        function Sha () {
            this.init()
            this._w = W

            Hash.call(this, 64, 56)
        }

        inherits(Sha, Hash)

        Sha.prototype.init = function () {
            this._a = 0x67452301
            this._b = 0xefcdab89
            this._c = 0x98badcfe
            this._d = 0x10325476
            this._e = 0xc3d2e1f0

            return this
        }

        function rotl5 (num) {
            return (num << 5) | (num >>> 27)
        }

        function rotl30 (num) {
            return (num << 30) | (num >>> 2)
        }

        function ft (s, b, c, d) {
            if (s === 0) return (b & c) | ((~b) & d)
            if (s === 2) return (b & c) | (b & d) | (c & d)
            return b ^ c ^ d
        }

        Sha.prototype._update = function (M) {
            var W = this._w

            var a = this._a | 0
            var b = this._b | 0
            var c = this._c | 0
            var d = this._d | 0
            var e = this._e | 0

            for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
            for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

            for (var j = 0; j < 80; ++j) {
                var s = ~~(j / 20)
                var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

                e = d
                d = c
                c = rotl30(b)
                b = a
                a = t
            }

            this._a = (a + this._a) | 0
            this._b = (b + this._b) | 0
            this._c = (c + this._c) | 0
            this._d = (d + this._d) | 0
            this._e = (e + this._e) | 0
        }

        Sha.prototype._hash = function () {
            var H = Buffer.allocUnsafe(20)

            H.writeInt32BE(this._a | 0, 0)
            H.writeInt32BE(this._b | 0, 4)
            H.writeInt32BE(this._c | 0, 8)
            H.writeInt32BE(this._d | 0, 12)
            H.writeInt32BE(this._e | 0, 16)

            return H
        }

        module.exports = Sha

    },{"./hash":"/bytetrade-js/node_modules/sha.js/hash.js","inherits":"/bytetrade-js/node_modules/inherits/inherits_browser.js","safe-buffer":"/bytetrade-js/node_modules/safe-buffer/index.js"}],"/bytetrade-js/node_modules/sha.js/sha1.js":[function(require,module,exports){
        /*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

        var inherits = require('inherits')
        var Hash = require('./hash')
        var Buffer = require('safe-buffer').Buffer

        var K = [
            0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
        ]

        var W = new Array(80)

        function Sha1 () {
            this.init()
            this._w = W

            Hash.call(this, 64, 56)
        }

        inherits(Sha1, Hash)

        Sha1.prototype.init = function () {
            this._a = 0x67452301
            this._b = 0xefcdab89
            this._c = 0x98badcfe
            this._d = 0x10325476
            this._e = 0xc3d2e1f0

            return this
        }

        function rotl1 (num) {
            return (num << 1) | (num >>> 31)
        }

        function rotl5 (num) {
            return (num << 5) | (num >>> 27)
        }

        function rotl30 (num) {
            return (num << 30) | (num >>> 2)
        }

        function ft (s, b, c, d) {
            if (s === 0) return (b & c) | ((~b) & d)
            if (s === 2) return (b & c) | (b & d) | (c & d)
            return b ^ c ^ d
        }

        Sha1.prototype._update = function (M) {
            var W = this._w

            var a = this._a | 0
            var b = this._b | 0
            var c = this._c | 0
            var d = this._d | 0
            var e = this._e | 0

            for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
            for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

            for (var j = 0; j < 80; ++j) {
                var s = ~~(j / 20)
                var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

                e = d
                d = c
                c = rotl30(b)
                b = a
                a = t
            }

            this._a = (a + this._a) | 0
            this._b = (b + this._b) | 0
            this._c = (c + this._c) | 0
            this._d = (d + this._d) | 0
            this._e = (e + this._e) | 0
        }

        Sha1.prototype._hash = function () {
            var H = Buffer.allocUnsafe(20)

            H.writeInt32BE(this._a | 0, 0)
            H.writeInt32BE(this._b | 0, 4)
            H.writeInt32BE(this._c | 0, 8)
            H.writeInt32BE(this._d | 0, 12)
            H.writeInt32BE(this._e | 0, 16)

            return H
        }

        module.exports = Sha1

    },{"./hash":"/bytetrade-js/node_modules/sha.js/hash.js","inherits":"/bytetrade-js/node_modules/inherits/inherits_browser.js","safe-buffer":"/bytetrade-js/node_modules/safe-buffer/index.js"}],"/bytetrade-js/node_modules/sha.js/sha224.js":[function(require,module,exports){
        /**
         * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
         * in FIPS 180-2
         * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
         * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
         *
         */

        var inherits = require('inherits')
        var Sha256 = require('./sha256')
        var Hash = require('./hash')
        var Buffer = require('safe-buffer').Buffer

        var W = new Array(64)

        function Sha224 () {
            this.init()

            this._w = W // new Array(64)

            Hash.call(this, 64, 56)
        }

        inherits(Sha224, Sha256)

        Sha224.prototype.init = function () {
            this._a = 0xc1059ed8
            this._b = 0x367cd507
            this._c = 0x3070dd17
            this._d = 0xf70e5939
            this._e = 0xffc00b31
            this._f = 0x68581511
            this._g = 0x64f98fa7
            this._h = 0xbefa4fa4

            return this
        }

        Sha224.prototype._hash = function () {
            var H = Buffer.allocUnsafe(28)

            H.writeInt32BE(this._a, 0)
            H.writeInt32BE(this._b, 4)
            H.writeInt32BE(this._c, 8)
            H.writeInt32BE(this._d, 12)
            H.writeInt32BE(this._e, 16)
            H.writeInt32BE(this._f, 20)
            H.writeInt32BE(this._g, 24)

            return H
        }

        module.exports = Sha224

    },{"./hash":"/bytetrade-js/node_modules/sha.js/hash.js","./sha256":"/bytetrade-js/node_modules/sha.js/sha256.js","inherits":"/bytetrade-js/node_modules/inherits/inherits_browser.js","safe-buffer":"/bytetrade-js/node_modules/safe-buffer/index.js"}],"/bytetrade-js/node_modules/sha.js/sha256.js":[function(require,module,exports){
        /**
         * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
         * in FIPS 180-2
         * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
         * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
         *
         */

        var inherits = require('inherits')
        var Hash = require('./hash')
        var Buffer = require('safe-buffer').Buffer

        var K = [
            0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
            0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
            0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
            0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
            0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
            0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
            0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
            0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
            0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
            0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
            0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
            0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
            0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
            0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
            0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
            0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
        ]

        var W = new Array(64)

        function Sha256 () {
            this.init()

            this._w = W // new Array(64)

            Hash.call(this, 64, 56)
        }

        inherits(Sha256, Hash)

        Sha256.prototype.init = function () {
            this._a = 0x6a09e667
            this._b = 0xbb67ae85
            this._c = 0x3c6ef372
            this._d = 0xa54ff53a
            this._e = 0x510e527f
            this._f = 0x9b05688c
            this._g = 0x1f83d9ab
            this._h = 0x5be0cd19

            return this
        }

        function ch (x, y, z) {
            return z ^ (x & (y ^ z))
        }

        function maj (x, y, z) {
            return (x & y) | (z & (x | y))
        }

        function sigma0 (x) {
            return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
        }

        function sigma1 (x) {
            return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
        }

        function gamma0 (x) {
            return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
        }

        function gamma1 (x) {
            return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
        }

        Sha256.prototype._update = function (M) {
            var W = this._w

            var a = this._a | 0
            var b = this._b | 0
            var c = this._c | 0
            var d = this._d | 0
            var e = this._e | 0
            var f = this._f | 0
            var g = this._g | 0
            var h = this._h | 0

            for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
            for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

            for (var j = 0; j < 64; ++j) {
                var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
                var T2 = (sigma0(a) + maj(a, b, c)) | 0

                h = g
                g = f
                f = e
                e = (d + T1) | 0
                d = c
                c = b
                b = a
                a = (T1 + T2) | 0
            }

            this._a = (a + this._a) | 0
            this._b = (b + this._b) | 0
            this._c = (c + this._c) | 0
            this._d = (d + this._d) | 0
            this._e = (e + this._e) | 0
            this._f = (f + this._f) | 0
            this._g = (g + this._g) | 0
            this._h = (h + this._h) | 0
        }

        Sha256.prototype._hash = function () {
            var H = Buffer.allocUnsafe(32)

            H.writeInt32BE(this._a, 0)
            H.writeInt32BE(this._b, 4)
            H.writeInt32BE(this._c, 8)
            H.writeInt32BE(this._d, 12)
            H.writeInt32BE(this._e, 16)
            H.writeInt32BE(this._f, 20)
            H.writeInt32BE(this._g, 24)
            H.writeInt32BE(this._h, 28)

            return H
        }

        module.exports = Sha256

    },{"./hash":"/bytetrade-js/node_modules/sha.js/hash.js","inherits":"/bytetrade-js/node_modules/inherits/inherits_browser.js","safe-buffer":"/bytetrade-js/node_modules/safe-buffer/index.js"}],"/bytetrade-js/node_modules/sha.js/sha384.js":[function(require,module,exports){
        var inherits = require('inherits')
        var SHA512 = require('./sha512')
        var Hash = require('./hash')
        var Buffer = require('safe-buffer').Buffer

        var W = new Array(160)

        function Sha384 () {
            this.init()
            this._w = W

            Hash.call(this, 128, 112)
        }

        inherits(Sha384, SHA512)

        Sha384.prototype.init = function () {
            this._ah = 0xcbbb9d5d
            this._bh = 0x629a292a
            this._ch = 0x9159015a
            this._dh = 0x152fecd8
            this._eh = 0x67332667
            this._fh = 0x8eb44a87
            this._gh = 0xdb0c2e0d
            this._hh = 0x47b5481d

            this._al = 0xc1059ed8
            this._bl = 0x367cd507
            this._cl = 0x3070dd17
            this._dl = 0xf70e5939
            this._el = 0xffc00b31
            this._fl = 0x68581511
            this._gl = 0x64f98fa7
            this._hl = 0xbefa4fa4

            return this
        }

        Sha384.prototype._hash = function () {
            var H = Buffer.allocUnsafe(48)

            function writeInt64BE (h, l, offset) {
                H.writeInt32BE(h, offset)
                H.writeInt32BE(l, offset + 4)
            }

            writeInt64BE(this._ah, this._al, 0)
            writeInt64BE(this._bh, this._bl, 8)
            writeInt64BE(this._ch, this._cl, 16)
            writeInt64BE(this._dh, this._dl, 24)
            writeInt64BE(this._eh, this._el, 32)
            writeInt64BE(this._fh, this._fl, 40)

            return H
        }

        module.exports = Sha384

    },{"./hash":"/bytetrade-js/node_modules/sha.js/hash.js","./sha512":"/bytetrade-js/node_modules/sha.js/sha512.js","inherits":"/bytetrade-js/node_modules/inherits/inherits_browser.js","safe-buffer":"/bytetrade-js/node_modules/safe-buffer/index.js"}],"/bytetrade-js/node_modules/sha.js/sha512.js":[function(require,module,exports){
        var inherits = require('inherits')
        var Hash = require('./hash')
        var Buffer = require('safe-buffer').Buffer

        var K = [
            0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
            0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
            0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
            0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
            0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
            0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
            0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
            0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
            0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
            0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
            0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
            0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
            0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
            0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
            0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
            0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
            0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
            0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
            0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
            0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
            0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
            0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
            0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
            0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
            0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
            0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
            0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
            0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
            0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
            0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
            0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
            0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
            0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
            0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
            0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
            0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
            0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
            0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
            0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
            0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
        ]

        var W = new Array(160)

        function Sha512 () {
            this.init()
            this._w = W

            Hash.call(this, 128, 112)
        }

        inherits(Sha512, Hash)

        Sha512.prototype.init = function () {
            this._ah = 0x6a09e667
            this._bh = 0xbb67ae85
            this._ch = 0x3c6ef372
            this._dh = 0xa54ff53a
            this._eh = 0x510e527f
            this._fh = 0x9b05688c
            this._gh = 0x1f83d9ab
            this._hh = 0x5be0cd19

            this._al = 0xf3bcc908
            this._bl = 0x84caa73b
            this._cl = 0xfe94f82b
            this._dl = 0x5f1d36f1
            this._el = 0xade682d1
            this._fl = 0x2b3e6c1f
            this._gl = 0xfb41bd6b
            this._hl = 0x137e2179

            return this
        }

        function Ch (x, y, z) {
            return z ^ (x & (y ^ z))
        }

        function maj (x, y, z) {
            return (x & y) | (z & (x | y))
        }

        function sigma0 (x, xl) {
            return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
        }

        function sigma1 (x, xl) {
            return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
        }

        function Gamma0 (x, xl) {
            return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
        }

        function Gamma0l (x, xl) {
            return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
        }

        function Gamma1 (x, xl) {
            return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
        }

        function Gamma1l (x, xl) {
            return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
        }

        function getCarry (a, b) {
            return (a >>> 0) < (b >>> 0) ? 1 : 0
        }

        Sha512.prototype._update = function (M) {
            var W = this._w

            var ah = this._ah | 0
            var bh = this._bh | 0
            var ch = this._ch | 0
            var dh = this._dh | 0
            var eh = this._eh | 0
            var fh = this._fh | 0
            var gh = this._gh | 0
            var hh = this._hh | 0

            var al = this._al | 0
            var bl = this._bl | 0
            var cl = this._cl | 0
            var dl = this._dl | 0
            var el = this._el | 0
            var fl = this._fl | 0
            var gl = this._gl | 0
            var hl = this._hl | 0

            for (var i = 0; i < 32; i += 2) {
                W[i] = M.readInt32BE(i * 4)
                W[i + 1] = M.readInt32BE(i * 4 + 4)
            }
            for (; i < 160; i += 2) {
                var xh = W[i - 15 * 2]
                var xl = W[i - 15 * 2 + 1]
                var gamma0 = Gamma0(xh, xl)
                var gamma0l = Gamma0l(xl, xh)

                xh = W[i - 2 * 2]
                xl = W[i - 2 * 2 + 1]
                var gamma1 = Gamma1(xh, xl)
                var gamma1l = Gamma1l(xl, xh)

                // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
                var Wi7h = W[i - 7 * 2]
                var Wi7l = W[i - 7 * 2 + 1]

                var Wi16h = W[i - 16 * 2]
                var Wi16l = W[i - 16 * 2 + 1]

                var Wil = (gamma0l + Wi7l) | 0
                var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
                Wil = (Wil + gamma1l) | 0
                Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
                Wil = (Wil + Wi16l) | 0
                Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

                W[i] = Wih
                W[i + 1] = Wil
            }

            for (var j = 0; j < 160; j += 2) {
                Wih = W[j]
                Wil = W[j + 1]

                var majh = maj(ah, bh, ch)
                var majl = maj(al, bl, cl)

                var sigma0h = sigma0(ah, al)
                var sigma0l = sigma0(al, ah)
                var sigma1h = sigma1(eh, el)
                var sigma1l = sigma1(el, eh)

                // t1 = h + sigma1 + ch + K[j] + W[j]
                var Kih = K[j]
                var Kil = K[j + 1]

                var chh = Ch(eh, fh, gh)
                var chl = Ch(el, fl, gl)

                var t1l = (hl + sigma1l) | 0
                var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
                t1l = (t1l + chl) | 0
                t1h = (t1h + chh + getCarry(t1l, chl)) | 0
                t1l = (t1l + Kil) | 0
                t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
                t1l = (t1l + Wil) | 0
                t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

                // t2 = sigma0 + maj
                var t2l = (sigma0l + majl) | 0
                var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

                hh = gh
                hl = gl
                gh = fh
                gl = fl
                fh = eh
                fl = el
                el = (dl + t1l) | 0
                eh = (dh + t1h + getCarry(el, dl)) | 0
                dh = ch
                dl = cl
                ch = bh
                cl = bl
                bh = ah
                bl = al
                al = (t1l + t2l) | 0
                ah = (t1h + t2h + getCarry(al, t1l)) | 0
            }

            this._al = (this._al + al) | 0
            this._bl = (this._bl + bl) | 0
            this._cl = (this._cl + cl) | 0
            this._dl = (this._dl + dl) | 0
            this._el = (this._el + el) | 0
            this._fl = (this._fl + fl) | 0
            this._gl = (this._gl + gl) | 0
            this._hl = (this._hl + hl) | 0

            this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
            this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
            this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
            this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
            this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
            this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
            this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
            this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
        }

        Sha512.prototype._hash = function () {
            var H = Buffer.allocUnsafe(64)

            function writeInt64BE (h, l, offset) {
                H.writeInt32BE(h, offset)
                H.writeInt32BE(l, offset + 4)
            }

            writeInt64BE(this._ah, this._al, 0)
            writeInt64BE(this._bh, this._bl, 8)
            writeInt64BE(this._ch, this._cl, 16)
            writeInt64BE(this._dh, this._dl, 24)
            writeInt64BE(this._eh, this._el, 32)
            writeInt64BE(this._fh, this._fl, 40)
            writeInt64BE(this._gh, this._gl, 48)
            writeInt64BE(this._hh, this._hl, 56)

            return H
        }

        module.exports = Sha512

    },{"./hash":"/bytetrade-js/node_modules/sha.js/hash.js","inherits":"/bytetrade-js/node_modules/inherits/inherits_browser.js","safe-buffer":"/bytetrade-js/node_modules/safe-buffer/index.js"}],"/bytetrade-js/node_modules/stream-browserify/index.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

        module.exports = Stream;

        var EE = require('events').EventEmitter;
        var inherits = require('inherits');

        inherits(Stream, EE);
        Stream.Readable = require('readable-stream/readable.js');
        Stream.Writable = require('readable-stream/writable.js');
        Stream.Duplex = require('readable-stream/duplex.js');
        Stream.Transform = require('readable-stream/transform.js');
        Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
        Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

        function Stream() {
            EE.call(this);
        }

        Stream.prototype.pipe = function(dest, options) {
            var source = this;

            function ondata(chunk) {
                if (dest.writable) {
                    if (false === dest.write(chunk) && source.pause) {
                        source.pause();
                    }
                }
            }

            source.on('data', ondata);

            function ondrain() {
                if (source.readable && source.resume) {
                    source.resume();
                }
            }

            dest.on('drain', ondrain);

            // If the 'end' option is not supplied, dest.end() will be called when
            // source gets the 'end' or 'close' events.  Only dest.end() once.
            if (!dest._isStdio && (!options || options.end !== false)) {
                source.on('end', onend);
                source.on('close', onclose);
            }

            var didOnEnd = false;
            function onend() {
                if (didOnEnd) return;
                didOnEnd = true;

                dest.end();
            }


            function onclose() {
                if (didOnEnd) return;
                didOnEnd = true;

                if (typeof dest.destroy === 'function') dest.destroy();
            }

            // don't leave dangling pipes when there are errors.
            function onerror(er) {
                cleanup();
                if (EE.listenerCount(this, 'error') === 0) {
                    throw er; // Unhandled stream error in pipe.
                }
            }

            source.on('error', onerror);
            dest.on('error', onerror);

            // remove all the event listeners that were added.
            function cleanup() {
                source.removeListener('data', ondata);
                dest.removeListener('drain', ondrain);

                source.removeListener('end', onend);
                source.removeListener('close', onclose);

                source.removeListener('error', onerror);
                dest.removeListener('error', onerror);

                source.removeListener('end', cleanup);
                source.removeListener('close', cleanup);

                dest.removeListener('close', cleanup);
            }

            source.on('end', cleanup);
            source.on('close', cleanup);

            dest.on('close', cleanup);

            dest.emit('pipe', source);

            // Allow for unix-like usage: A.pipe(B).pipe(C)
            return dest;
        };

    },{"events":"/bytetrade-js/node_modules/events/events.js","inherits":"/bytetrade-js/node_modules/inherits/inherits_browser.js","readable-stream/duplex.js":"/bytetrade-js/node_modules/readable-stream/duplex-browser.js","readable-stream/passthrough.js":"/bytetrade-js/node_modules/readable-stream/passthrough.js","readable-stream/readable.js":"/bytetrade-js/node_modules/readable-stream/readable-browser.js","readable-stream/transform.js":"/bytetrade-js/node_modules/readable-stream/transform.js","readable-stream/writable.js":"/bytetrade-js/node_modules/readable-stream/writable-browser.js"}],"/bytetrade-js/node_modules/string_decoder/lib/string_decoder.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

        'use strict';

        /*<replacement>*/

        var Buffer = require('safe-buffer').Buffer;
        /*</replacement>*/

        var isEncoding = Buffer.isEncoding || function (encoding) {
            encoding = '' + encoding;
            switch (encoding && encoding.toLowerCase()) {
                case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
                    return true;
                default:
                    return false;
            }
        };

        function _normalizeEncoding(enc) {
            if (!enc) return 'utf8';
            var retried;
            while (true) {
                switch (enc) {
                    case 'utf8':
                    case 'utf-8':
                        return 'utf8';
                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                        return 'utf16le';
                    case 'latin1':
                    case 'binary':
                        return 'latin1';
                    case 'base64':
                    case 'ascii':
                    case 'hex':
                        return enc;
                    default:
                        if (retried) return; // undefined
                        enc = ('' + enc).toLowerCase();
                        retried = true;
                }
            }
        };

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
        function normalizeEncoding(enc) {
            var nenc = _normalizeEncoding(enc);
            if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
            return nenc || enc;
        }

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
        exports.StringDecoder = StringDecoder;
        function StringDecoder(encoding) {
            this.encoding = normalizeEncoding(encoding);
            var nb;
            switch (this.encoding) {
                case 'utf16le':
                    this.text = utf16Text;
                    this.end = utf16End;
                    nb = 4;
                    break;
                case 'utf8':
                    this.fillLast = utf8FillLast;
                    nb = 4;
                    break;
                case 'base64':
                    this.text = base64Text;
                    this.end = base64End;
                    nb = 3;
                    break;
                default:
                    this.write = simpleWrite;
                    this.end = simpleEnd;
                    return;
            }
            this.lastNeed = 0;
            this.lastTotal = 0;
            this.lastChar = Buffer.allocUnsafe(nb);
        }

        StringDecoder.prototype.write = function (buf) {
            if (buf.length === 0) return '';
            var r;
            var i;
            if (this.lastNeed) {
                r = this.fillLast(buf);
                if (r === undefined) return '';
                i = this.lastNeed;
                this.lastNeed = 0;
            } else {
                i = 0;
            }
            if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
            return r || '';
        };

        StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
        StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
        StringDecoder.prototype.fillLast = function (buf) {
            if (this.lastNeed <= buf.length) {
                buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
                return this.lastChar.toString(this.encoding, 0, this.lastTotal);
            }
            buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
            this.lastNeed -= buf.length;
        };

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
        function utf8CheckByte(byte) {
            if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
            return byte >> 6 === 0x02 ? -1 : -2;
        }

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
        function utf8CheckIncomplete(self, buf, i) {
            var j = buf.length - 1;
            if (j < i) return 0;
            var nb = utf8CheckByte(buf[j]);
            if (nb >= 0) {
                if (nb > 0) self.lastNeed = nb - 1;
                return nb;
            }
            if (--j < i || nb === -2) return 0;
            nb = utf8CheckByte(buf[j]);
            if (nb >= 0) {
                if (nb > 0) self.lastNeed = nb - 2;
                return nb;
            }
            if (--j < i || nb === -2) return 0;
            nb = utf8CheckByte(buf[j]);
            if (nb >= 0) {
                if (nb > 0) {
                    if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
                }
                return nb;
            }
            return 0;
        }

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
        function utf8CheckExtraBytes(self, buf, p) {
            if ((buf[0] & 0xC0) !== 0x80) {
                self.lastNeed = 0;
                return '\ufffd';
            }
            if (self.lastNeed > 1 && buf.length > 1) {
                if ((buf[1] & 0xC0) !== 0x80) {
                    self.lastNeed = 1;
                    return '\ufffd';
                }
                if (self.lastNeed > 2 && buf.length > 2) {
                    if ((buf[2] & 0xC0) !== 0x80) {
                        self.lastNeed = 2;
                        return '\ufffd';
                    }
                }
            }
        }

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
        function utf8FillLast(buf) {
            var p = this.lastTotal - this.lastNeed;
            var r = utf8CheckExtraBytes(this, buf, p);
            if (r !== undefined) return r;
            if (this.lastNeed <= buf.length) {
                buf.copy(this.lastChar, p, 0, this.lastNeed);
                return this.lastChar.toString(this.encoding, 0, this.lastTotal);
            }
            buf.copy(this.lastChar, p, 0, buf.length);
            this.lastNeed -= buf.length;
        }

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
        function utf8Text(buf, i) {
            var total = utf8CheckIncomplete(this, buf, i);
            if (!this.lastNeed) return buf.toString('utf8', i);
            this.lastTotal = total;
            var end = buf.length - (total - this.lastNeed);
            buf.copy(this.lastChar, 0, end);
            return buf.toString('utf8', i, end);
        }

// For UTF-8, a replacement character is added when ending on a partial
// character.
        function utf8End(buf) {
            var r = buf && buf.length ? this.write(buf) : '';
            if (this.lastNeed) return r + '\ufffd';
            return r;
        }

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
        function utf16Text(buf, i) {
            if ((buf.length - i) % 2 === 0) {
                var r = buf.toString('utf16le', i);
                if (r) {
                    var c = r.charCodeAt(r.length - 1);
                    if (c >= 0xD800 && c <= 0xDBFF) {
                        this.lastNeed = 2;
                        this.lastTotal = 4;
                        this.lastChar[0] = buf[buf.length - 2];
                        this.lastChar[1] = buf[buf.length - 1];
                        return r.slice(0, -1);
                    }
                }
                return r;
            }
            this.lastNeed = 1;
            this.lastTotal = 2;
            this.lastChar[0] = buf[buf.length - 1];
            return buf.toString('utf16le', i, buf.length - 1);
        }

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
        function utf16End(buf) {
            var r = buf && buf.length ? this.write(buf) : '';
            if (this.lastNeed) {
                var end = this.lastTotal - this.lastNeed;
                return r + this.lastChar.toString('utf16le', 0, end);
            }
            return r;
        }

        function base64Text(buf, i) {
            var n = (buf.length - i) % 3;
            if (n === 0) return buf.toString('base64', i);
            this.lastNeed = 3 - n;
            this.lastTotal = 3;
            if (n === 1) {
                this.lastChar[0] = buf[buf.length - 1];
            } else {
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
            }
            return buf.toString('base64', i, buf.length - n);
        }

        function base64End(buf) {
            var r = buf && buf.length ? this.write(buf) : '';
            if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
            return r;
        }

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
        function simpleWrite(buf) {
            return buf.toString(this.encoding);
        }

        function simpleEnd(buf) {
            return buf && buf.length ? this.write(buf) : '';
        }
    },{"safe-buffer":"/bytetrade-js/node_modules/safe-buffer/index.js"}],"/bytetrade-js/node_modules/timers-browserify/main.js":[function(require,module,exports){
        (function (setImmediate,clearImmediate){
            var nextTick = require('process/browser.js').nextTick;
            var apply = Function.prototype.apply;
            var slice = Array.prototype.slice;
            var immediateIds = {};
            var nextImmediateId = 0;

// DOM APIs, for completeness

            exports.setTimeout = function() {
                return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
            };
            exports.setInterval = function() {
                return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
            };
            exports.clearTimeout =
                exports.clearInterval = function(timeout) { timeout.close(); };

            function Timeout(id, clearFn) {
                this._id = id;
                this._clearFn = clearFn;
            }
            Timeout.prototype.unref = Timeout.prototype.ref = function() {};
            Timeout.prototype.close = function() {
                this._clearFn.call(window, this._id);
            };

// Does not start the time, just sets up the members needed.
            exports.enroll = function(item, msecs) {
                clearTimeout(item._idleTimeoutId);
                item._idleTimeout = msecs;
            };

            exports.unenroll = function(item) {
                clearTimeout(item._idleTimeoutId);
                item._idleTimeout = -1;
            };

            exports._unrefActive = exports.active = function(item) {
                clearTimeout(item._idleTimeoutId);

                var msecs = item._idleTimeout;
                if (msecs >= 0) {
                    item._idleTimeoutId = setTimeout(function onTimeout() {
                        if (item._onTimeout)
                            item._onTimeout();
                    }, msecs);
                }
            };

// That's not how node.js implements it but the exposed api is the same.
            exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
                var id = nextImmediateId++;
                var args = arguments.length < 2 ? false : slice.call(arguments, 1);

                immediateIds[id] = true;

                nextTick(function onNextTick() {
                    if (immediateIds[id]) {
                        // fn.call() is faster so we optimize for the common use-case
                        // @see http://jsperf.com/call-apply-segu
                        if (args) {
                            fn.apply(null, args);
                        } else {
                            fn.call(null);
                        }
                        // Prevent ids from leaking
                        exports.clearImmediate(id);
                    }
                });

                return id;
            };

            exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
                delete immediateIds[id];
            };
        }).call(this,require("timers").setImmediate,require("timers").clearImmediate)

    },{"process/browser.js":"/bytetrade-js/node_modules/process/browser.js","timers":"/bytetrade-js/node_modules/timers-browserify/main.js"}],"/bytetrade-js/node_modules/unorm/lib/unorm.js":[function(require,module,exports){
        (function (root) {
            "use strict";

            /***** unorm.js *****/

            /*
 * UnicodeNormalizer 1.0.0
 * Copyright (c) 2008 Matsuza
 * Dual licensed under the MIT (MIT-LICENSE.txt) and GPL (GPL-LICENSE.txt) licenses.
 * $Date: 2008-06-05 16:44:17 +0200 (Thu, 05 Jun 2008) $
 * $Rev: 13309 $
 */

            var DEFAULT_FEATURE = [null, 0, {}];
            var CACHE_THRESHOLD = 10;
            var SBase = 0xAC00, LBase = 0x1100, VBase = 0x1161, TBase = 0x11A7, LCount = 19, VCount = 21, TCount = 28;
            var NCount = VCount * TCount; // 588
            var SCount = LCount * NCount; // 11172

            var UChar = function(cp, feature){
                this.codepoint = cp;
                this.feature = feature;
            };

            // Strategies
            var cache = {};
            var cacheCounter = [];
            for (var i = 0; i <= 0xFF; ++i){
                cacheCounter[i] = 0;
            }

            function fromCache(next, cp, needFeature){
                var ret = cache[cp];
                if(!ret){
                    ret = next(cp, needFeature);
                    if(!!ret.feature && ++cacheCounter[(cp >> 8) & 0xFF] > CACHE_THRESHOLD){
                        cache[cp] = ret;
                    }
                }
                return ret;
            }

            function fromData(next, cp, needFeature){
                var hash = cp & 0xFF00;
                var dunit = UChar.udata[hash] || {};
                var f = dunit[cp];
                return f ? new UChar(cp, f) : new UChar(cp, DEFAULT_FEATURE);
            }
            function fromCpOnly(next, cp, needFeature){
                return !!needFeature ? next(cp, needFeature) : new UChar(cp, null);
            }
            function fromRuleBasedJamo(next, cp, needFeature){
                var j;
                if(cp < LBase || (LBase + LCount <= cp && cp < SBase) || (SBase + SCount < cp)){
                    return next(cp, needFeature);
                }
                if(LBase <= cp && cp < LBase + LCount){
                    var c = {};
                    var base = (cp - LBase) * VCount;
                    for (j = 0; j < VCount; ++j){
                        c[VBase + j] = SBase + TCount * (j + base);
                    }
                    return new UChar(cp, [,,c]);
                }

                var SIndex = cp - SBase;
                var TIndex = SIndex % TCount;
                var feature = [];
                if(TIndex !== 0){
                    feature[0] = [SBase + SIndex - TIndex, TBase + TIndex];
                } else {
                    feature[0] = [LBase + Math.floor(SIndex / NCount), VBase + Math.floor((SIndex % NCount) / TCount)];
                    feature[2] = {};
                    for (j = 1; j < TCount; ++j){
                        feature[2][TBase + j] = cp + j;
                    }
                }
                return new UChar(cp, feature);
            }
            function fromCpFilter(next, cp, needFeature){
                return cp < 60 || 13311 < cp && cp < 42607 ? new UChar(cp, DEFAULT_FEATURE) : next(cp, needFeature);
            }

            var strategies = [fromCpFilter, fromCache, fromCpOnly, fromRuleBasedJamo, fromData];

            UChar.fromCharCode = strategies.reduceRight(function (next, strategy) {
                return function (cp, needFeature) {
                    return strategy(next, cp, needFeature);
                };
            }, null);

            UChar.isHighSurrogate = function(cp){
                return cp >= 0xD800 && cp <= 0xDBFF;
            };
            UChar.isLowSurrogate = function(cp){
                return cp >= 0xDC00 && cp <= 0xDFFF;
            };

            UChar.prototype.prepFeature = function(){
                if(!this.feature){
                    this.feature = UChar.fromCharCode(this.codepoint, true).feature;
                }
            };

            UChar.prototype.toString = function(){
                if(this.codepoint < 0x10000){
                    return String.fromCharCode(this.codepoint);
                } else {
                    var x = this.codepoint - 0x10000;
                    return String.fromCharCode(Math.floor(x / 0x400) + 0xD800, x % 0x400 + 0xDC00);
                }
            };

            UChar.prototype.getDecomp = function(){
                this.prepFeature();
                return this.feature[0] || null;
            };

            UChar.prototype.isCompatibility = function(){
                this.prepFeature();
                return !!this.feature[1] && (this.feature[1] & (1 << 8));
            };
            UChar.prototype.isExclude = function(){
                this.prepFeature();
                return !!this.feature[1] && (this.feature[1] & (1 << 9));
            };
            UChar.prototype.getCanonicalClass = function(){
                this.prepFeature();
                return !!this.feature[1] ? (this.feature[1] & 0xff) : 0;
            };
            UChar.prototype.getComposite = function(following){
                this.prepFeature();
                if(!this.feature[2]){
                    return null;
                }
                var cp = this.feature[2][following.codepoint];
                return cp ? UChar.fromCharCode(cp) : null;
            };

            var UCharIterator = function(str){
                this.str = str;
                this.cursor = 0;
            };
            UCharIterator.prototype.next = function(){
                if(!!this.str && this.cursor < this.str.length){
                    var cp = this.str.charCodeAt(this.cursor++);
                    var d;
                    if(UChar.isHighSurrogate(cp) && this.cursor < this.str.length && UChar.isLowSurrogate((d = this.str.charCodeAt(this.cursor)))){
                        cp = (cp - 0xD800) * 0x400 + (d -0xDC00) + 0x10000;
                        ++this.cursor;
                    }
                    return UChar.fromCharCode(cp);
                } else {
                    this.str = null;
                    return null;
                }
            };

            var RecursDecompIterator = function(it, cano){
                this.it = it;
                this.canonical = cano;
                this.resBuf = [];
            };

            RecursDecompIterator.prototype.next = function(){
                function recursiveDecomp(cano, uchar){
                    var decomp = uchar.getDecomp();
                    if(!!decomp && !(cano && uchar.isCompatibility())){
                        var ret = [];
                        for(var i = 0; i < decomp.length; ++i){
                            var a = recursiveDecomp(cano, UChar.fromCharCode(decomp[i]));
                            ret = ret.concat(a);
                        }
                        return ret;
                    } else {
                        return [uchar];
                    }
                }
                if(this.resBuf.length === 0){
                    var uchar = this.it.next();
                    if(!uchar){
                        return null;
                    }
                    this.resBuf = recursiveDecomp(this.canonical, uchar);
                }
                return this.resBuf.shift();
            };

            var DecompIterator = function(it){
                this.it = it;
                this.resBuf = [];
            };

            DecompIterator.prototype.next = function(){
                var cc;
                if(this.resBuf.length === 0){
                    do{
                        var uchar = this.it.next();
                        if(!uchar){
                            break;
                        }
                        cc = uchar.getCanonicalClass();
                        var inspt = this.resBuf.length;
                        if(cc !== 0){
                            for(; inspt > 0; --inspt){
                                var uchar2 = this.resBuf[inspt - 1];
                                var cc2 = uchar2.getCanonicalClass();
                                if(cc2 <= cc){
                                    break;
                                }
                            }
                        }
                        this.resBuf.splice(inspt, 0, uchar);
                    } while(cc !== 0);
                }
                return this.resBuf.shift();
            };

            var CompIterator = function(it){
                this.it = it;
                this.procBuf = [];
                this.resBuf = [];
                this.lastClass = null;
            };

            CompIterator.prototype.next = function(){
                while(this.resBuf.length === 0){
                    var uchar = this.it.next();
                    if(!uchar){
                        this.resBuf = this.procBuf;
                        this.procBuf = [];
                        break;
                    }
                    if(this.procBuf.length === 0){
                        this.lastClass = uchar.getCanonicalClass();
                        this.procBuf.push(uchar);
                    } else {
                        var starter = this.procBuf[0];
                        var composite = starter.getComposite(uchar);
                        var cc = uchar.getCanonicalClass();
                        if(!!composite && (this.lastClass < cc || this.lastClass === 0)){
                            this.procBuf[0] = composite;
                        } else {
                            if(cc === 0){
                                this.resBuf = this.procBuf;
                                this.procBuf = [];
                            }
                            this.lastClass = cc;
                            this.procBuf.push(uchar);
                        }
                    }
                }
                return this.resBuf.shift();
            };

            var createIterator = function(mode, str){
                switch(mode){
                    case "NFD":
                        return new DecompIterator(new RecursDecompIterator(new UCharIterator(str), true));
                    case "NFKD":
                        return new DecompIterator(new RecursDecompIterator(new UCharIterator(str), false));
                    case "NFC":
                        return new CompIterator(new DecompIterator(new RecursDecompIterator(new UCharIterator(str), true)));
                    case "NFKC":
                        return new CompIterator(new DecompIterator(new RecursDecompIterator(new UCharIterator(str), false)));
                }
                throw mode + " is invalid";
            };
            var normalize = function(mode, str){
                var it = createIterator(mode, str);
                var ret = "";
                var uchar;
                while(!!(uchar = it.next())){
                    ret += uchar.toString();
                }
                return ret;
            };

            /* API functions */
            function nfd(str){
                return normalize("NFD", str);
            }

            function nfkd(str){
                return normalize("NFKD", str);
            }

            function nfc(str){
                return normalize("NFC", str);
            }

            function nfkc(str){
                return normalize("NFKC", str);
            }

            /* Unicode data */
            UChar.udata={
                0:{60:[,,{824:8814}],61:[,,{824:8800}],62:[,,{824:8815}],65:[,,{768:192,769:193,770:194,771:195,772:256,774:258,775:550,776:196,777:7842,778:197,780:461,783:512,785:514,803:7840,805:7680,808:260}],66:[,,{775:7682,803:7684,817:7686}],67:[,,{769:262,770:264,775:266,780:268,807:199}],68:[,,{775:7690,780:270,803:7692,807:7696,813:7698,817:7694}],69:[,,{768:200,769:201,770:202,771:7868,772:274,774:276,775:278,776:203,777:7866,780:282,783:516,785:518,803:7864,807:552,808:280,813:7704,816:7706}],70:[,,{775:7710}],71:[,,{769:500,770:284,772:7712,774:286,775:288,780:486,807:290}],72:[,,{770:292,775:7714,776:7718,780:542,803:7716,807:7720,814:7722}],73:[,,{768:204,769:205,770:206,771:296,772:298,774:300,775:304,776:207,777:7880,780:463,783:520,785:522,803:7882,808:302,816:7724}],74:[,,{770:308}],75:[,,{769:7728,780:488,803:7730,807:310,817:7732}],76:[,,{769:313,780:317,803:7734,807:315,813:7740,817:7738}],77:[,,{769:7742,775:7744,803:7746}],78:[,,{768:504,769:323,771:209,775:7748,780:327,803:7750,807:325,813:7754,817:7752}],79:[,,{768:210,769:211,770:212,771:213,772:332,774:334,775:558,776:214,777:7886,779:336,780:465,783:524,785:526,795:416,803:7884,808:490}],80:[,,{769:7764,775:7766}],82:[,,{769:340,775:7768,780:344,783:528,785:530,803:7770,807:342,817:7774}],83:[,,{769:346,770:348,775:7776,780:352,803:7778,806:536,807:350}],84:[,,{775:7786,780:356,803:7788,806:538,807:354,813:7792,817:7790}],85:[,,{768:217,769:218,770:219,771:360,772:362,774:364,776:220,777:7910,778:366,779:368,780:467,783:532,785:534,795:431,803:7908,804:7794,808:370,813:7798,816:7796}],86:[,,{771:7804,803:7806}],87:[,,{768:7808,769:7810,770:372,775:7814,776:7812,803:7816}],88:[,,{775:7818,776:7820}],89:[,,{768:7922,769:221,770:374,771:7928,772:562,775:7822,776:376,777:7926,803:7924}],90:[,,{769:377,770:7824,775:379,780:381,803:7826,817:7828}],97:[,,{768:224,769:225,770:226,771:227,772:257,774:259,775:551,776:228,777:7843,778:229,780:462,783:513,785:515,803:7841,805:7681,808:261}],98:[,,{775:7683,803:7685,817:7687}],99:[,,{769:263,770:265,775:267,780:269,807:231}],100:[,,{775:7691,780:271,803:7693,807:7697,813:7699,817:7695}],101:[,,{768:232,769:233,770:234,771:7869,772:275,774:277,775:279,776:235,777:7867,780:283,783:517,785:519,803:7865,807:553,808:281,813:7705,816:7707}],102:[,,{775:7711}],103:[,,{769:501,770:285,772:7713,774:287,775:289,780:487,807:291}],104:[,,{770:293,775:7715,776:7719,780:543,803:7717,807:7721,814:7723,817:7830}],105:[,,{768:236,769:237,770:238,771:297,772:299,774:301,776:239,777:7881,780:464,783:521,785:523,803:7883,808:303,816:7725}],106:[,,{770:309,780:496}],107:[,,{769:7729,780:489,803:7731,807:311,817:7733}],108:[,,{769:314,780:318,803:7735,807:316,813:7741,817:7739}],109:[,,{769:7743,775:7745,803:7747}],110:[,,{768:505,769:324,771:241,775:7749,780:328,803:7751,807:326,813:7755,817:7753}],111:[,,{768:242,769:243,770:244,771:245,772:333,774:335,775:559,776:246,777:7887,779:337,780:466,783:525,785:527,795:417,803:7885,808:491}],112:[,,{769:7765,775:7767}],114:[,,{769:341,775:7769,780:345,783:529,785:531,803:7771,807:343,817:7775}],115:[,,{769:347,770:349,775:7777,780:353,803:7779,806:537,807:351}],116:[,,{775:7787,776:7831,780:357,803:7789,806:539,807:355,813:7793,817:7791}],117:[,,{768:249,769:250,770:251,771:361,772:363,774:365,776:252,777:7911,778:367,779:369,780:468,783:533,785:535,795:432,803:7909,804:7795,808:371,813:7799,816:7797}],118:[,,{771:7805,803:7807}],119:[,,{768:7809,769:7811,770:373,775:7815,776:7813,778:7832,803:7817}],120:[,,{775:7819,776:7821}],121:[,,{768:7923,769:253,770:375,771:7929,772:563,775:7823,776:255,777:7927,778:7833,803:7925}],122:[,,{769:378,770:7825,775:380,780:382,803:7827,817:7829}],160:[[32],256],168:[[32,776],256,{768:8173,769:901,834:8129}],170:[[97],256],175:[[32,772],256],178:[[50],256],179:[[51],256],180:[[32,769],256],181:[[956],256],184:[[32,807],256],185:[[49],256],186:[[111],256],188:[[49,8260,52],256],189:[[49,8260,50],256],190:[[51,8260,52],256],192:[[65,768]],193:[[65,769]],194:[[65,770],,{768:7846,769:7844,771:7850,777:7848}],195:[[65,771]],196:[[65,776],,{772:478}],197:[[65,778],,{769:506}],198:[,,{769:508,772:482}],199:[[67,807],,{769:7688}],200:[[69,768]],201:[[69,769]],202:[[69,770],,{768:7872,769:7870,771:7876,777:7874}],203:[[69,776]],204:[[73,768]],205:[[73,769]],206:[[73,770]],207:[[73,776],,{769:7726}],209:[[78,771]],210:[[79,768]],211:[[79,769]],212:[[79,770],,{768:7890,769:7888,771:7894,777:7892}],213:[[79,771],,{769:7756,772:556,776:7758}],214:[[79,776],,{772:554}],216:[,,{769:510}],217:[[85,768]],218:[[85,769]],219:[[85,770]],220:[[85,776],,{768:475,769:471,772:469,780:473}],221:[[89,769]],224:[[97,768]],225:[[97,769]],226:[[97,770],,{768:7847,769:7845,771:7851,777:7849}],227:[[97,771]],228:[[97,776],,{772:479}],229:[[97,778],,{769:507}],230:[,,{769:509,772:483}],231:[[99,807],,{769:7689}],232:[[101,768]],233:[[101,769]],234:[[101,770],,{768:7873,769:7871,771:7877,777:7875}],235:[[101,776]],236:[[105,768]],237:[[105,769]],238:[[105,770]],239:[[105,776],,{769:7727}],241:[[110,771]],242:[[111,768]],243:[[111,769]],244:[[111,770],,{768:7891,769:7889,771:7895,777:7893}],245:[[111,771],,{769:7757,772:557,776:7759}],246:[[111,776],,{772:555}],248:[,,{769:511}],249:[[117,768]],250:[[117,769]],251:[[117,770]],252:[[117,776],,{768:476,769:472,772:470,780:474}],253:[[121,769]],255:[[121,776]]},
                256:{256:[[65,772]],257:[[97,772]],258:[[65,774],,{768:7856,769:7854,771:7860,777:7858}],259:[[97,774],,{768:7857,769:7855,771:7861,777:7859}],260:[[65,808]],261:[[97,808]],262:[[67,769]],263:[[99,769]],264:[[67,770]],265:[[99,770]],266:[[67,775]],267:[[99,775]],268:[[67,780]],269:[[99,780]],270:[[68,780]],271:[[100,780]],274:[[69,772],,{768:7700,769:7702}],275:[[101,772],,{768:7701,769:7703}],276:[[69,774]],277:[[101,774]],278:[[69,775]],279:[[101,775]],280:[[69,808]],281:[[101,808]],282:[[69,780]],283:[[101,780]],284:[[71,770]],285:[[103,770]],286:[[71,774]],287:[[103,774]],288:[[71,775]],289:[[103,775]],290:[[71,807]],291:[[103,807]],292:[[72,770]],293:[[104,770]],296:[[73,771]],297:[[105,771]],298:[[73,772]],299:[[105,772]],300:[[73,774]],301:[[105,774]],302:[[73,808]],303:[[105,808]],304:[[73,775]],306:[[73,74],256],307:[[105,106],256],308:[[74,770]],309:[[106,770]],310:[[75,807]],311:[[107,807]],313:[[76,769]],314:[[108,769]],315:[[76,807]],316:[[108,807]],317:[[76,780]],318:[[108,780]],319:[[76,183],256],320:[[108,183],256],323:[[78,769]],324:[[110,769]],325:[[78,807]],326:[[110,807]],327:[[78,780]],328:[[110,780]],329:[[700,110],256],332:[[79,772],,{768:7760,769:7762}],333:[[111,772],,{768:7761,769:7763}],334:[[79,774]],335:[[111,774]],336:[[79,779]],337:[[111,779]],340:[[82,769]],341:[[114,769]],342:[[82,807]],343:[[114,807]],344:[[82,780]],345:[[114,780]],346:[[83,769],,{775:7780}],347:[[115,769],,{775:7781}],348:[[83,770]],349:[[115,770]],350:[[83,807]],351:[[115,807]],352:[[83,780],,{775:7782}],353:[[115,780],,{775:7783}],354:[[84,807]],355:[[116,807]],356:[[84,780]],357:[[116,780]],360:[[85,771],,{769:7800}],361:[[117,771],,{769:7801}],362:[[85,772],,{776:7802}],363:[[117,772],,{776:7803}],364:[[85,774]],365:[[117,774]],366:[[85,778]],367:[[117,778]],368:[[85,779]],369:[[117,779]],370:[[85,808]],371:[[117,808]],372:[[87,770]],373:[[119,770]],374:[[89,770]],375:[[121,770]],376:[[89,776]],377:[[90,769]],378:[[122,769]],379:[[90,775]],380:[[122,775]],381:[[90,780]],382:[[122,780]],383:[[115],256,{775:7835}],416:[[79,795],,{768:7900,769:7898,771:7904,777:7902,803:7906}],417:[[111,795],,{768:7901,769:7899,771:7905,777:7903,803:7907}],431:[[85,795],,{768:7914,769:7912,771:7918,777:7916,803:7920}],432:[[117,795],,{768:7915,769:7913,771:7919,777:7917,803:7921}],439:[,,{780:494}],452:[[68,381],256],453:[[68,382],256],454:[[100,382],256],455:[[76,74],256],456:[[76,106],256],457:[[108,106],256],458:[[78,74],256],459:[[78,106],256],460:[[110,106],256],461:[[65,780]],462:[[97,780]],463:[[73,780]],464:[[105,780]],465:[[79,780]],466:[[111,780]],467:[[85,780]],468:[[117,780]],469:[[220,772]],470:[[252,772]],471:[[220,769]],472:[[252,769]],473:[[220,780]],474:[[252,780]],475:[[220,768]],476:[[252,768]],478:[[196,772]],479:[[228,772]],480:[[550,772]],481:[[551,772]],482:[[198,772]],483:[[230,772]],486:[[71,780]],487:[[103,780]],488:[[75,780]],489:[[107,780]],490:[[79,808],,{772:492}],491:[[111,808],,{772:493}],492:[[490,772]],493:[[491,772]],494:[[439,780]],495:[[658,780]],496:[[106,780]],497:[[68,90],256],498:[[68,122],256],499:[[100,122],256],500:[[71,769]],501:[[103,769]],504:[[78,768]],505:[[110,768]],506:[[197,769]],507:[[229,769]],508:[[198,769]],509:[[230,769]],510:[[216,769]],511:[[248,769]],66045:[,220]},
                512:{512:[[65,783]],513:[[97,783]],514:[[65,785]],515:[[97,785]],516:[[69,783]],517:[[101,783]],518:[[69,785]],519:[[101,785]],520:[[73,783]],521:[[105,783]],522:[[73,785]],523:[[105,785]],524:[[79,783]],525:[[111,783]],526:[[79,785]],527:[[111,785]],528:[[82,783]],529:[[114,783]],530:[[82,785]],531:[[114,785]],532:[[85,783]],533:[[117,783]],534:[[85,785]],535:[[117,785]],536:[[83,806]],537:[[115,806]],538:[[84,806]],539:[[116,806]],542:[[72,780]],543:[[104,780]],550:[[65,775],,{772:480}],551:[[97,775],,{772:481}],552:[[69,807],,{774:7708}],553:[[101,807],,{774:7709}],554:[[214,772]],555:[[246,772]],556:[[213,772]],557:[[245,772]],558:[[79,775],,{772:560}],559:[[111,775],,{772:561}],560:[[558,772]],561:[[559,772]],562:[[89,772]],563:[[121,772]],658:[,,{780:495}],688:[[104],256],689:[[614],256],690:[[106],256],691:[[114],256],692:[[633],256],693:[[635],256],694:[[641],256],695:[[119],256],696:[[121],256],728:[[32,774],256],729:[[32,775],256],730:[[32,778],256],731:[[32,808],256],732:[[32,771],256],733:[[32,779],256],736:[[611],256],737:[[108],256],738:[[115],256],739:[[120],256],740:[[661],256],66272:[,220]},
                768:{768:[,230],769:[,230],770:[,230],771:[,230],772:[,230],773:[,230],774:[,230],775:[,230],776:[,230,{769:836}],777:[,230],778:[,230],779:[,230],780:[,230],781:[,230],782:[,230],783:[,230],784:[,230],785:[,230],786:[,230],787:[,230],788:[,230],789:[,232],790:[,220],791:[,220],792:[,220],793:[,220],794:[,232],795:[,216],796:[,220],797:[,220],798:[,220],799:[,220],800:[,220],801:[,202],802:[,202],803:[,220],804:[,220],805:[,220],806:[,220],807:[,202],808:[,202],809:[,220],810:[,220],811:[,220],812:[,220],813:[,220],814:[,220],815:[,220],816:[,220],817:[,220],818:[,220],819:[,220],820:[,1],821:[,1],822:[,1],823:[,1],824:[,1],825:[,220],826:[,220],827:[,220],828:[,220],829:[,230],830:[,230],831:[,230],832:[[768],230],833:[[769],230],834:[,230],835:[[787],230],836:[[776,769],230],837:[,240],838:[,230],839:[,220],840:[,220],841:[,220],842:[,230],843:[,230],844:[,230],845:[,220],846:[,220],848:[,230],849:[,230],850:[,230],851:[,220],852:[,220],853:[,220],854:[,220],855:[,230],856:[,232],857:[,220],858:[,220],859:[,230],860:[,233],861:[,234],862:[,234],863:[,233],864:[,234],865:[,234],866:[,233],867:[,230],868:[,230],869:[,230],870:[,230],871:[,230],872:[,230],873:[,230],874:[,230],875:[,230],876:[,230],877:[,230],878:[,230],879:[,230],884:[[697]],890:[[32,837],256],894:[[59]],900:[[32,769],256],901:[[168,769]],902:[[913,769]],903:[[183]],904:[[917,769]],905:[[919,769]],906:[[921,769]],908:[[927,769]],910:[[933,769]],911:[[937,769]],912:[[970,769]],913:[,,{768:8122,769:902,772:8121,774:8120,787:7944,788:7945,837:8124}],917:[,,{768:8136,769:904,787:7960,788:7961}],919:[,,{768:8138,769:905,787:7976,788:7977,837:8140}],921:[,,{768:8154,769:906,772:8153,774:8152,776:938,787:7992,788:7993}],927:[,,{768:8184,769:908,787:8008,788:8009}],929:[,,{788:8172}],933:[,,{768:8170,769:910,772:8169,774:8168,776:939,788:8025}],937:[,,{768:8186,769:911,787:8040,788:8041,837:8188}],938:[[921,776]],939:[[933,776]],940:[[945,769],,{837:8116}],941:[[949,769]],942:[[951,769],,{837:8132}],943:[[953,769]],944:[[971,769]],945:[,,{768:8048,769:940,772:8113,774:8112,787:7936,788:7937,834:8118,837:8115}],949:[,,{768:8050,769:941,787:7952,788:7953}],951:[,,{768:8052,769:942,787:7968,788:7969,834:8134,837:8131}],953:[,,{768:8054,769:943,772:8145,774:8144,776:970,787:7984,788:7985,834:8150}],959:[,,{768:8056,769:972,787:8000,788:8001}],961:[,,{787:8164,788:8165}],965:[,,{768:8058,769:973,772:8161,774:8160,776:971,787:8016,788:8017,834:8166}],969:[,,{768:8060,769:974,787:8032,788:8033,834:8182,837:8179}],970:[[953,776],,{768:8146,769:912,834:8151}],971:[[965,776],,{768:8162,769:944,834:8167}],972:[[959,769]],973:[[965,769]],974:[[969,769],,{837:8180}],976:[[946],256],977:[[952],256],978:[[933],256,{769:979,776:980}],979:[[978,769]],980:[[978,776]],981:[[966],256],982:[[960],256],1008:[[954],256],1009:[[961],256],1010:[[962],256],1012:[[920],256],1013:[[949],256],1017:[[931],256],66422:[,230],66423:[,230],66424:[,230],66425:[,230],66426:[,230]},
                1024:{1024:[[1045,768]],1025:[[1045,776]],1027:[[1043,769]],1030:[,,{776:1031}],1031:[[1030,776]],1036:[[1050,769]],1037:[[1048,768]],1038:[[1059,774]],1040:[,,{774:1232,776:1234}],1043:[,,{769:1027}],1045:[,,{768:1024,774:1238,776:1025}],1046:[,,{774:1217,776:1244}],1047:[,,{776:1246}],1048:[,,{768:1037,772:1250,774:1049,776:1252}],1049:[[1048,774]],1050:[,,{769:1036}],1054:[,,{776:1254}],1059:[,,{772:1262,774:1038,776:1264,779:1266}],1063:[,,{776:1268}],1067:[,,{776:1272}],1069:[,,{776:1260}],1072:[,,{774:1233,776:1235}],1075:[,,{769:1107}],1077:[,,{768:1104,774:1239,776:1105}],1078:[,,{774:1218,776:1245}],1079:[,,{776:1247}],1080:[,,{768:1117,772:1251,774:1081,776:1253}],1081:[[1080,774]],1082:[,,{769:1116}],1086:[,,{776:1255}],1091:[,,{772:1263,774:1118,776:1265,779:1267}],1095:[,,{776:1269}],1099:[,,{776:1273}],1101:[,,{776:1261}],1104:[[1077,768]],1105:[[1077,776]],1107:[[1075,769]],1110:[,,{776:1111}],1111:[[1110,776]],1116:[[1082,769]],1117:[[1080,768]],1118:[[1091,774]],1140:[,,{783:1142}],1141:[,,{783:1143}],1142:[[1140,783]],1143:[[1141,783]],1155:[,230],1156:[,230],1157:[,230],1158:[,230],1159:[,230],1217:[[1046,774]],1218:[[1078,774]],1232:[[1040,774]],1233:[[1072,774]],1234:[[1040,776]],1235:[[1072,776]],1238:[[1045,774]],1239:[[1077,774]],1240:[,,{776:1242}],1241:[,,{776:1243}],1242:[[1240,776]],1243:[[1241,776]],1244:[[1046,776]],1245:[[1078,776]],1246:[[1047,776]],1247:[[1079,776]],1250:[[1048,772]],1251:[[1080,772]],1252:[[1048,776]],1253:[[1080,776]],1254:[[1054,776]],1255:[[1086,776]],1256:[,,{776:1258}],1257:[,,{776:1259}],1258:[[1256,776]],1259:[[1257,776]],1260:[[1069,776]],1261:[[1101,776]],1262:[[1059,772]],1263:[[1091,772]],1264:[[1059,776]],1265:[[1091,776]],1266:[[1059,779]],1267:[[1091,779]],1268:[[1063,776]],1269:[[1095,776]],1272:[[1067,776]],1273:[[1099,776]]},
                1280:{1415:[[1381,1410],256],1425:[,220],1426:[,230],1427:[,230],1428:[,230],1429:[,230],1430:[,220],1431:[,230],1432:[,230],1433:[,230],1434:[,222],1435:[,220],1436:[,230],1437:[,230],1438:[,230],1439:[,230],1440:[,230],1441:[,230],1442:[,220],1443:[,220],1444:[,220],1445:[,220],1446:[,220],1447:[,220],1448:[,230],1449:[,230],1450:[,220],1451:[,230],1452:[,230],1453:[,222],1454:[,228],1455:[,230],1456:[,10],1457:[,11],1458:[,12],1459:[,13],1460:[,14],1461:[,15],1462:[,16],1463:[,17],1464:[,18],1465:[,19],1466:[,19],1467:[,20],1468:[,21],1469:[,22],1471:[,23],1473:[,24],1474:[,25],1476:[,230],1477:[,220],1479:[,18]},
                1536:{1552:[,230],1553:[,230],1554:[,230],1555:[,230],1556:[,230],1557:[,230],1558:[,230],1559:[,230],1560:[,30],1561:[,31],1562:[,32],1570:[[1575,1619]],1571:[[1575,1620]],1572:[[1608,1620]],1573:[[1575,1621]],1574:[[1610,1620]],1575:[,,{1619:1570,1620:1571,1621:1573}],1608:[,,{1620:1572}],1610:[,,{1620:1574}],1611:[,27],1612:[,28],1613:[,29],1614:[,30],1615:[,31],1616:[,32],1617:[,33],1618:[,34],1619:[,230],1620:[,230],1621:[,220],1622:[,220],1623:[,230],1624:[,230],1625:[,230],1626:[,230],1627:[,230],1628:[,220],1629:[,230],1630:[,230],1631:[,220],1648:[,35],1653:[[1575,1652],256],1654:[[1608,1652],256],1655:[[1735,1652],256],1656:[[1610,1652],256],1728:[[1749,1620]],1729:[,,{1620:1730}],1730:[[1729,1620]],1746:[,,{1620:1747}],1747:[[1746,1620]],1749:[,,{1620:1728}],1750:[,230],1751:[,230],1752:[,230],1753:[,230],1754:[,230],1755:[,230],1756:[,230],1759:[,230],1760:[,230],1761:[,230],1762:[,230],1763:[,220],1764:[,230],1767:[,230],1768:[,230],1770:[,220],1771:[,230],1772:[,230],1773:[,220]},
                1792:{1809:[,36],1840:[,230],1841:[,220],1842:[,230],1843:[,230],1844:[,220],1845:[,230],1846:[,230],1847:[,220],1848:[,220],1849:[,220],1850:[,230],1851:[,220],1852:[,220],1853:[,230],1854:[,220],1855:[,230],1856:[,230],1857:[,230],1858:[,220],1859:[,230],1860:[,220],1861:[,230],1862:[,220],1863:[,230],1864:[,220],1865:[,230],1866:[,230],2027:[,230],2028:[,230],2029:[,230],2030:[,230],2031:[,230],2032:[,230],2033:[,230],2034:[,220],2035:[,230]},
                2048:{2070:[,230],2071:[,230],2072:[,230],2073:[,230],2075:[,230],2076:[,230],2077:[,230],2078:[,230],2079:[,230],2080:[,230],2081:[,230],2082:[,230],2083:[,230],2085:[,230],2086:[,230],2087:[,230],2089:[,230],2090:[,230],2091:[,230],2092:[,230],2093:[,230],2137:[,220],2138:[,220],2139:[,220],2276:[,230],2277:[,230],2278:[,220],2279:[,230],2280:[,230],2281:[,220],2282:[,230],2283:[,230],2284:[,230],2285:[,220],2286:[,220],2287:[,220],2288:[,27],2289:[,28],2290:[,29],2291:[,230],2292:[,230],2293:[,230],2294:[,220],2295:[,230],2296:[,230],2297:[,220],2298:[,220],2299:[,230],2300:[,230],2301:[,230],2302:[,230],2303:[,230]},
                2304:{2344:[,,{2364:2345}],2345:[[2344,2364]],2352:[,,{2364:2353}],2353:[[2352,2364]],2355:[,,{2364:2356}],2356:[[2355,2364]],2364:[,7],2381:[,9],2385:[,230],2386:[,220],2387:[,230],2388:[,230],2392:[[2325,2364],512],2393:[[2326,2364],512],2394:[[2327,2364],512],2395:[[2332,2364],512],2396:[[2337,2364],512],2397:[[2338,2364],512],2398:[[2347,2364],512],2399:[[2351,2364],512],2492:[,7],2503:[,,{2494:2507,2519:2508}],2507:[[2503,2494]],2508:[[2503,2519]],2509:[,9],2524:[[2465,2492],512],2525:[[2466,2492],512],2527:[[2479,2492],512]},
                2560:{2611:[[2610,2620],512],2614:[[2616,2620],512],2620:[,7],2637:[,9],2649:[[2582,2620],512],2650:[[2583,2620],512],2651:[[2588,2620],512],2654:[[2603,2620],512],2748:[,7],2765:[,9],68109:[,220],68111:[,230],68152:[,230],68153:[,1],68154:[,220],68159:[,9],68325:[,230],68326:[,220]},
                2816:{2876:[,7],2887:[,,{2878:2891,2902:2888,2903:2892}],2888:[[2887,2902]],2891:[[2887,2878]],2892:[[2887,2903]],2893:[,9],2908:[[2849,2876],512],2909:[[2850,2876],512],2962:[,,{3031:2964}],2964:[[2962,3031]],3014:[,,{3006:3018,3031:3020}],3015:[,,{3006:3019}],3018:[[3014,3006]],3019:[[3015,3006]],3020:[[3014,3031]],3021:[,9]},
                3072:{3142:[,,{3158:3144}],3144:[[3142,3158]],3149:[,9],3157:[,84],3158:[,91],3260:[,7],3263:[,,{3285:3264}],3264:[[3263,3285]],3270:[,,{3266:3274,3285:3271,3286:3272}],3271:[[3270,3285]],3272:[[3270,3286]],3274:[[3270,3266],,{3285:3275}],3275:[[3274,3285]],3277:[,9]},
                3328:{3398:[,,{3390:3402,3415:3404}],3399:[,,{3390:3403}],3402:[[3398,3390]],3403:[[3399,3390]],3404:[[3398,3415]],3405:[,9],3530:[,9],3545:[,,{3530:3546,3535:3548,3551:3550}],3546:[[3545,3530]],3548:[[3545,3535],,{3530:3549}],3549:[[3548,3530]],3550:[[3545,3551]]},
                3584:{3635:[[3661,3634],256],3640:[,103],3641:[,103],3642:[,9],3656:[,107],3657:[,107],3658:[,107],3659:[,107],3763:[[3789,3762],256],3768:[,118],3769:[,118],3784:[,122],3785:[,122],3786:[,122],3787:[,122],3804:[[3755,3737],256],3805:[[3755,3745],256]},
                3840:{3852:[[3851],256],3864:[,220],3865:[,220],3893:[,220],3895:[,220],3897:[,216],3907:[[3906,4023],512],3917:[[3916,4023],512],3922:[[3921,4023],512],3927:[[3926,4023],512],3932:[[3931,4023],512],3945:[[3904,4021],512],3953:[,129],3954:[,130],3955:[[3953,3954],512],3956:[,132],3957:[[3953,3956],512],3958:[[4018,3968],512],3959:[[4018,3969],256],3960:[[4019,3968],512],3961:[[4019,3969],256],3962:[,130],3963:[,130],3964:[,130],3965:[,130],3968:[,130],3969:[[3953,3968],512],3970:[,230],3971:[,230],3972:[,9],3974:[,230],3975:[,230],3987:[[3986,4023],512],3997:[[3996,4023],512],4002:[[4001,4023],512],4007:[[4006,4023],512],4012:[[4011,4023],512],4025:[[3984,4021],512],4038:[,220]},
                4096:{4133:[,,{4142:4134}],4134:[[4133,4142]],4151:[,7],4153:[,9],4154:[,9],4237:[,220],4348:[[4316],256],69702:[,9],69759:[,9],69785:[,,{69818:69786}],69786:[[69785,69818]],69787:[,,{69818:69788}],69788:[[69787,69818]],69797:[,,{69818:69803}],69803:[[69797,69818]],69817:[,9],69818:[,7]},
                4352:{69888:[,230],69889:[,230],69890:[,230],69934:[[69937,69927]],69935:[[69938,69927]],69937:[,,{69927:69934}],69938:[,,{69927:69935}],69939:[,9],69940:[,9],70003:[,7],70080:[,9]},
                4608:{70197:[,9],70198:[,7],70377:[,7],70378:[,9]},
                4864:{4957:[,230],4958:[,230],4959:[,230],70460:[,7],70471:[,,{70462:70475,70487:70476}],70475:[[70471,70462]],70476:[[70471,70487]],70477:[,9],70502:[,230],70503:[,230],70504:[,230],70505:[,230],70506:[,230],70507:[,230],70508:[,230],70512:[,230],70513:[,230],70514:[,230],70515:[,230],70516:[,230]},
                5120:{70841:[,,{70832:70844,70842:70843,70845:70846}],70843:[[70841,70842]],70844:[[70841,70832]],70846:[[70841,70845]],70850:[,9],70851:[,7]},
                5376:{71096:[,,{71087:71098}],71097:[,,{71087:71099}],71098:[[71096,71087]],71099:[[71097,71087]],71103:[,9],71104:[,7]},
                5632:{71231:[,9],71350:[,9],71351:[,7]},
                5888:{5908:[,9],5940:[,9],6098:[,9],6109:[,230]},
                6144:{6313:[,228]},
                6400:{6457:[,222],6458:[,230],6459:[,220]},
                6656:{6679:[,230],6680:[,220],6752:[,9],6773:[,230],6774:[,230],6775:[,230],6776:[,230],6777:[,230],6778:[,230],6779:[,230],6780:[,230],6783:[,220],6832:[,230],6833:[,230],6834:[,230],6835:[,230],6836:[,230],6837:[,220],6838:[,220],6839:[,220],6840:[,220],6841:[,220],6842:[,220],6843:[,230],6844:[,230],6845:[,220]},
                6912:{6917:[,,{6965:6918}],6918:[[6917,6965]],6919:[,,{6965:6920}],6920:[[6919,6965]],6921:[,,{6965:6922}],6922:[[6921,6965]],6923:[,,{6965:6924}],6924:[[6923,6965]],6925:[,,{6965:6926}],6926:[[6925,6965]],6929:[,,{6965:6930}],6930:[[6929,6965]],6964:[,7],6970:[,,{6965:6971}],6971:[[6970,6965]],6972:[,,{6965:6973}],6973:[[6972,6965]],6974:[,,{6965:6976}],6975:[,,{6965:6977}],6976:[[6974,6965]],6977:[[6975,6965]],6978:[,,{6965:6979}],6979:[[6978,6965]],6980:[,9],7019:[,230],7020:[,220],7021:[,230],7022:[,230],7023:[,230],7024:[,230],7025:[,230],7026:[,230],7027:[,230],7082:[,9],7083:[,9],7142:[,7],7154:[,9],7155:[,9]},
                7168:{7223:[,7],7376:[,230],7377:[,230],7378:[,230],7380:[,1],7381:[,220],7382:[,220],7383:[,220],7384:[,220],7385:[,220],7386:[,230],7387:[,230],7388:[,220],7389:[,220],7390:[,220],7391:[,220],7392:[,230],7394:[,1],7395:[,1],7396:[,1],7397:[,1],7398:[,1],7399:[,1],7400:[,1],7405:[,220],7412:[,230],7416:[,230],7417:[,230]},
                7424:{7468:[[65],256],7469:[[198],256],7470:[[66],256],7472:[[68],256],7473:[[69],256],7474:[[398],256],7475:[[71],256],7476:[[72],256],7477:[[73],256],7478:[[74],256],7479:[[75],256],7480:[[76],256],7481:[[77],256],7482:[[78],256],7484:[[79],256],7485:[[546],256],7486:[[80],256],7487:[[82],256],7488:[[84],256],7489:[[85],256],7490:[[87],256],7491:[[97],256],7492:[[592],256],7493:[[593],256],7494:[[7426],256],7495:[[98],256],7496:[[100],256],7497:[[101],256],7498:[[601],256],7499:[[603],256],7500:[[604],256],7501:[[103],256],7503:[[107],256],7504:[[109],256],7505:[[331],256],7506:[[111],256],7507:[[596],256],7508:[[7446],256],7509:[[7447],256],7510:[[112],256],7511:[[116],256],7512:[[117],256],7513:[[7453],256],7514:[[623],256],7515:[[118],256],7516:[[7461],256],7517:[[946],256],7518:[[947],256],7519:[[948],256],7520:[[966],256],7521:[[967],256],7522:[[105],256],7523:[[114],256],7524:[[117],256],7525:[[118],256],7526:[[946],256],7527:[[947],256],7528:[[961],256],7529:[[966],256],7530:[[967],256],7544:[[1085],256],7579:[[594],256],7580:[[99],256],7581:[[597],256],7582:[[240],256],7583:[[604],256],7584:[[102],256],7585:[[607],256],7586:[[609],256],7587:[[613],256],7588:[[616],256],7589:[[617],256],7590:[[618],256],7591:[[7547],256],7592:[[669],256],7593:[[621],256],7594:[[7557],256],7595:[[671],256],7596:[[625],256],7597:[[624],256],7598:[[626],256],7599:[[627],256],7600:[[628],256],7601:[[629],256],7602:[[632],256],7603:[[642],256],7604:[[643],256],7605:[[427],256],7606:[[649],256],7607:[[650],256],7608:[[7452],256],7609:[[651],256],7610:[[652],256],7611:[[122],256],7612:[[656],256],7613:[[657],256],7614:[[658],256],7615:[[952],256],7616:[,230],7617:[,230],7618:[,220],7619:[,230],7620:[,230],7621:[,230],7622:[,230],7623:[,230],7624:[,230],7625:[,230],7626:[,220],7627:[,230],7628:[,230],7629:[,234],7630:[,214],7631:[,220],7632:[,202],7633:[,230],7634:[,230],7635:[,230],7636:[,230],7637:[,230],7638:[,230],7639:[,230],7640:[,230],7641:[,230],7642:[,230],7643:[,230],7644:[,230],7645:[,230],7646:[,230],7647:[,230],7648:[,230],7649:[,230],7650:[,230],7651:[,230],7652:[,230],7653:[,230],7654:[,230],7655:[,230],7656:[,230],7657:[,230],7658:[,230],7659:[,230],7660:[,230],7661:[,230],7662:[,230],7663:[,230],7664:[,230],7665:[,230],7666:[,230],7667:[,230],7668:[,230],7669:[,230],7676:[,233],7677:[,220],7678:[,230],7679:[,220]},
                7680:{7680:[[65,805]],7681:[[97,805]],7682:[[66,775]],7683:[[98,775]],7684:[[66,803]],7685:[[98,803]],7686:[[66,817]],7687:[[98,817]],7688:[[199,769]],7689:[[231,769]],7690:[[68,775]],7691:[[100,775]],7692:[[68,803]],7693:[[100,803]],7694:[[68,817]],7695:[[100,817]],7696:[[68,807]],7697:[[100,807]],7698:[[68,813]],7699:[[100,813]],7700:[[274,768]],7701:[[275,768]],7702:[[274,769]],7703:[[275,769]],7704:[[69,813]],7705:[[101,813]],7706:[[69,816]],7707:[[101,816]],7708:[[552,774]],7709:[[553,774]],7710:[[70,775]],7711:[[102,775]],7712:[[71,772]],7713:[[103,772]],7714:[[72,775]],7715:[[104,775]],7716:[[72,803]],7717:[[104,803]],7718:[[72,776]],7719:[[104,776]],7720:[[72,807]],7721:[[104,807]],7722:[[72,814]],7723:[[104,814]],7724:[[73,816]],7725:[[105,816]],7726:[[207,769]],7727:[[239,769]],7728:[[75,769]],7729:[[107,769]],7730:[[75,803]],7731:[[107,803]],7732:[[75,817]],7733:[[107,817]],7734:[[76,803],,{772:7736}],7735:[[108,803],,{772:7737}],7736:[[7734,772]],7737:[[7735,772]],7738:[[76,817]],7739:[[108,817]],7740:[[76,813]],7741:[[108,813]],7742:[[77,769]],7743:[[109,769]],7744:[[77,775]],7745:[[109,775]],7746:[[77,803]],7747:[[109,803]],7748:[[78,775]],7749:[[110,775]],7750:[[78,803]],7751:[[110,803]],7752:[[78,817]],7753:[[110,817]],7754:[[78,813]],7755:[[110,813]],7756:[[213,769]],7757:[[245,769]],7758:[[213,776]],7759:[[245,776]],7760:[[332,768]],7761:[[333,768]],7762:[[332,769]],7763:[[333,769]],7764:[[80,769]],7765:[[112,769]],7766:[[80,775]],7767:[[112,775]],7768:[[82,775]],7769:[[114,775]],7770:[[82,803],,{772:7772}],7771:[[114,803],,{772:7773}],7772:[[7770,772]],7773:[[7771,772]],7774:[[82,817]],7775:[[114,817]],7776:[[83,775]],7777:[[115,775]],7778:[[83,803],,{775:7784}],7779:[[115,803],,{775:7785}],7780:[[346,775]],7781:[[347,775]],7782:[[352,775]],7783:[[353,775]],7784:[[7778,775]],7785:[[7779,775]],7786:[[84,775]],7787:[[116,775]],7788:[[84,803]],7789:[[116,803]],7790:[[84,817]],7791:[[116,817]],7792:[[84,813]],7793:[[116,813]],7794:[[85,804]],7795:[[117,804]],7796:[[85,816]],7797:[[117,816]],7798:[[85,813]],7799:[[117,813]],7800:[[360,769]],7801:[[361,769]],7802:[[362,776]],7803:[[363,776]],7804:[[86,771]],7805:[[118,771]],7806:[[86,803]],7807:[[118,803]],7808:[[87,768]],7809:[[119,768]],7810:[[87,769]],7811:[[119,769]],7812:[[87,776]],7813:[[119,776]],7814:[[87,775]],7815:[[119,775]],7816:[[87,803]],7817:[[119,803]],7818:[[88,775]],7819:[[120,775]],7820:[[88,776]],7821:[[120,776]],7822:[[89,775]],7823:[[121,775]],7824:[[90,770]],7825:[[122,770]],7826:[[90,803]],7827:[[122,803]],7828:[[90,817]],7829:[[122,817]],7830:[[104,817]],7831:[[116,776]],7832:[[119,778]],7833:[[121,778]],7834:[[97,702],256],7835:[[383,775]],7840:[[65,803],,{770:7852,774:7862}],7841:[[97,803],,{770:7853,774:7863}],7842:[[65,777]],7843:[[97,777]],7844:[[194,769]],7845:[[226,769]],7846:[[194,768]],7847:[[226,768]],7848:[[194,777]],7849:[[226,777]],7850:[[194,771]],7851:[[226,771]],7852:[[7840,770]],7853:[[7841,770]],7854:[[258,769]],7855:[[259,769]],7856:[[258,768]],7857:[[259,768]],7858:[[258,777]],7859:[[259,777]],7860:[[258,771]],7861:[[259,771]],7862:[[7840,774]],7863:[[7841,774]],7864:[[69,803],,{770:7878}],7865:[[101,803],,{770:7879}],7866:[[69,777]],7867:[[101,777]],7868:[[69,771]],7869:[[101,771]],7870:[[202,769]],7871:[[234,769]],7872:[[202,768]],7873:[[234,768]],7874:[[202,777]],7875:[[234,777]],7876:[[202,771]],7877:[[234,771]],7878:[[7864,770]],7879:[[7865,770]],7880:[[73,777]],7881:[[105,777]],7882:[[73,803]],7883:[[105,803]],7884:[[79,803],,{770:7896}],7885:[[111,803],,{770:7897}],7886:[[79,777]],7887:[[111,777]],7888:[[212,769]],7889:[[244,769]],7890:[[212,768]],7891:[[244,768]],7892:[[212,777]],7893:[[244,777]],7894:[[212,771]],7895:[[244,771]],7896:[[7884,770]],7897:[[7885,770]],7898:[[416,769]],7899:[[417,769]],7900:[[416,768]],7901:[[417,768]],7902:[[416,777]],7903:[[417,777]],7904:[[416,771]],7905:[[417,771]],7906:[[416,803]],7907:[[417,803]],7908:[[85,803]],7909:[[117,803]],7910:[[85,777]],7911:[[117,777]],7912:[[431,769]],7913:[[432,769]],7914:[[431,768]],7915:[[432,768]],7916:[[431,777]],7917:[[432,777]],7918:[[431,771]],7919:[[432,771]],7920:[[431,803]],7921:[[432,803]],7922:[[89,768]],7923:[[121,768]],7924:[[89,803]],7925:[[121,803]],7926:[[89,777]],7927:[[121,777]],7928:[[89,771]],7929:[[121,771]]},
                7936:{7936:[[945,787],,{768:7938,769:7940,834:7942,837:8064}],7937:[[945,788],,{768:7939,769:7941,834:7943,837:8065}],7938:[[7936,768],,{837:8066}],7939:[[7937,768],,{837:8067}],7940:[[7936,769],,{837:8068}],7941:[[7937,769],,{837:8069}],7942:[[7936,834],,{837:8070}],7943:[[7937,834],,{837:8071}],7944:[[913,787],,{768:7946,769:7948,834:7950,837:8072}],7945:[[913,788],,{768:7947,769:7949,834:7951,837:8073}],7946:[[7944,768],,{837:8074}],7947:[[7945,768],,{837:8075}],7948:[[7944,769],,{837:8076}],7949:[[7945,769],,{837:8077}],7950:[[7944,834],,{837:8078}],7951:[[7945,834],,{837:8079}],7952:[[949,787],,{768:7954,769:7956}],7953:[[949,788],,{768:7955,769:7957}],7954:[[7952,768]],7955:[[7953,768]],7956:[[7952,769]],7957:[[7953,769]],7960:[[917,787],,{768:7962,769:7964}],7961:[[917,788],,{768:7963,769:7965}],7962:[[7960,768]],7963:[[7961,768]],7964:[[7960,769]],7965:[[7961,769]],7968:[[951,787],,{768:7970,769:7972,834:7974,837:8080}],7969:[[951,788],,{768:7971,769:7973,834:7975,837:8081}],7970:[[7968,768],,{837:8082}],7971:[[7969,768],,{837:8083}],7972:[[7968,769],,{837:8084}],7973:[[7969,769],,{837:8085}],7974:[[7968,834],,{837:8086}],7975:[[7969,834],,{837:8087}],7976:[[919,787],,{768:7978,769:7980,834:7982,837:8088}],7977:[[919,788],,{768:7979,769:7981,834:7983,837:8089}],7978:[[7976,768],,{837:8090}],7979:[[7977,768],,{837:8091}],7980:[[7976,769],,{837:8092}],7981:[[7977,769],,{837:8093}],7982:[[7976,834],,{837:8094}],7983:[[7977,834],,{837:8095}],7984:[[953,787],,{768:7986,769:7988,834:7990}],7985:[[953,788],,{768:7987,769:7989,834:7991}],7986:[[7984,768]],7987:[[7985,768]],7988:[[7984,769]],7989:[[7985,769]],7990:[[7984,834]],7991:[[7985,834]],7992:[[921,787],,{768:7994,769:7996,834:7998}],7993:[[921,788],,{768:7995,769:7997,834:7999}],7994:[[7992,768]],7995:[[7993,768]],7996:[[7992,769]],7997:[[7993,769]],7998:[[7992,834]],7999:[[7993,834]],8000:[[959,787],,{768:8002,769:8004}],8001:[[959,788],,{768:8003,769:8005}],8002:[[8000,768]],8003:[[8001,768]],8004:[[8000,769]],8005:[[8001,769]],8008:[[927,787],,{768:8010,769:8012}],8009:[[927,788],,{768:8011,769:8013}],8010:[[8008,768]],8011:[[8009,768]],8012:[[8008,769]],8013:[[8009,769]],8016:[[965,787],,{768:8018,769:8020,834:8022}],8017:[[965,788],,{768:8019,769:8021,834:8023}],8018:[[8016,768]],8019:[[8017,768]],8020:[[8016,769]],8021:[[8017,769]],8022:[[8016,834]],8023:[[8017,834]],8025:[[933,788],,{768:8027,769:8029,834:8031}],8027:[[8025,768]],8029:[[8025,769]],8031:[[8025,834]],8032:[[969,787],,{768:8034,769:8036,834:8038,837:8096}],8033:[[969,788],,{768:8035,769:8037,834:8039,837:8097}],8034:[[8032,768],,{837:8098}],8035:[[8033,768],,{837:8099}],8036:[[8032,769],,{837:8100}],8037:[[8033,769],,{837:8101}],8038:[[8032,834],,{837:8102}],8039:[[8033,834],,{837:8103}],8040:[[937,787],,{768:8042,769:8044,834:8046,837:8104}],8041:[[937,788],,{768:8043,769:8045,834:8047,837:8105}],8042:[[8040,768],,{837:8106}],8043:[[8041,768],,{837:8107}],8044:[[8040,769],,{837:8108}],8045:[[8041,769],,{837:8109}],8046:[[8040,834],,{837:8110}],8047:[[8041,834],,{837:8111}],8048:[[945,768],,{837:8114}],8049:[[940]],8050:[[949,768]],8051:[[941]],8052:[[951,768],,{837:8130}],8053:[[942]],8054:[[953,768]],8055:[[943]],8056:[[959,768]],8057:[[972]],8058:[[965,768]],8059:[[973]],8060:[[969,768],,{837:8178}],8061:[[974]],8064:[[7936,837]],8065:[[7937,837]],8066:[[7938,837]],8067:[[7939,837]],8068:[[7940,837]],8069:[[7941,837]],8070:[[7942,837]],8071:[[7943,837]],8072:[[7944,837]],8073:[[7945,837]],8074:[[7946,837]],8075:[[7947,837]],8076:[[7948,837]],8077:[[7949,837]],8078:[[7950,837]],8079:[[7951,837]],8080:[[7968,837]],8081:[[7969,837]],8082:[[7970,837]],8083:[[7971,837]],8084:[[7972,837]],8085:[[7973,837]],8086:[[7974,837]],8087:[[7975,837]],8088:[[7976,837]],8089:[[7977,837]],8090:[[7978,837]],8091:[[7979,837]],8092:[[7980,837]],8093:[[7981,837]],8094:[[7982,837]],8095:[[7983,837]],8096:[[8032,837]],8097:[[8033,837]],8098:[[8034,837]],8099:[[8035,837]],8100:[[8036,837]],8101:[[8037,837]],8102:[[8038,837]],8103:[[8039,837]],8104:[[8040,837]],8105:[[8041,837]],8106:[[8042,837]],8107:[[8043,837]],8108:[[8044,837]],8109:[[8045,837]],8110:[[8046,837]],8111:[[8047,837]],8112:[[945,774]],8113:[[945,772]],8114:[[8048,837]],8115:[[945,837]],8116:[[940,837]],8118:[[945,834],,{837:8119}],8119:[[8118,837]],8120:[[913,774]],8121:[[913,772]],8122:[[913,768]],8123:[[902]],8124:[[913,837]],8125:[[32,787],256],8126:[[953]],8127:[[32,787],256,{768:8141,769:8142,834:8143}],8128:[[32,834],256],8129:[[168,834]],8130:[[8052,837]],8131:[[951,837]],8132:[[942,837]],8134:[[951,834],,{837:8135}],8135:[[8134,837]],8136:[[917,768]],8137:[[904]],8138:[[919,768]],8139:[[905]],8140:[[919,837]],8141:[[8127,768]],8142:[[8127,769]],8143:[[8127,834]],8144:[[953,774]],8145:[[953,772]],8146:[[970,768]],8147:[[912]],8150:[[953,834]],8151:[[970,834]],8152:[[921,774]],8153:[[921,772]],8154:[[921,768]],8155:[[906]],8157:[[8190,768]],8158:[[8190,769]],8159:[[8190,834]],8160:[[965,774]],8161:[[965,772]],8162:[[971,768]],8163:[[944]],8164:[[961,787]],8165:[[961,788]],8166:[[965,834]],8167:[[971,834]],8168:[[933,774]],8169:[[933,772]],8170:[[933,768]],8171:[[910]],8172:[[929,788]],8173:[[168,768]],8174:[[901]],8175:[[96]],8178:[[8060,837]],8179:[[969,837]],8180:[[974,837]],8182:[[969,834],,{837:8183}],8183:[[8182,837]],8184:[[927,768]],8185:[[908]],8186:[[937,768]],8187:[[911]],8188:[[937,837]],8189:[[180]],8190:[[32,788],256,{768:8157,769:8158,834:8159}]},
                8192:{8192:[[8194]],8193:[[8195]],8194:[[32],256],8195:[[32],256],8196:[[32],256],8197:[[32],256],8198:[[32],256],8199:[[32],256],8200:[[32],256],8201:[[32],256],8202:[[32],256],8209:[[8208],256],8215:[[32,819],256],8228:[[46],256],8229:[[46,46],256],8230:[[46,46,46],256],8239:[[32],256],8243:[[8242,8242],256],8244:[[8242,8242,8242],256],8246:[[8245,8245],256],8247:[[8245,8245,8245],256],8252:[[33,33],256],8254:[[32,773],256],8263:[[63,63],256],8264:[[63,33],256],8265:[[33,63],256],8279:[[8242,8242,8242,8242],256],8287:[[32],256],8304:[[48],256],8305:[[105],256],8308:[[52],256],8309:[[53],256],8310:[[54],256],8311:[[55],256],8312:[[56],256],8313:[[57],256],8314:[[43],256],8315:[[8722],256],8316:[[61],256],8317:[[40],256],8318:[[41],256],8319:[[110],256],8320:[[48],256],8321:[[49],256],8322:[[50],256],8323:[[51],256],8324:[[52],256],8325:[[53],256],8326:[[54],256],8327:[[55],256],8328:[[56],256],8329:[[57],256],8330:[[43],256],8331:[[8722],256],8332:[[61],256],8333:[[40],256],8334:[[41],256],8336:[[97],256],8337:[[101],256],8338:[[111],256],8339:[[120],256],8340:[[601],256],8341:[[104],256],8342:[[107],256],8343:[[108],256],8344:[[109],256],8345:[[110],256],8346:[[112],256],8347:[[115],256],8348:[[116],256],8360:[[82,115],256],8400:[,230],8401:[,230],8402:[,1],8403:[,1],8404:[,230],8405:[,230],8406:[,230],8407:[,230],8408:[,1],8409:[,1],8410:[,1],8411:[,230],8412:[,230],8417:[,230],8421:[,1],8422:[,1],8423:[,230],8424:[,220],8425:[,230],8426:[,1],8427:[,1],8428:[,220],8429:[,220],8430:[,220],8431:[,220],8432:[,230]},
                8448:{8448:[[97,47,99],256],8449:[[97,47,115],256],8450:[[67],256],8451:[[176,67],256],8453:[[99,47,111],256],8454:[[99,47,117],256],8455:[[400],256],8457:[[176,70],256],8458:[[103],256],8459:[[72],256],8460:[[72],256],8461:[[72],256],8462:[[104],256],8463:[[295],256],8464:[[73],256],8465:[[73],256],8466:[[76],256],8467:[[108],256],8469:[[78],256],8470:[[78,111],256],8473:[[80],256],8474:[[81],256],8475:[[82],256],8476:[[82],256],8477:[[82],256],8480:[[83,77],256],8481:[[84,69,76],256],8482:[[84,77],256],8484:[[90],256],8486:[[937]],8488:[[90],256],8490:[[75]],8491:[[197]],8492:[[66],256],8493:[[67],256],8495:[[101],256],8496:[[69],256],8497:[[70],256],8499:[[77],256],8500:[[111],256],8501:[[1488],256],8502:[[1489],256],8503:[[1490],256],8504:[[1491],256],8505:[[105],256],8507:[[70,65,88],256],8508:[[960],256],8509:[[947],256],8510:[[915],256],8511:[[928],256],8512:[[8721],256],8517:[[68],256],8518:[[100],256],8519:[[101],256],8520:[[105],256],8521:[[106],256],8528:[[49,8260,55],256],8529:[[49,8260,57],256],8530:[[49,8260,49,48],256],8531:[[49,8260,51],256],8532:[[50,8260,51],256],8533:[[49,8260,53],256],8534:[[50,8260,53],256],8535:[[51,8260,53],256],8536:[[52,8260,53],256],8537:[[49,8260,54],256],8538:[[53,8260,54],256],8539:[[49,8260,56],256],8540:[[51,8260,56],256],8541:[[53,8260,56],256],8542:[[55,8260,56],256],8543:[[49,8260],256],8544:[[73],256],8545:[[73,73],256],8546:[[73,73,73],256],8547:[[73,86],256],8548:[[86],256],8549:[[86,73],256],8550:[[86,73,73],256],8551:[[86,73,73,73],256],8552:[[73,88],256],8553:[[88],256],8554:[[88,73],256],8555:[[88,73,73],256],8556:[[76],256],8557:[[67],256],8558:[[68],256],8559:[[77],256],8560:[[105],256],8561:[[105,105],256],8562:[[105,105,105],256],8563:[[105,118],256],8564:[[118],256],8565:[[118,105],256],8566:[[118,105,105],256],8567:[[118,105,105,105],256],8568:[[105,120],256],8569:[[120],256],8570:[[120,105],256],8571:[[120,105,105],256],8572:[[108],256],8573:[[99],256],8574:[[100],256],8575:[[109],256],8585:[[48,8260,51],256],8592:[,,{824:8602}],8594:[,,{824:8603}],8596:[,,{824:8622}],8602:[[8592,824]],8603:[[8594,824]],8622:[[8596,824]],8653:[[8656,824]],8654:[[8660,824]],8655:[[8658,824]],8656:[,,{824:8653}],8658:[,,{824:8655}],8660:[,,{824:8654}]},
                8704:{8707:[,,{824:8708}],8708:[[8707,824]],8712:[,,{824:8713}],8713:[[8712,824]],8715:[,,{824:8716}],8716:[[8715,824]],8739:[,,{824:8740}],8740:[[8739,824]],8741:[,,{824:8742}],8742:[[8741,824]],8748:[[8747,8747],256],8749:[[8747,8747,8747],256],8751:[[8750,8750],256],8752:[[8750,8750,8750],256],8764:[,,{824:8769}],8769:[[8764,824]],8771:[,,{824:8772}],8772:[[8771,824]],8773:[,,{824:8775}],8775:[[8773,824]],8776:[,,{824:8777}],8777:[[8776,824]],8781:[,,{824:8813}],8800:[[61,824]],8801:[,,{824:8802}],8802:[[8801,824]],8804:[,,{824:8816}],8805:[,,{824:8817}],8813:[[8781,824]],8814:[[60,824]],8815:[[62,824]],8816:[[8804,824]],8817:[[8805,824]],8818:[,,{824:8820}],8819:[,,{824:8821}],8820:[[8818,824]],8821:[[8819,824]],8822:[,,{824:8824}],8823:[,,{824:8825}],8824:[[8822,824]],8825:[[8823,824]],8826:[,,{824:8832}],8827:[,,{824:8833}],8828:[,,{824:8928}],8829:[,,{824:8929}],8832:[[8826,824]],8833:[[8827,824]],8834:[,,{824:8836}],8835:[,,{824:8837}],8836:[[8834,824]],8837:[[8835,824]],8838:[,,{824:8840}],8839:[,,{824:8841}],8840:[[8838,824]],8841:[[8839,824]],8849:[,,{824:8930}],8850:[,,{824:8931}],8866:[,,{824:8876}],8872:[,,{824:8877}],8873:[,,{824:8878}],8875:[,,{824:8879}],8876:[[8866,824]],8877:[[8872,824]],8878:[[8873,824]],8879:[[8875,824]],8882:[,,{824:8938}],8883:[,,{824:8939}],8884:[,,{824:8940}],8885:[,,{824:8941}],8928:[[8828,824]],8929:[[8829,824]],8930:[[8849,824]],8931:[[8850,824]],8938:[[8882,824]],8939:[[8883,824]],8940:[[8884,824]],8941:[[8885,824]]},
                8960:{9001:[[12296]],9002:[[12297]]},
                9216:{9312:[[49],256],9313:[[50],256],9314:[[51],256],9315:[[52],256],9316:[[53],256],9317:[[54],256],9318:[[55],256],9319:[[56],256],9320:[[57],256],9321:[[49,48],256],9322:[[49,49],256],9323:[[49,50],256],9324:[[49,51],256],9325:[[49,52],256],9326:[[49,53],256],9327:[[49,54],256],9328:[[49,55],256],9329:[[49,56],256],9330:[[49,57],256],9331:[[50,48],256],9332:[[40,49,41],256],9333:[[40,50,41],256],9334:[[40,51,41],256],9335:[[40,52,41],256],9336:[[40,53,41],256],9337:[[40,54,41],256],9338:[[40,55,41],256],9339:[[40,56,41],256],9340:[[40,57,41],256],9341:[[40,49,48,41],256],9342:[[40,49,49,41],256],9343:[[40,49,50,41],256],9344:[[40,49,51,41],256],9345:[[40,49,52,41],256],9346:[[40,49,53,41],256],9347:[[40,49,54,41],256],9348:[[40,49,55,41],256],9349:[[40,49,56,41],256],9350:[[40,49,57,41],256],9351:[[40,50,48,41],256],9352:[[49,46],256],9353:[[50,46],256],9354:[[51,46],256],9355:[[52,46],256],9356:[[53,46],256],9357:[[54,46],256],9358:[[55,46],256],9359:[[56,46],256],9360:[[57,46],256],9361:[[49,48,46],256],9362:[[49,49,46],256],9363:[[49,50,46],256],9364:[[49,51,46],256],9365:[[49,52,46],256],9366:[[49,53,46],256],9367:[[49,54,46],256],9368:[[49,55,46],256],9369:[[49,56,46],256],9370:[[49,57,46],256],9371:[[50,48,46],256],9372:[[40,97,41],256],9373:[[40,98,41],256],9374:[[40,99,41],256],9375:[[40,100,41],256],9376:[[40,101,41],256],9377:[[40,102,41],256],9378:[[40,103,41],256],9379:[[40,104,41],256],9380:[[40,105,41],256],9381:[[40,106,41],256],9382:[[40,107,41],256],9383:[[40,108,41],256],9384:[[40,109,41],256],9385:[[40,110,41],256],9386:[[40,111,41],256],9387:[[40,112,41],256],9388:[[40,113,41],256],9389:[[40,114,41],256],9390:[[40,115,41],256],9391:[[40,116,41],256],9392:[[40,117,41],256],9393:[[40,118,41],256],9394:[[40,119,41],256],9395:[[40,120,41],256],9396:[[40,121,41],256],9397:[[40,122,41],256],9398:[[65],256],9399:[[66],256],9400:[[67],256],9401:[[68],256],9402:[[69],256],9403:[[70],256],9404:[[71],256],9405:[[72],256],9406:[[73],256],9407:[[74],256],9408:[[75],256],9409:[[76],256],9410:[[77],256],9411:[[78],256],9412:[[79],256],9413:[[80],256],9414:[[81],256],9415:[[82],256],9416:[[83],256],9417:[[84],256],9418:[[85],256],9419:[[86],256],9420:[[87],256],9421:[[88],256],9422:[[89],256],9423:[[90],256],9424:[[97],256],9425:[[98],256],9426:[[99],256],9427:[[100],256],9428:[[101],256],9429:[[102],256],9430:[[103],256],9431:[[104],256],9432:[[105],256],9433:[[106],256],9434:[[107],256],9435:[[108],256],9436:[[109],256],9437:[[110],256],9438:[[111],256],9439:[[112],256],9440:[[113],256],9441:[[114],256],9442:[[115],256],9443:[[116],256],9444:[[117],256],9445:[[118],256],9446:[[119],256],9447:[[120],256],9448:[[121],256],9449:[[122],256],9450:[[48],256]},
                10752:{10764:[[8747,8747,8747,8747],256],10868:[[58,58,61],256],10869:[[61,61],256],10870:[[61,61,61],256],10972:[[10973,824],512]},
                11264:{11388:[[106],256],11389:[[86],256],11503:[,230],11504:[,230],11505:[,230]},
                11520:{11631:[[11617],256],11647:[,9],11744:[,230],11745:[,230],11746:[,230],11747:[,230],11748:[,230],11749:[,230],11750:[,230],11751:[,230],11752:[,230],11753:[,230],11754:[,230],11755:[,230],11756:[,230],11757:[,230],11758:[,230],11759:[,230],11760:[,230],11761:[,230],11762:[,230],11763:[,230],11764:[,230],11765:[,230],11766:[,230],11767:[,230],11768:[,230],11769:[,230],11770:[,230],11771:[,230],11772:[,230],11773:[,230],11774:[,230],11775:[,230]},
                11776:{11935:[[27597],256],12019:[[40863],256]},
                12032:{12032:[[19968],256],12033:[[20008],256],12034:[[20022],256],12035:[[20031],256],12036:[[20057],256],12037:[[20101],256],12038:[[20108],256],12039:[[20128],256],12040:[[20154],256],12041:[[20799],256],12042:[[20837],256],12043:[[20843],256],12044:[[20866],256],12045:[[20886],256],12046:[[20907],256],12047:[[20960],256],12048:[[20981],256],12049:[[20992],256],12050:[[21147],256],12051:[[21241],256],12052:[[21269],256],12053:[[21274],256],12054:[[21304],256],12055:[[21313],256],12056:[[21340],256],12057:[[21353],256],12058:[[21378],256],12059:[[21430],256],12060:[[21448],256],12061:[[21475],256],12062:[[22231],256],12063:[[22303],256],12064:[[22763],256],12065:[[22786],256],12066:[[22794],256],12067:[[22805],256],12068:[[22823],256],12069:[[22899],256],12070:[[23376],256],12071:[[23424],256],12072:[[23544],256],12073:[[23567],256],12074:[[23586],256],12075:[[23608],256],12076:[[23662],256],12077:[[23665],256],12078:[[24027],256],12079:[[24037],256],12080:[[24049],256],12081:[[24062],256],12082:[[24178],256],12083:[[24186],256],12084:[[24191],256],12085:[[24308],256],12086:[[24318],256],12087:[[24331],256],12088:[[24339],256],12089:[[24400],256],12090:[[24417],256],12091:[[24435],256],12092:[[24515],256],12093:[[25096],256],12094:[[25142],256],12095:[[25163],256],12096:[[25903],256],12097:[[25908],256],12098:[[25991],256],12099:[[26007],256],12100:[[26020],256],12101:[[26041],256],12102:[[26080],256],12103:[[26085],256],12104:[[26352],256],12105:[[26376],256],12106:[[26408],256],12107:[[27424],256],12108:[[27490],256],12109:[[27513],256],12110:[[27571],256],12111:[[27595],256],12112:[[27604],256],12113:[[27611],256],12114:[[27663],256],12115:[[27668],256],12116:[[27700],256],12117:[[28779],256],12118:[[29226],256],12119:[[29238],256],12120:[[29243],256],12121:[[29247],256],12122:[[29255],256],12123:[[29273],256],12124:[[29275],256],12125:[[29356],256],12126:[[29572],256],12127:[[29577],256],12128:[[29916],256],12129:[[29926],256],12130:[[29976],256],12131:[[29983],256],12132:[[29992],256],12133:[[30000],256],12134:[[30091],256],12135:[[30098],256],12136:[[30326],256],12137:[[30333],256],12138:[[30382],256],12139:[[30399],256],12140:[[30446],256],12141:[[30683],256],12142:[[30690],256],12143:[[30707],256],12144:[[31034],256],12145:[[31160],256],12146:[[31166],256],12147:[[31348],256],12148:[[31435],256],12149:[[31481],256],12150:[[31859],256],12151:[[31992],256],12152:[[32566],256],12153:[[32593],256],12154:[[32650],256],12155:[[32701],256],12156:[[32769],256],12157:[[32780],256],12158:[[32786],256],12159:[[32819],256],12160:[[32895],256],12161:[[32905],256],12162:[[33251],256],12163:[[33258],256],12164:[[33267],256],12165:[[33276],256],12166:[[33292],256],12167:[[33307],256],12168:[[33311],256],12169:[[33390],256],12170:[[33394],256],12171:[[33400],256],12172:[[34381],256],12173:[[34411],256],12174:[[34880],256],12175:[[34892],256],12176:[[34915],256],12177:[[35198],256],12178:[[35211],256],12179:[[35282],256],12180:[[35328],256],12181:[[35895],256],12182:[[35910],256],12183:[[35925],256],12184:[[35960],256],12185:[[35997],256],12186:[[36196],256],12187:[[36208],256],12188:[[36275],256],12189:[[36523],256],12190:[[36554],256],12191:[[36763],256],12192:[[36784],256],12193:[[36789],256],12194:[[37009],256],12195:[[37193],256],12196:[[37318],256],12197:[[37324],256],12198:[[37329],256],12199:[[38263],256],12200:[[38272],256],12201:[[38428],256],12202:[[38582],256],12203:[[38585],256],12204:[[38632],256],12205:[[38737],256],12206:[[38750],256],12207:[[38754],256],12208:[[38761],256],12209:[[38859],256],12210:[[38893],256],12211:[[38899],256],12212:[[38913],256],12213:[[39080],256],12214:[[39131],256],12215:[[39135],256],12216:[[39318],256],12217:[[39321],256],12218:[[39340],256],12219:[[39592],256],12220:[[39640],256],12221:[[39647],256],12222:[[39717],256],12223:[[39727],256],12224:[[39730],256],12225:[[39740],256],12226:[[39770],256],12227:[[40165],256],12228:[[40565],256],12229:[[40575],256],12230:[[40613],256],12231:[[40635],256],12232:[[40643],256],12233:[[40653],256],12234:[[40657],256],12235:[[40697],256],12236:[[40701],256],12237:[[40718],256],12238:[[40723],256],12239:[[40736],256],12240:[[40763],256],12241:[[40778],256],12242:[[40786],256],12243:[[40845],256],12244:[[40860],256],12245:[[40864],256]},
                12288:{12288:[[32],256],12330:[,218],12331:[,228],12332:[,232],12333:[,222],12334:[,224],12335:[,224],12342:[[12306],256],12344:[[21313],256],12345:[[21316],256],12346:[[21317],256],12358:[,,{12441:12436}],12363:[,,{12441:12364}],12364:[[12363,12441]],12365:[,,{12441:12366}],12366:[[12365,12441]],12367:[,,{12441:12368}],12368:[[12367,12441]],12369:[,,{12441:12370}],12370:[[12369,12441]],12371:[,,{12441:12372}],12372:[[12371,12441]],12373:[,,{12441:12374}],12374:[[12373,12441]],12375:[,,{12441:12376}],12376:[[12375,12441]],12377:[,,{12441:12378}],12378:[[12377,12441]],12379:[,,{12441:12380}],12380:[[12379,12441]],12381:[,,{12441:12382}],12382:[[12381,12441]],12383:[,,{12441:12384}],12384:[[12383,12441]],12385:[,,{12441:12386}],12386:[[12385,12441]],12388:[,,{12441:12389}],12389:[[12388,12441]],12390:[,,{12441:12391}],12391:[[12390,12441]],12392:[,,{12441:12393}],12393:[[12392,12441]],12399:[,,{12441:12400,12442:12401}],12400:[[12399,12441]],12401:[[12399,12442]],12402:[,,{12441:12403,12442:12404}],12403:[[12402,12441]],12404:[[12402,12442]],12405:[,,{12441:12406,12442:12407}],12406:[[12405,12441]],12407:[[12405,12442]],12408:[,,{12441:12409,12442:12410}],12409:[[12408,12441]],12410:[[12408,12442]],12411:[,,{12441:12412,12442:12413}],12412:[[12411,12441]],12413:[[12411,12442]],12436:[[12358,12441]],12441:[,8],12442:[,8],12443:[[32,12441],256],12444:[[32,12442],256],12445:[,,{12441:12446}],12446:[[12445,12441]],12447:[[12424,12426],256],12454:[,,{12441:12532}],12459:[,,{12441:12460}],12460:[[12459,12441]],12461:[,,{12441:12462}],12462:[[12461,12441]],12463:[,,{12441:12464}],12464:[[12463,12441]],12465:[,,{12441:12466}],12466:[[12465,12441]],12467:[,,{12441:12468}],12468:[[12467,12441]],12469:[,,{12441:12470}],12470:[[12469,12441]],12471:[,,{12441:12472}],12472:[[12471,12441]],12473:[,,{12441:12474}],12474:[[12473,12441]],12475:[,,{12441:12476}],12476:[[12475,12441]],12477:[,,{12441:12478}],12478:[[12477,12441]],12479:[,,{12441:12480}],12480:[[12479,12441]],12481:[,,{12441:12482}],12482:[[12481,12441]],12484:[,,{12441:12485}],12485:[[12484,12441]],12486:[,,{12441:12487}],12487:[[12486,12441]],12488:[,,{12441:12489}],12489:[[12488,12441]],12495:[,,{12441:12496,12442:12497}],12496:[[12495,12441]],12497:[[12495,12442]],12498:[,,{12441:12499,12442:12500}],12499:[[12498,12441]],12500:[[12498,12442]],12501:[,,{12441:12502,12442:12503}],12502:[[12501,12441]],12503:[[12501,12442]],12504:[,,{12441:12505,12442:12506}],12505:[[12504,12441]],12506:[[12504,12442]],12507:[,,{12441:12508,12442:12509}],12508:[[12507,12441]],12509:[[12507,12442]],12527:[,,{12441:12535}],12528:[,,{12441:12536}],12529:[,,{12441:12537}],12530:[,,{12441:12538}],12532:[[12454,12441]],12535:[[12527,12441]],12536:[[12528,12441]],12537:[[12529,12441]],12538:[[12530,12441]],12541:[,,{12441:12542}],12542:[[12541,12441]],12543:[[12467,12488],256]},
                12544:{12593:[[4352],256],12594:[[4353],256],12595:[[4522],256],12596:[[4354],256],12597:[[4524],256],12598:[[4525],256],12599:[[4355],256],12600:[[4356],256],12601:[[4357],256],12602:[[4528],256],12603:[[4529],256],12604:[[4530],256],12605:[[4531],256],12606:[[4532],256],12607:[[4533],256],12608:[[4378],256],12609:[[4358],256],12610:[[4359],256],12611:[[4360],256],12612:[[4385],256],12613:[[4361],256],12614:[[4362],256],12615:[[4363],256],12616:[[4364],256],12617:[[4365],256],12618:[[4366],256],12619:[[4367],256],12620:[[4368],256],12621:[[4369],256],12622:[[4370],256],12623:[[4449],256],12624:[[4450],256],12625:[[4451],256],12626:[[4452],256],12627:[[4453],256],12628:[[4454],256],12629:[[4455],256],12630:[[4456],256],12631:[[4457],256],12632:[[4458],256],12633:[[4459],256],12634:[[4460],256],12635:[[4461],256],12636:[[4462],256],12637:[[4463],256],12638:[[4464],256],12639:[[4465],256],12640:[[4466],256],12641:[[4467],256],12642:[[4468],256],12643:[[4469],256],12644:[[4448],256],12645:[[4372],256],12646:[[4373],256],12647:[[4551],256],12648:[[4552],256],12649:[[4556],256],12650:[[4558],256],12651:[[4563],256],12652:[[4567],256],12653:[[4569],256],12654:[[4380],256],12655:[[4573],256],12656:[[4575],256],12657:[[4381],256],12658:[[4382],256],12659:[[4384],256],12660:[[4386],256],12661:[[4387],256],12662:[[4391],256],12663:[[4393],256],12664:[[4395],256],12665:[[4396],256],12666:[[4397],256],12667:[[4398],256],12668:[[4399],256],12669:[[4402],256],12670:[[4406],256],12671:[[4416],256],12672:[[4423],256],12673:[[4428],256],12674:[[4593],256],12675:[[4594],256],12676:[[4439],256],12677:[[4440],256],12678:[[4441],256],12679:[[4484],256],12680:[[4485],256],12681:[[4488],256],12682:[[4497],256],12683:[[4498],256],12684:[[4500],256],12685:[[4510],256],12686:[[4513],256],12690:[[19968],256],12691:[[20108],256],12692:[[19977],256],12693:[[22235],256],12694:[[19978],256],12695:[[20013],256],12696:[[19979],256],12697:[[30002],256],12698:[[20057],256],12699:[[19993],256],12700:[[19969],256],12701:[[22825],256],12702:[[22320],256],12703:[[20154],256]},
                12800:{12800:[[40,4352,41],256],12801:[[40,4354,41],256],12802:[[40,4355,41],256],12803:[[40,4357,41],256],12804:[[40,4358,41],256],12805:[[40,4359,41],256],12806:[[40,4361,41],256],12807:[[40,4363,41],256],12808:[[40,4364,41],256],12809:[[40,4366,41],256],12810:[[40,4367,41],256],12811:[[40,4368,41],256],12812:[[40,4369,41],256],12813:[[40,4370,41],256],12814:[[40,4352,4449,41],256],12815:[[40,4354,4449,41],256],12816:[[40,4355,4449,41],256],12817:[[40,4357,4449,41],256],12818:[[40,4358,4449,41],256],12819:[[40,4359,4449,41],256],12820:[[40,4361,4449,41],256],12821:[[40,4363,4449,41],256],12822:[[40,4364,4449,41],256],12823:[[40,4366,4449,41],256],12824:[[40,4367,4449,41],256],12825:[[40,4368,4449,41],256],12826:[[40,4369,4449,41],256],12827:[[40,4370,4449,41],256],12828:[[40,4364,4462,41],256],12829:[[40,4363,4457,4364,4453,4523,41],256],12830:[[40,4363,4457,4370,4462,41],256],12832:[[40,19968,41],256],12833:[[40,20108,41],256],12834:[[40,19977,41],256],12835:[[40,22235,41],256],12836:[[40,20116,41],256],12837:[[40,20845,41],256],12838:[[40,19971,41],256],12839:[[40,20843,41],256],12840:[[40,20061,41],256],12841:[[40,21313,41],256],12842:[[40,26376,41],256],12843:[[40,28779,41],256],12844:[[40,27700,41],256],12845:[[40,26408,41],256],12846:[[40,37329,41],256],12847:[[40,22303,41],256],12848:[[40,26085,41],256],12849:[[40,26666,41],256],12850:[[40,26377,41],256],12851:[[40,31038,41],256],12852:[[40,21517,41],256],12853:[[40,29305,41],256],12854:[[40,36001,41],256],12855:[[40,31069,41],256],12856:[[40,21172,41],256],12857:[[40,20195,41],256],12858:[[40,21628,41],256],12859:[[40,23398,41],256],12860:[[40,30435,41],256],12861:[[40,20225,41],256],12862:[[40,36039,41],256],12863:[[40,21332,41],256],12864:[[40,31085,41],256],12865:[[40,20241,41],256],12866:[[40,33258,41],256],12867:[[40,33267,41],256],12868:[[21839],256],12869:[[24188],256],12870:[[25991],256],12871:[[31631],256],12880:[[80,84,69],256],12881:[[50,49],256],12882:[[50,50],256],12883:[[50,51],256],12884:[[50,52],256],12885:[[50,53],256],12886:[[50,54],256],12887:[[50,55],256],12888:[[50,56],256],12889:[[50,57],256],12890:[[51,48],256],12891:[[51,49],256],12892:[[51,50],256],12893:[[51,51],256],12894:[[51,52],256],12895:[[51,53],256],12896:[[4352],256],12897:[[4354],256],12898:[[4355],256],12899:[[4357],256],12900:[[4358],256],12901:[[4359],256],12902:[[4361],256],12903:[[4363],256],12904:[[4364],256],12905:[[4366],256],12906:[[4367],256],12907:[[4368],256],12908:[[4369],256],12909:[[4370],256],12910:[[4352,4449],256],12911:[[4354,4449],256],12912:[[4355,4449],256],12913:[[4357,4449],256],12914:[[4358,4449],256],12915:[[4359,4449],256],12916:[[4361,4449],256],12917:[[4363,4449],256],12918:[[4364,4449],256],12919:[[4366,4449],256],12920:[[4367,4449],256],12921:[[4368,4449],256],12922:[[4369,4449],256],12923:[[4370,4449],256],12924:[[4366,4449,4535,4352,4457],256],12925:[[4364,4462,4363,4468],256],12926:[[4363,4462],256],12928:[[19968],256],12929:[[20108],256],12930:[[19977],256],12931:[[22235],256],12932:[[20116],256],12933:[[20845],256],12934:[[19971],256],12935:[[20843],256],12936:[[20061],256],12937:[[21313],256],12938:[[26376],256],12939:[[28779],256],12940:[[27700],256],12941:[[26408],256],12942:[[37329],256],12943:[[22303],256],12944:[[26085],256],12945:[[26666],256],12946:[[26377],256],12947:[[31038],256],12948:[[21517],256],12949:[[29305],256],12950:[[36001],256],12951:[[31069],256],12952:[[21172],256],12953:[[31192],256],12954:[[30007],256],12955:[[22899],256],12956:[[36969],256],12957:[[20778],256],12958:[[21360],256],12959:[[27880],256],12960:[[38917],256],12961:[[20241],256],12962:[[20889],256],12963:[[27491],256],12964:[[19978],256],12965:[[20013],256],12966:[[19979],256],12967:[[24038],256],12968:[[21491],256],12969:[[21307],256],12970:[[23447],256],12971:[[23398],256],12972:[[30435],256],12973:[[20225],256],12974:[[36039],256],12975:[[21332],256],12976:[[22812],256],12977:[[51,54],256],12978:[[51,55],256],12979:[[51,56],256],12980:[[51,57],256],12981:[[52,48],256],12982:[[52,49],256],12983:[[52,50],256],12984:[[52,51],256],12985:[[52,52],256],12986:[[52,53],256],12987:[[52,54],256],12988:[[52,55],256],12989:[[52,56],256],12990:[[52,57],256],12991:[[53,48],256],12992:[[49,26376],256],12993:[[50,26376],256],12994:[[51,26376],256],12995:[[52,26376],256],12996:[[53,26376],256],12997:[[54,26376],256],12998:[[55,26376],256],12999:[[56,26376],256],13000:[[57,26376],256],13001:[[49,48,26376],256],13002:[[49,49,26376],256],13003:[[49,50,26376],256],13004:[[72,103],256],13005:[[101,114,103],256],13006:[[101,86],256],13007:[[76,84,68],256],13008:[[12450],256],13009:[[12452],256],13010:[[12454],256],13011:[[12456],256],13012:[[12458],256],13013:[[12459],256],13014:[[12461],256],13015:[[12463],256],13016:[[12465],256],13017:[[12467],256],13018:[[12469],256],13019:[[12471],256],13020:[[12473],256],13021:[[12475],256],13022:[[12477],256],13023:[[12479],256],13024:[[12481],256],13025:[[12484],256],13026:[[12486],256],13027:[[12488],256],13028:[[12490],256],13029:[[12491],256],13030:[[12492],256],13031:[[12493],256],13032:[[12494],256],13033:[[12495],256],13034:[[12498],256],13035:[[12501],256],13036:[[12504],256],13037:[[12507],256],13038:[[12510],256],13039:[[12511],256],13040:[[12512],256],13041:[[12513],256],13042:[[12514],256],13043:[[12516],256],13044:[[12518],256],13045:[[12520],256],13046:[[12521],256],13047:[[12522],256],13048:[[12523],256],13049:[[12524],256],13050:[[12525],256],13051:[[12527],256],13052:[[12528],256],13053:[[12529],256],13054:[[12530],256]},
                13056:{13056:[[12450,12497,12540,12488],256],13057:[[12450,12523,12501,12449],256],13058:[[12450,12531,12506,12450],256],13059:[[12450,12540,12523],256],13060:[[12452,12491,12531,12464],256],13061:[[12452,12531,12481],256],13062:[[12454,12457,12531],256],13063:[[12456,12473,12463,12540,12489],256],13064:[[12456,12540,12459,12540],256],13065:[[12458,12531,12473],256],13066:[[12458,12540,12512],256],13067:[[12459,12452,12522],256],13068:[[12459,12521,12483,12488],256],13069:[[12459,12525,12522,12540],256],13070:[[12460,12525,12531],256],13071:[[12460,12531,12510],256],13072:[[12462,12460],256],13073:[[12462,12491,12540],256],13074:[[12461,12517,12522,12540],256],13075:[[12462,12523,12480,12540],256],13076:[[12461,12525],256],13077:[[12461,12525,12464,12521,12512],256],13078:[[12461,12525,12513,12540,12488,12523],256],13079:[[12461,12525,12527,12483,12488],256],13080:[[12464,12521,12512],256],13081:[[12464,12521,12512,12488,12531],256],13082:[[12463,12523,12476,12452,12525],256],13083:[[12463,12525,12540,12493],256],13084:[[12465,12540,12473],256],13085:[[12467,12523,12490],256],13086:[[12467,12540,12509],256],13087:[[12469,12452,12463,12523],256],13088:[[12469,12531,12481,12540,12512],256],13089:[[12471,12522,12531,12464],256],13090:[[12475,12531,12481],256],13091:[[12475,12531,12488],256],13092:[[12480,12540,12473],256],13093:[[12487,12471],256],13094:[[12489,12523],256],13095:[[12488,12531],256],13096:[[12490,12494],256],13097:[[12494,12483,12488],256],13098:[[12495,12452,12484],256],13099:[[12497,12540,12475,12531,12488],256],13100:[[12497,12540,12484],256],13101:[[12496,12540,12524,12523],256],13102:[[12500,12450,12473,12488,12523],256],13103:[[12500,12463,12523],256],13104:[[12500,12467],256],13105:[[12499,12523],256],13106:[[12501,12449,12521,12483,12489],256],13107:[[12501,12451,12540,12488],256],13108:[[12502,12483,12471,12455,12523],256],13109:[[12501,12521,12531],256],13110:[[12504,12463,12479,12540,12523],256],13111:[[12506,12477],256],13112:[[12506,12491,12498],256],13113:[[12504,12523,12484],256],13114:[[12506,12531,12473],256],13115:[[12506,12540,12472],256],13116:[[12505,12540,12479],256],13117:[[12509,12452,12531,12488],256],13118:[[12508,12523,12488],256],13119:[[12507,12531],256],13120:[[12509,12531,12489],256],13121:[[12507,12540,12523],256],13122:[[12507,12540,12531],256],13123:[[12510,12452,12463,12525],256],13124:[[12510,12452,12523],256],13125:[[12510,12483,12495],256],13126:[[12510,12523,12463],256],13127:[[12510,12531,12471,12519,12531],256],13128:[[12511,12463,12525,12531],256],13129:[[12511,12522],256],13130:[[12511,12522,12496,12540,12523],256],13131:[[12513,12460],256],13132:[[12513,12460,12488,12531],256],13133:[[12513,12540,12488,12523],256],13134:[[12516,12540,12489],256],13135:[[12516,12540,12523],256],13136:[[12518,12450,12531],256],13137:[[12522,12483,12488,12523],256],13138:[[12522,12521],256],13139:[[12523,12500,12540],256],13140:[[12523,12540,12502,12523],256],13141:[[12524,12512],256],13142:[[12524,12531,12488,12466,12531],256],13143:[[12527,12483,12488],256],13144:[[48,28857],256],13145:[[49,28857],256],13146:[[50,28857],256],13147:[[51,28857],256],13148:[[52,28857],256],13149:[[53,28857],256],13150:[[54,28857],256],13151:[[55,28857],256],13152:[[56,28857],256],13153:[[57,28857],256],13154:[[49,48,28857],256],13155:[[49,49,28857],256],13156:[[49,50,28857],256],13157:[[49,51,28857],256],13158:[[49,52,28857],256],13159:[[49,53,28857],256],13160:[[49,54,28857],256],13161:[[49,55,28857],256],13162:[[49,56,28857],256],13163:[[49,57,28857],256],13164:[[50,48,28857],256],13165:[[50,49,28857],256],13166:[[50,50,28857],256],13167:[[50,51,28857],256],13168:[[50,52,28857],256],13169:[[104,80,97],256],13170:[[100,97],256],13171:[[65,85],256],13172:[[98,97,114],256],13173:[[111,86],256],13174:[[112,99],256],13175:[[100,109],256],13176:[[100,109,178],256],13177:[[100,109,179],256],13178:[[73,85],256],13179:[[24179,25104],256],13180:[[26157,21644],256],13181:[[22823,27491],256],13182:[[26126,27835],256],13183:[[26666,24335,20250,31038],256],13184:[[112,65],256],13185:[[110,65],256],13186:[[956,65],256],13187:[[109,65],256],13188:[[107,65],256],13189:[[75,66],256],13190:[[77,66],256],13191:[[71,66],256],13192:[[99,97,108],256],13193:[[107,99,97,108],256],13194:[[112,70],256],13195:[[110,70],256],13196:[[956,70],256],13197:[[956,103],256],13198:[[109,103],256],13199:[[107,103],256],13200:[[72,122],256],13201:[[107,72,122],256],13202:[[77,72,122],256],13203:[[71,72,122],256],13204:[[84,72,122],256],13205:[[956,8467],256],13206:[[109,8467],256],13207:[[100,8467],256],13208:[[107,8467],256],13209:[[102,109],256],13210:[[110,109],256],13211:[[956,109],256],13212:[[109,109],256],13213:[[99,109],256],13214:[[107,109],256],13215:[[109,109,178],256],13216:[[99,109,178],256],13217:[[109,178],256],13218:[[107,109,178],256],13219:[[109,109,179],256],13220:[[99,109,179],256],13221:[[109,179],256],13222:[[107,109,179],256],13223:[[109,8725,115],256],13224:[[109,8725,115,178],256],13225:[[80,97],256],13226:[[107,80,97],256],13227:[[77,80,97],256],13228:[[71,80,97],256],13229:[[114,97,100],256],13230:[[114,97,100,8725,115],256],13231:[[114,97,100,8725,115,178],256],13232:[[112,115],256],13233:[[110,115],256],13234:[[956,115],256],13235:[[109,115],256],13236:[[112,86],256],13237:[[110,86],256],13238:[[956,86],256],13239:[[109,86],256],13240:[[107,86],256],13241:[[77,86],256],13242:[[112,87],256],13243:[[110,87],256],13244:[[956,87],256],13245:[[109,87],256],13246:[[107,87],256],13247:[[77,87],256],13248:[[107,937],256],13249:[[77,937],256],13250:[[97,46,109,46],256],13251:[[66,113],256],13252:[[99,99],256],13253:[[99,100],256],13254:[[67,8725,107,103],256],13255:[[67,111,46],256],13256:[[100,66],256],13257:[[71,121],256],13258:[[104,97],256],13259:[[72,80],256],13260:[[105,110],256],13261:[[75,75],256],13262:[[75,77],256],13263:[[107,116],256],13264:[[108,109],256],13265:[[108,110],256],13266:[[108,111,103],256],13267:[[108,120],256],13268:[[109,98],256],13269:[[109,105,108],256],13270:[[109,111,108],256],13271:[[80,72],256],13272:[[112,46,109,46],256],13273:[[80,80,77],256],13274:[[80,82],256],13275:[[115,114],256],13276:[[83,118],256],13277:[[87,98],256],13278:[[86,8725,109],256],13279:[[65,8725,109],256],13280:[[49,26085],256],13281:[[50,26085],256],13282:[[51,26085],256],13283:[[52,26085],256],13284:[[53,26085],256],13285:[[54,26085],256],13286:[[55,26085],256],13287:[[56,26085],256],13288:[[57,26085],256],13289:[[49,48,26085],256],13290:[[49,49,26085],256],13291:[[49,50,26085],256],13292:[[49,51,26085],256],13293:[[49,52,26085],256],13294:[[49,53,26085],256],13295:[[49,54,26085],256],13296:[[49,55,26085],256],13297:[[49,56,26085],256],13298:[[49,57,26085],256],13299:[[50,48,26085],256],13300:[[50,49,26085],256],13301:[[50,50,26085],256],13302:[[50,51,26085],256],13303:[[50,52,26085],256],13304:[[50,53,26085],256],13305:[[50,54,26085],256],13306:[[50,55,26085],256],13307:[[50,56,26085],256],13308:[[50,57,26085],256],13309:[[51,48,26085],256],13310:[[51,49,26085],256],13311:[[103,97,108],256]},
                27136:{92912:[,1],92913:[,1],92914:[,1],92915:[,1],92916:[,1]},
                27392:{92976:[,230],92977:[,230],92978:[,230],92979:[,230],92980:[,230],92981:[,230],92982:[,230]},
                42496:{42607:[,230],42612:[,230],42613:[,230],42614:[,230],42615:[,230],42616:[,230],42617:[,230],42618:[,230],42619:[,230],42620:[,230],42621:[,230],42652:[[1098],256],42653:[[1100],256],42655:[,230],42736:[,230],42737:[,230]},
                42752:{42864:[[42863],256],43000:[[294],256],43001:[[339],256]},
                43008:{43014:[,9],43204:[,9],43232:[,230],43233:[,230],43234:[,230],43235:[,230],43236:[,230],43237:[,230],43238:[,230],43239:[,230],43240:[,230],43241:[,230],43242:[,230],43243:[,230],43244:[,230],43245:[,230],43246:[,230],43247:[,230],43248:[,230],43249:[,230]},
                43264:{43307:[,220],43308:[,220],43309:[,220],43347:[,9],43443:[,7],43456:[,9]},
                43520:{43696:[,230],43698:[,230],43699:[,230],43700:[,220],43703:[,230],43704:[,230],43710:[,230],43711:[,230],43713:[,230],43766:[,9]},
                43776:{43868:[[42791],256],43869:[[43831],256],43870:[[619],256],43871:[[43858],256],44013:[,9]},
                48128:{113822:[,1]},
                53504:{119134:[[119127,119141],512],119135:[[119128,119141],512],119136:[[119135,119150],512],119137:[[119135,119151],512],119138:[[119135,119152],512],119139:[[119135,119153],512],119140:[[119135,119154],512],119141:[,216],119142:[,216],119143:[,1],119144:[,1],119145:[,1],119149:[,226],119150:[,216],119151:[,216],119152:[,216],119153:[,216],119154:[,216],119163:[,220],119164:[,220],119165:[,220],119166:[,220],119167:[,220],119168:[,220],119169:[,220],119170:[,220],119173:[,230],119174:[,230],119175:[,230],119176:[,230],119177:[,230],119178:[,220],119179:[,220],119210:[,230],119211:[,230],119212:[,230],119213:[,230],119227:[[119225,119141],512],119228:[[119226,119141],512],119229:[[119227,119150],512],119230:[[119228,119150],512],119231:[[119227,119151],512],119232:[[119228,119151],512]},
                53760:{119362:[,230],119363:[,230],119364:[,230]},
                54272:{119808:[[65],256],119809:[[66],256],119810:[[67],256],119811:[[68],256],119812:[[69],256],119813:[[70],256],119814:[[71],256],119815:[[72],256],119816:[[73],256],119817:[[74],256],119818:[[75],256],119819:[[76],256],119820:[[77],256],119821:[[78],256],119822:[[79],256],119823:[[80],256],119824:[[81],256],119825:[[82],256],119826:[[83],256],119827:[[84],256],119828:[[85],256],119829:[[86],256],119830:[[87],256],119831:[[88],256],119832:[[89],256],119833:[[90],256],119834:[[97],256],119835:[[98],256],119836:[[99],256],119837:[[100],256],119838:[[101],256],119839:[[102],256],119840:[[103],256],119841:[[104],256],119842:[[105],256],119843:[[106],256],119844:[[107],256],119845:[[108],256],119846:[[109],256],119847:[[110],256],119848:[[111],256],119849:[[112],256],119850:[[113],256],119851:[[114],256],119852:[[115],256],119853:[[116],256],119854:[[117],256],119855:[[118],256],119856:[[119],256],119857:[[120],256],119858:[[121],256],119859:[[122],256],119860:[[65],256],119861:[[66],256],119862:[[67],256],119863:[[68],256],119864:[[69],256],119865:[[70],256],119866:[[71],256],119867:[[72],256],119868:[[73],256],119869:[[74],256],119870:[[75],256],119871:[[76],256],119872:[[77],256],119873:[[78],256],119874:[[79],256],119875:[[80],256],119876:[[81],256],119877:[[82],256],119878:[[83],256],119879:[[84],256],119880:[[85],256],119881:[[86],256],119882:[[87],256],119883:[[88],256],119884:[[89],256],119885:[[90],256],119886:[[97],256],119887:[[98],256],119888:[[99],256],119889:[[100],256],119890:[[101],256],119891:[[102],256],119892:[[103],256],119894:[[105],256],119895:[[106],256],119896:[[107],256],119897:[[108],256],119898:[[109],256],119899:[[110],256],119900:[[111],256],119901:[[112],256],119902:[[113],256],119903:[[114],256],119904:[[115],256],119905:[[116],256],119906:[[117],256],119907:[[118],256],119908:[[119],256],119909:[[120],256],119910:[[121],256],119911:[[122],256],119912:[[65],256],119913:[[66],256],119914:[[67],256],119915:[[68],256],119916:[[69],256],119917:[[70],256],119918:[[71],256],119919:[[72],256],119920:[[73],256],119921:[[74],256],119922:[[75],256],119923:[[76],256],119924:[[77],256],119925:[[78],256],119926:[[79],256],119927:[[80],256],119928:[[81],256],119929:[[82],256],119930:[[83],256],119931:[[84],256],119932:[[85],256],119933:[[86],256],119934:[[87],256],119935:[[88],256],119936:[[89],256],119937:[[90],256],119938:[[97],256],119939:[[98],256],119940:[[99],256],119941:[[100],256],119942:[[101],256],119943:[[102],256],119944:[[103],256],119945:[[104],256],119946:[[105],256],119947:[[106],256],119948:[[107],256],119949:[[108],256],119950:[[109],256],119951:[[110],256],119952:[[111],256],119953:[[112],256],119954:[[113],256],119955:[[114],256],119956:[[115],256],119957:[[116],256],119958:[[117],256],119959:[[118],256],119960:[[119],256],119961:[[120],256],119962:[[121],256],119963:[[122],256],119964:[[65],256],119966:[[67],256],119967:[[68],256],119970:[[71],256],119973:[[74],256],119974:[[75],256],119977:[[78],256],119978:[[79],256],119979:[[80],256],119980:[[81],256],119982:[[83],256],119983:[[84],256],119984:[[85],256],119985:[[86],256],119986:[[87],256],119987:[[88],256],119988:[[89],256],119989:[[90],256],119990:[[97],256],119991:[[98],256],119992:[[99],256],119993:[[100],256],119995:[[102],256],119997:[[104],256],119998:[[105],256],119999:[[106],256],120000:[[107],256],120001:[[108],256],120002:[[109],256],120003:[[110],256],120005:[[112],256],120006:[[113],256],120007:[[114],256],120008:[[115],256],120009:[[116],256],120010:[[117],256],120011:[[118],256],120012:[[119],256],120013:[[120],256],120014:[[121],256],120015:[[122],256],120016:[[65],256],120017:[[66],256],120018:[[67],256],120019:[[68],256],120020:[[69],256],120021:[[70],256],120022:[[71],256],120023:[[72],256],120024:[[73],256],120025:[[74],256],120026:[[75],256],120027:[[76],256],120028:[[77],256],120029:[[78],256],120030:[[79],256],120031:[[80],256],120032:[[81],256],120033:[[82],256],120034:[[83],256],120035:[[84],256],120036:[[85],256],120037:[[86],256],120038:[[87],256],120039:[[88],256],120040:[[89],256],120041:[[90],256],120042:[[97],256],120043:[[98],256],120044:[[99],256],120045:[[100],256],120046:[[101],256],120047:[[102],256],120048:[[103],256],120049:[[104],256],120050:[[105],256],120051:[[106],256],120052:[[107],256],120053:[[108],256],120054:[[109],256],120055:[[110],256],120056:[[111],256],120057:[[112],256],120058:[[113],256],120059:[[114],256],120060:[[115],256],120061:[[116],256],120062:[[117],256],120063:[[118],256]},
                54528:{120064:[[119],256],120065:[[120],256],120066:[[121],256],120067:[[122],256],120068:[[65],256],120069:[[66],256],120071:[[68],256],120072:[[69],256],120073:[[70],256],120074:[[71],256],120077:[[74],256],120078:[[75],256],120079:[[76],256],120080:[[77],256],120081:[[78],256],120082:[[79],256],120083:[[80],256],120084:[[81],256],120086:[[83],256],120087:[[84],256],120088:[[85],256],120089:[[86],256],120090:[[87],256],120091:[[88],256],120092:[[89],256],120094:[[97],256],120095:[[98],256],120096:[[99],256],120097:[[100],256],120098:[[101],256],120099:[[102],256],120100:[[103],256],120101:[[104],256],120102:[[105],256],120103:[[106],256],120104:[[107],256],120105:[[108],256],120106:[[109],256],120107:[[110],256],120108:[[111],256],120109:[[112],256],120110:[[113],256],120111:[[114],256],120112:[[115],256],120113:[[116],256],120114:[[117],256],120115:[[118],256],120116:[[119],256],120117:[[120],256],120118:[[121],256],120119:[[122],256],120120:[[65],256],120121:[[66],256],120123:[[68],256],120124:[[69],256],120125:[[70],256],120126:[[71],256],120128:[[73],256],120129:[[74],256],120130:[[75],256],120131:[[76],256],120132:[[77],256],120134:[[79],256],120138:[[83],256],120139:[[84],256],120140:[[85],256],120141:[[86],256],120142:[[87],256],120143:[[88],256],120144:[[89],256],120146:[[97],256],120147:[[98],256],120148:[[99],256],120149:[[100],256],120150:[[101],256],120151:[[102],256],120152:[[103],256],120153:[[104],256],120154:[[105],256],120155:[[106],256],120156:[[107],256],120157:[[108],256],120158:[[109],256],120159:[[110],256],120160:[[111],256],120161:[[112],256],120162:[[113],256],120163:[[114],256],120164:[[115],256],120165:[[116],256],120166:[[117],256],120167:[[118],256],120168:[[119],256],120169:[[120],256],120170:[[121],256],120171:[[122],256],120172:[[65],256],120173:[[66],256],120174:[[67],256],120175:[[68],256],120176:[[69],256],120177:[[70],256],120178:[[71],256],120179:[[72],256],120180:[[73],256],120181:[[74],256],120182:[[75],256],120183:[[76],256],120184:[[77],256],120185:[[78],256],120186:[[79],256],120187:[[80],256],120188:[[81],256],120189:[[82],256],120190:[[83],256],120191:[[84],256],120192:[[85],256],120193:[[86],256],120194:[[87],256],120195:[[88],256],120196:[[89],256],120197:[[90],256],120198:[[97],256],120199:[[98],256],120200:[[99],256],120201:[[100],256],120202:[[101],256],120203:[[102],256],120204:[[103],256],120205:[[104],256],120206:[[105],256],120207:[[106],256],120208:[[107],256],120209:[[108],256],120210:[[109],256],120211:[[110],256],120212:[[111],256],120213:[[112],256],120214:[[113],256],120215:[[114],256],120216:[[115],256],120217:[[116],256],120218:[[117],256],120219:[[118],256],120220:[[119],256],120221:[[120],256],120222:[[121],256],120223:[[122],256],120224:[[65],256],120225:[[66],256],120226:[[67],256],120227:[[68],256],120228:[[69],256],120229:[[70],256],120230:[[71],256],120231:[[72],256],120232:[[73],256],120233:[[74],256],120234:[[75],256],120235:[[76],256],120236:[[77],256],120237:[[78],256],120238:[[79],256],120239:[[80],256],120240:[[81],256],120241:[[82],256],120242:[[83],256],120243:[[84],256],120244:[[85],256],120245:[[86],256],120246:[[87],256],120247:[[88],256],120248:[[89],256],120249:[[90],256],120250:[[97],256],120251:[[98],256],120252:[[99],256],120253:[[100],256],120254:[[101],256],120255:[[102],256],120256:[[103],256],120257:[[104],256],120258:[[105],256],120259:[[106],256],120260:[[107],256],120261:[[108],256],120262:[[109],256],120263:[[110],256],120264:[[111],256],120265:[[112],256],120266:[[113],256],120267:[[114],256],120268:[[115],256],120269:[[116],256],120270:[[117],256],120271:[[118],256],120272:[[119],256],120273:[[120],256],120274:[[121],256],120275:[[122],256],120276:[[65],256],120277:[[66],256],120278:[[67],256],120279:[[68],256],120280:[[69],256],120281:[[70],256],120282:[[71],256],120283:[[72],256],120284:[[73],256],120285:[[74],256],120286:[[75],256],120287:[[76],256],120288:[[77],256],120289:[[78],256],120290:[[79],256],120291:[[80],256],120292:[[81],256],120293:[[82],256],120294:[[83],256],120295:[[84],256],120296:[[85],256],120297:[[86],256],120298:[[87],256],120299:[[88],256],120300:[[89],256],120301:[[90],256],120302:[[97],256],120303:[[98],256],120304:[[99],256],120305:[[100],256],120306:[[101],256],120307:[[102],256],120308:[[103],256],120309:[[104],256],120310:[[105],256],120311:[[106],256],120312:[[107],256],120313:[[108],256],120314:[[109],256],120315:[[110],256],120316:[[111],256],120317:[[112],256],120318:[[113],256],120319:[[114],256]},
                54784:{120320:[[115],256],120321:[[116],256],120322:[[117],256],120323:[[118],256],120324:[[119],256],120325:[[120],256],120326:[[121],256],120327:[[122],256],120328:[[65],256],120329:[[66],256],120330:[[67],256],120331:[[68],256],120332:[[69],256],120333:[[70],256],120334:[[71],256],120335:[[72],256],120336:[[73],256],120337:[[74],256],120338:[[75],256],120339:[[76],256],120340:[[77],256],120341:[[78],256],120342:[[79],256],120343:[[80],256],120344:[[81],256],120345:[[82],256],120346:[[83],256],120347:[[84],256],120348:[[85],256],120349:[[86],256],120350:[[87],256],120351:[[88],256],120352:[[89],256],120353:[[90],256],120354:[[97],256],120355:[[98],256],120356:[[99],256],120357:[[100],256],120358:[[101],256],120359:[[102],256],120360:[[103],256],120361:[[104],256],120362:[[105],256],120363:[[106],256],120364:[[107],256],120365:[[108],256],120366:[[109],256],120367:[[110],256],120368:[[111],256],120369:[[112],256],120370:[[113],256],120371:[[114],256],120372:[[115],256],120373:[[116],256],120374:[[117],256],120375:[[118],256],120376:[[119],256],120377:[[120],256],120378:[[121],256],120379:[[122],256],120380:[[65],256],120381:[[66],256],120382:[[67],256],120383:[[68],256],120384:[[69],256],120385:[[70],256],120386:[[71],256],120387:[[72],256],120388:[[73],256],120389:[[74],256],120390:[[75],256],120391:[[76],256],120392:[[77],256],120393:[[78],256],120394:[[79],256],120395:[[80],256],120396:[[81],256],120397:[[82],256],120398:[[83],256],120399:[[84],256],120400:[[85],256],120401:[[86],256],120402:[[87],256],120403:[[88],256],120404:[[89],256],120405:[[90],256],120406:[[97],256],120407:[[98],256],120408:[[99],256],120409:[[100],256],120410:[[101],256],120411:[[102],256],120412:[[103],256],120413:[[104],256],120414:[[105],256],120415:[[106],256],120416:[[107],256],120417:[[108],256],120418:[[109],256],120419:[[110],256],120420:[[111],256],120421:[[112],256],120422:[[113],256],120423:[[114],256],120424:[[115],256],120425:[[116],256],120426:[[117],256],120427:[[118],256],120428:[[119],256],120429:[[120],256],120430:[[121],256],120431:[[122],256],120432:[[65],256],120433:[[66],256],120434:[[67],256],120435:[[68],256],120436:[[69],256],120437:[[70],256],120438:[[71],256],120439:[[72],256],120440:[[73],256],120441:[[74],256],120442:[[75],256],120443:[[76],256],120444:[[77],256],120445:[[78],256],120446:[[79],256],120447:[[80],256],120448:[[81],256],120449:[[82],256],120450:[[83],256],120451:[[84],256],120452:[[85],256],120453:[[86],256],120454:[[87],256],120455:[[88],256],120456:[[89],256],120457:[[90],256],120458:[[97],256],120459:[[98],256],120460:[[99],256],120461:[[100],256],120462:[[101],256],120463:[[102],256],120464:[[103],256],120465:[[104],256],120466:[[105],256],120467:[[106],256],120468:[[107],256],120469:[[108],256],120470:[[109],256],120471:[[110],256],120472:[[111],256],120473:[[112],256],120474:[[113],256],120475:[[114],256],120476:[[115],256],120477:[[116],256],120478:[[117],256],120479:[[118],256],120480:[[119],256],120481:[[120],256],120482:[[121],256],120483:[[122],256],120484:[[305],256],120485:[[567],256],120488:[[913],256],120489:[[914],256],120490:[[915],256],120491:[[916],256],120492:[[917],256],120493:[[918],256],120494:[[919],256],120495:[[920],256],120496:[[921],256],120497:[[922],256],120498:[[923],256],120499:[[924],256],120500:[[925],256],120501:[[926],256],120502:[[927],256],120503:[[928],256],120504:[[929],256],120505:[[1012],256],120506:[[931],256],120507:[[932],256],120508:[[933],256],120509:[[934],256],120510:[[935],256],120511:[[936],256],120512:[[937],256],120513:[[8711],256],120514:[[945],256],120515:[[946],256],120516:[[947],256],120517:[[948],256],120518:[[949],256],120519:[[950],256],120520:[[951],256],120521:[[952],256],120522:[[953],256],120523:[[954],256],120524:[[955],256],120525:[[956],256],120526:[[957],256],120527:[[958],256],120528:[[959],256],120529:[[960],256],120530:[[961],256],120531:[[962],256],120532:[[963],256],120533:[[964],256],120534:[[965],256],120535:[[966],256],120536:[[967],256],120537:[[968],256],120538:[[969],256],120539:[[8706],256],120540:[[1013],256],120541:[[977],256],120542:[[1008],256],120543:[[981],256],120544:[[1009],256],120545:[[982],256],120546:[[913],256],120547:[[914],256],120548:[[915],256],120549:[[916],256],120550:[[917],256],120551:[[918],256],120552:[[919],256],120553:[[920],256],120554:[[921],256],120555:[[922],256],120556:[[923],256],120557:[[924],256],120558:[[925],256],120559:[[926],256],120560:[[927],256],120561:[[928],256],120562:[[929],256],120563:[[1012],256],120564:[[931],256],120565:[[932],256],120566:[[933],256],120567:[[934],256],120568:[[935],256],120569:[[936],256],120570:[[937],256],120571:[[8711],256],120572:[[945],256],120573:[[946],256],120574:[[947],256],120575:[[948],256]},
                55040:{120576:[[949],256],120577:[[950],256],120578:[[951],256],120579:[[952],256],120580:[[953],256],120581:[[954],256],120582:[[955],256],120583:[[956],256],120584:[[957],256],120585:[[958],256],120586:[[959],256],120587:[[960],256],120588:[[961],256],120589:[[962],256],120590:[[963],256],120591:[[964],256],120592:[[965],256],120593:[[966],256],120594:[[967],256],120595:[[968],256],120596:[[969],256],120597:[[8706],256],120598:[[1013],256],120599:[[977],256],120600:[[1008],256],120601:[[981],256],120602:[[1009],256],120603:[[982],256],120604:[[913],256],120605:[[914],256],120606:[[915],256],120607:[[916],256],120608:[[917],256],120609:[[918],256],120610:[[919],256],120611:[[920],256],120612:[[921],256],120613:[[922],256],120614:[[923],256],120615:[[924],256],120616:[[925],256],120617:[[926],256],120618:[[927],256],120619:[[928],256],120620:[[929],256],120621:[[1012],256],120622:[[931],256],120623:[[932],256],120624:[[933],256],120625:[[934],256],120626:[[935],256],120627:[[936],256],120628:[[937],256],120629:[[8711],256],120630:[[945],256],120631:[[946],256],120632:[[947],256],120633:[[948],256],120634:[[949],256],120635:[[950],256],120636:[[951],256],120637:[[952],256],120638:[[953],256],120639:[[954],256],120640:[[955],256],120641:[[956],256],120642:[[957],256],120643:[[958],256],120644:[[959],256],120645:[[960],256],120646:[[961],256],120647:[[962],256],120648:[[963],256],120649:[[964],256],120650:[[965],256],120651:[[966],256],120652:[[967],256],120653:[[968],256],120654:[[969],256],120655:[[8706],256],120656:[[1013],256],120657:[[977],256],120658:[[1008],256],120659:[[981],256],120660:[[1009],256],120661:[[982],256],120662:[[913],256],120663:[[914],256],120664:[[915],256],120665:[[916],256],120666:[[917],256],120667:[[918],256],120668:[[919],256],120669:[[920],256],120670:[[921],256],120671:[[922],256],120672:[[923],256],120673:[[924],256],120674:[[925],256],120675:[[926],256],120676:[[927],256],120677:[[928],256],120678:[[929],256],120679:[[1012],256],120680:[[931],256],120681:[[932],256],120682:[[933],256],120683:[[934],256],120684:[[935],256],120685:[[936],256],120686:[[937],256],120687:[[8711],256],120688:[[945],256],120689:[[946],256],120690:[[947],256],120691:[[948],256],120692:[[949],256],120693:[[950],256],120694:[[951],256],120695:[[952],256],120696:[[953],256],120697:[[954],256],120698:[[955],256],120699:[[956],256],120700:[[957],256],120701:[[958],256],120702:[[959],256],120703:[[960],256],120704:[[961],256],120705:[[962],256],120706:[[963],256],120707:[[964],256],120708:[[965],256],120709:[[966],256],120710:[[967],256],120711:[[968],256],120712:[[969],256],120713:[[8706],256],120714:[[1013],256],120715:[[977],256],120716:[[1008],256],120717:[[981],256],120718:[[1009],256],120719:[[982],256],120720:[[913],256],120721:[[914],256],120722:[[915],256],120723:[[916],256],120724:[[917],256],120725:[[918],256],120726:[[919],256],120727:[[920],256],120728:[[921],256],120729:[[922],256],120730:[[923],256],120731:[[924],256],120732:[[925],256],120733:[[926],256],120734:[[927],256],120735:[[928],256],120736:[[929],256],120737:[[1012],256],120738:[[931],256],120739:[[932],256],120740:[[933],256],120741:[[934],256],120742:[[935],256],120743:[[936],256],120744:[[937],256],120745:[[8711],256],120746:[[945],256],120747:[[946],256],120748:[[947],256],120749:[[948],256],120750:[[949],256],120751:[[950],256],120752:[[951],256],120753:[[952],256],120754:[[953],256],120755:[[954],256],120756:[[955],256],120757:[[956],256],120758:[[957],256],120759:[[958],256],120760:[[959],256],120761:[[960],256],120762:[[961],256],120763:[[962],256],120764:[[963],256],120765:[[964],256],120766:[[965],256],120767:[[966],256],120768:[[967],256],120769:[[968],256],120770:[[969],256],120771:[[8706],256],120772:[[1013],256],120773:[[977],256],120774:[[1008],256],120775:[[981],256],120776:[[1009],256],120777:[[982],256],120778:[[988],256],120779:[[989],256],120782:[[48],256],120783:[[49],256],120784:[[50],256],120785:[[51],256],120786:[[52],256],120787:[[53],256],120788:[[54],256],120789:[[55],256],120790:[[56],256],120791:[[57],256],120792:[[48],256],120793:[[49],256],120794:[[50],256],120795:[[51],256],120796:[[52],256],120797:[[53],256],120798:[[54],256],120799:[[55],256],120800:[[56],256],120801:[[57],256],120802:[[48],256],120803:[[49],256],120804:[[50],256],120805:[[51],256],120806:[[52],256],120807:[[53],256],120808:[[54],256],120809:[[55],256],120810:[[56],256],120811:[[57],256],120812:[[48],256],120813:[[49],256],120814:[[50],256],120815:[[51],256],120816:[[52],256],120817:[[53],256],120818:[[54],256],120819:[[55],256],120820:[[56],256],120821:[[57],256],120822:[[48],256],120823:[[49],256],120824:[[50],256],120825:[[51],256],120826:[[52],256],120827:[[53],256],120828:[[54],256],120829:[[55],256],120830:[[56],256],120831:[[57],256]},
                59392:{125136:[,220],125137:[,220],125138:[,220],125139:[,220],125140:[,220],125141:[,220],125142:[,220]},
                60928:{126464:[[1575],256],126465:[[1576],256],126466:[[1580],256],126467:[[1583],256],126469:[[1608],256],126470:[[1586],256],126471:[[1581],256],126472:[[1591],256],126473:[[1610],256],126474:[[1603],256],126475:[[1604],256],126476:[[1605],256],126477:[[1606],256],126478:[[1587],256],126479:[[1593],256],126480:[[1601],256],126481:[[1589],256],126482:[[1602],256],126483:[[1585],256],126484:[[1588],256],126485:[[1578],256],126486:[[1579],256],126487:[[1582],256],126488:[[1584],256],126489:[[1590],256],126490:[[1592],256],126491:[[1594],256],126492:[[1646],256],126493:[[1722],256],126494:[[1697],256],126495:[[1647],256],126497:[[1576],256],126498:[[1580],256],126500:[[1607],256],126503:[[1581],256],126505:[[1610],256],126506:[[1603],256],126507:[[1604],256],126508:[[1605],256],126509:[[1606],256],126510:[[1587],256],126511:[[1593],256],126512:[[1601],256],126513:[[1589],256],126514:[[1602],256],126516:[[1588],256],126517:[[1578],256],126518:[[1579],256],126519:[[1582],256],126521:[[1590],256],126523:[[1594],256],126530:[[1580],256],126535:[[1581],256],126537:[[1610],256],126539:[[1604],256],126541:[[1606],256],126542:[[1587],256],126543:[[1593],256],126545:[[1589],256],126546:[[1602],256],126548:[[1588],256],126551:[[1582],256],126553:[[1590],256],126555:[[1594],256],126557:[[1722],256],126559:[[1647],256],126561:[[1576],256],126562:[[1580],256],126564:[[1607],256],126567:[[1581],256],126568:[[1591],256],126569:[[1610],256],126570:[[1603],256],126572:[[1605],256],126573:[[1606],256],126574:[[1587],256],126575:[[1593],256],126576:[[1601],256],126577:[[1589],256],126578:[[1602],256],126580:[[1588],256],126581:[[1578],256],126582:[[1579],256],126583:[[1582],256],126585:[[1590],256],126586:[[1592],256],126587:[[1594],256],126588:[[1646],256],126590:[[1697],256],126592:[[1575],256],126593:[[1576],256],126594:[[1580],256],126595:[[1583],256],126596:[[1607],256],126597:[[1608],256],126598:[[1586],256],126599:[[1581],256],126600:[[1591],256],126601:[[1610],256],126603:[[1604],256],126604:[[1605],256],126605:[[1606],256],126606:[[1587],256],126607:[[1593],256],126608:[[1601],256],126609:[[1589],256],126610:[[1602],256],126611:[[1585],256],126612:[[1588],256],126613:[[1578],256],126614:[[1579],256],126615:[[1582],256],126616:[[1584],256],126617:[[1590],256],126618:[[1592],256],126619:[[1594],256],126625:[[1576],256],126626:[[1580],256],126627:[[1583],256],126629:[[1608],256],126630:[[1586],256],126631:[[1581],256],126632:[[1591],256],126633:[[1610],256],126635:[[1604],256],126636:[[1605],256],126637:[[1606],256],126638:[[1587],256],126639:[[1593],256],126640:[[1601],256],126641:[[1589],256],126642:[[1602],256],126643:[[1585],256],126644:[[1588],256],126645:[[1578],256],126646:[[1579],256],126647:[[1582],256],126648:[[1584],256],126649:[[1590],256],126650:[[1592],256],126651:[[1594],256]},
                61696:{127232:[[48,46],256],127233:[[48,44],256],127234:[[49,44],256],127235:[[50,44],256],127236:[[51,44],256],127237:[[52,44],256],127238:[[53,44],256],127239:[[54,44],256],127240:[[55,44],256],127241:[[56,44],256],127242:[[57,44],256],127248:[[40,65,41],256],127249:[[40,66,41],256],127250:[[40,67,41],256],127251:[[40,68,41],256],127252:[[40,69,41],256],127253:[[40,70,41],256],127254:[[40,71,41],256],127255:[[40,72,41],256],127256:[[40,73,41],256],127257:[[40,74,41],256],127258:[[40,75,41],256],127259:[[40,76,41],256],127260:[[40,77,41],256],127261:[[40,78,41],256],127262:[[40,79,41],256],127263:[[40,80,41],256],127264:[[40,81,41],256],127265:[[40,82,41],256],127266:[[40,83,41],256],127267:[[40,84,41],256],127268:[[40,85,41],256],127269:[[40,86,41],256],127270:[[40,87,41],256],127271:[[40,88,41],256],127272:[[40,89,41],256],127273:[[40,90,41],256],127274:[[12308,83,12309],256],127275:[[67],256],127276:[[82],256],127277:[[67,68],256],127278:[[87,90],256],127280:[[65],256],127281:[[66],256],127282:[[67],256],127283:[[68],256],127284:[[69],256],127285:[[70],256],127286:[[71],256],127287:[[72],256],127288:[[73],256],127289:[[74],256],127290:[[75],256],127291:[[76],256],127292:[[77],256],127293:[[78],256],127294:[[79],256],127295:[[80],256],127296:[[81],256],127297:[[82],256],127298:[[83],256],127299:[[84],256],127300:[[85],256],127301:[[86],256],127302:[[87],256],127303:[[88],256],127304:[[89],256],127305:[[90],256],127306:[[72,86],256],127307:[[77,86],256],127308:[[83,68],256],127309:[[83,83],256],127310:[[80,80,86],256],127311:[[87,67],256],127338:[[77,67],256],127339:[[77,68],256],127376:[[68,74],256]},
                61952:{},
                63488:{194560:[[20029]],194561:[[20024]],194562:[[20033]],194563:[[131362]],194564:[[20320]],194565:[[20398]],194566:[[20411]],194567:[[20482]],194568:[[20602]],194569:[[20633]],194570:[[20711]],194571:[[20687]],194572:[[13470]],194573:[[132666]],194574:[[20813]],194575:[[20820]],194576:[[20836]],194577:[[20855]],194578:[[132380]],194579:[[13497]],194580:[[20839]],194581:[[20877]],194582:[[132427]],194583:[[20887]],194584:[[20900]],194585:[[20172]],194586:[[20908]],194587:[[20917]],194588:[[168415]],194589:[[20981]],194590:[[20995]],194591:[[13535]],194592:[[21051]],194593:[[21062]],194594:[[21106]],194595:[[21111]],194596:[[13589]],194597:[[21191]],194598:[[21193]],194599:[[21220]],194600:[[21242]],194601:[[21253]],194602:[[21254]],194603:[[21271]],194604:[[21321]],194605:[[21329]],194606:[[21338]],194607:[[21363]],194608:[[21373]],194609:[[21375]],194610:[[21375]],194611:[[21375]],194612:[[133676]],194613:[[28784]],194614:[[21450]],194615:[[21471]],194616:[[133987]],194617:[[21483]],194618:[[21489]],194619:[[21510]],194620:[[21662]],194621:[[21560]],194622:[[21576]],194623:[[21608]],194624:[[21666]],194625:[[21750]],194626:[[21776]],194627:[[21843]],194628:[[21859]],194629:[[21892]],194630:[[21892]],194631:[[21913]],194632:[[21931]],194633:[[21939]],194634:[[21954]],194635:[[22294]],194636:[[22022]],194637:[[22295]],194638:[[22097]],194639:[[22132]],194640:[[20999]],194641:[[22766]],194642:[[22478]],194643:[[22516]],194644:[[22541]],194645:[[22411]],194646:[[22578]],194647:[[22577]],194648:[[22700]],194649:[[136420]],194650:[[22770]],194651:[[22775]],194652:[[22790]],194653:[[22810]],194654:[[22818]],194655:[[22882]],194656:[[136872]],194657:[[136938]],194658:[[23020]],194659:[[23067]],194660:[[23079]],194661:[[23000]],194662:[[23142]],194663:[[14062]],194664:[[14076]],194665:[[23304]],194666:[[23358]],194667:[[23358]],194668:[[137672]],194669:[[23491]],194670:[[23512]],194671:[[23527]],194672:[[23539]],194673:[[138008]],194674:[[23551]],194675:[[23558]],194676:[[24403]],194677:[[23586]],194678:[[14209]],194679:[[23648]],194680:[[23662]],194681:[[23744]],194682:[[23693]],194683:[[138724]],194684:[[23875]],194685:[[138726]],194686:[[23918]],194687:[[23915]],194688:[[23932]],194689:[[24033]],194690:[[24034]],194691:[[14383]],194692:[[24061]],194693:[[24104]],194694:[[24125]],194695:[[24169]],194696:[[14434]],194697:[[139651]],194698:[[14460]],194699:[[24240]],194700:[[24243]],194701:[[24246]],194702:[[24266]],194703:[[172946]],194704:[[24318]],194705:[[140081]],194706:[[140081]],194707:[[33281]],194708:[[24354]],194709:[[24354]],194710:[[14535]],194711:[[144056]],194712:[[156122]],194713:[[24418]],194714:[[24427]],194715:[[14563]],194716:[[24474]],194717:[[24525]],194718:[[24535]],194719:[[24569]],194720:[[24705]],194721:[[14650]],194722:[[14620]],194723:[[24724]],194724:[[141012]],194725:[[24775]],194726:[[24904]],194727:[[24908]],194728:[[24910]],194729:[[24908]],194730:[[24954]],194731:[[24974]],194732:[[25010]],194733:[[24996]],194734:[[25007]],194735:[[25054]],194736:[[25074]],194737:[[25078]],194738:[[25104]],194739:[[25115]],194740:[[25181]],194741:[[25265]],194742:[[25300]],194743:[[25424]],194744:[[142092]],194745:[[25405]],194746:[[25340]],194747:[[25448]],194748:[[25475]],194749:[[25572]],194750:[[142321]],194751:[[25634]],194752:[[25541]],194753:[[25513]],194754:[[14894]],194755:[[25705]],194756:[[25726]],194757:[[25757]],194758:[[25719]],194759:[[14956]],194760:[[25935]],194761:[[25964]],194762:[[143370]],194763:[[26083]],194764:[[26360]],194765:[[26185]],194766:[[15129]],194767:[[26257]],194768:[[15112]],194769:[[15076]],194770:[[20882]],194771:[[20885]],194772:[[26368]],194773:[[26268]],194774:[[32941]],194775:[[17369]],194776:[[26391]],194777:[[26395]],194778:[[26401]],194779:[[26462]],194780:[[26451]],194781:[[144323]],194782:[[15177]],194783:[[26618]],194784:[[26501]],194785:[[26706]],194786:[[26757]],194787:[[144493]],194788:[[26766]],194789:[[26655]],194790:[[26900]],194791:[[15261]],194792:[[26946]],194793:[[27043]],194794:[[27114]],194795:[[27304]],194796:[[145059]],194797:[[27355]],194798:[[15384]],194799:[[27425]],194800:[[145575]],194801:[[27476]],194802:[[15438]],194803:[[27506]],194804:[[27551]],194805:[[27578]],194806:[[27579]],194807:[[146061]],194808:[[138507]],194809:[[146170]],194810:[[27726]],194811:[[146620]],194812:[[27839]],194813:[[27853]],194814:[[27751]],194815:[[27926]]},
                63744:{63744:[[35912]],63745:[[26356]],63746:[[36554]],63747:[[36040]],63748:[[28369]],63749:[[20018]],63750:[[21477]],63751:[[40860]],63752:[[40860]],63753:[[22865]],63754:[[37329]],63755:[[21895]],63756:[[22856]],63757:[[25078]],63758:[[30313]],63759:[[32645]],63760:[[34367]],63761:[[34746]],63762:[[35064]],63763:[[37007]],63764:[[27138]],63765:[[27931]],63766:[[28889]],63767:[[29662]],63768:[[33853]],63769:[[37226]],63770:[[39409]],63771:[[20098]],63772:[[21365]],63773:[[27396]],63774:[[29211]],63775:[[34349]],63776:[[40478]],63777:[[23888]],63778:[[28651]],63779:[[34253]],63780:[[35172]],63781:[[25289]],63782:[[33240]],63783:[[34847]],63784:[[24266]],63785:[[26391]],63786:[[28010]],63787:[[29436]],63788:[[37070]],63789:[[20358]],63790:[[20919]],63791:[[21214]],63792:[[25796]],63793:[[27347]],63794:[[29200]],63795:[[30439]],63796:[[32769]],63797:[[34310]],63798:[[34396]],63799:[[36335]],63800:[[38706]],63801:[[39791]],63802:[[40442]],63803:[[30860]],63804:[[31103]],63805:[[32160]],63806:[[33737]],63807:[[37636]],63808:[[40575]],63809:[[35542]],63810:[[22751]],63811:[[24324]],63812:[[31840]],63813:[[32894]],63814:[[29282]],63815:[[30922]],63816:[[36034]],63817:[[38647]],63818:[[22744]],63819:[[23650]],63820:[[27155]],63821:[[28122]],63822:[[28431]],63823:[[32047]],63824:[[32311]],63825:[[38475]],63826:[[21202]],63827:[[32907]],63828:[[20956]],63829:[[20940]],63830:[[31260]],63831:[[32190]],63832:[[33777]],63833:[[38517]],63834:[[35712]],63835:[[25295]],63836:[[27138]],63837:[[35582]],63838:[[20025]],63839:[[23527]],63840:[[24594]],63841:[[29575]],63842:[[30064]],63843:[[21271]],63844:[[30971]],63845:[[20415]],63846:[[24489]],63847:[[19981]],63848:[[27852]],63849:[[25976]],63850:[[32034]],63851:[[21443]],63852:[[22622]],63853:[[30465]],63854:[[33865]],63855:[[35498]],63856:[[27578]],63857:[[36784]],63858:[[27784]],63859:[[25342]],63860:[[33509]],63861:[[25504]],63862:[[30053]],63863:[[20142]],63864:[[20841]],63865:[[20937]],63866:[[26753]],63867:[[31975]],63868:[[33391]],63869:[[35538]],63870:[[37327]],63871:[[21237]],63872:[[21570]],63873:[[22899]],63874:[[24300]],63875:[[26053]],63876:[[28670]],63877:[[31018]],63878:[[38317]],63879:[[39530]],63880:[[40599]],63881:[[40654]],63882:[[21147]],63883:[[26310]],63884:[[27511]],63885:[[36706]],63886:[[24180]],63887:[[24976]],63888:[[25088]],63889:[[25754]],63890:[[28451]],63891:[[29001]],63892:[[29833]],63893:[[31178]],63894:[[32244]],63895:[[32879]],63896:[[36646]],63897:[[34030]],63898:[[36899]],63899:[[37706]],63900:[[21015]],63901:[[21155]],63902:[[21693]],63903:[[28872]],63904:[[35010]],63905:[[35498]],63906:[[24265]],63907:[[24565]],63908:[[25467]],63909:[[27566]],63910:[[31806]],63911:[[29557]],63912:[[20196]],63913:[[22265]],63914:[[23527]],63915:[[23994]],63916:[[24604]],63917:[[29618]],63918:[[29801]],63919:[[32666]],63920:[[32838]],63921:[[37428]],63922:[[38646]],63923:[[38728]],63924:[[38936]],63925:[[20363]],63926:[[31150]],63927:[[37300]],63928:[[38584]],63929:[[24801]],63930:[[20102]],63931:[[20698]],63932:[[23534]],63933:[[23615]],63934:[[26009]],63935:[[27138]],63936:[[29134]],63937:[[30274]],63938:[[34044]],63939:[[36988]],63940:[[40845]],63941:[[26248]],63942:[[38446]],63943:[[21129]],63944:[[26491]],63945:[[26611]],63946:[[27969]],63947:[[28316]],63948:[[29705]],63949:[[30041]],63950:[[30827]],63951:[[32016]],63952:[[39006]],63953:[[20845]],63954:[[25134]],63955:[[38520]],63956:[[20523]],63957:[[23833]],63958:[[28138]],63959:[[36650]],63960:[[24459]],63961:[[24900]],63962:[[26647]],63963:[[29575]],63964:[[38534]],63965:[[21033]],63966:[[21519]],63967:[[23653]],63968:[[26131]],63969:[[26446]],63970:[[26792]],63971:[[27877]],63972:[[29702]],63973:[[30178]],63974:[[32633]],63975:[[35023]],63976:[[35041]],63977:[[37324]],63978:[[38626]],63979:[[21311]],63980:[[28346]],63981:[[21533]],63982:[[29136]],63983:[[29848]],63984:[[34298]],63985:[[38563]],63986:[[40023]],63987:[[40607]],63988:[[26519]],63989:[[28107]],63990:[[33256]],63991:[[31435]],63992:[[31520]],63993:[[31890]],63994:[[29376]],63995:[[28825]],63996:[[35672]],63997:[[20160]],63998:[[33590]],63999:[[21050]],194816:[[27966]],194817:[[28023]],194818:[[27969]],194819:[[28009]],194820:[[28024]],194821:[[28037]],194822:[[146718]],194823:[[27956]],194824:[[28207]],194825:[[28270]],194826:[[15667]],194827:[[28363]],194828:[[28359]],194829:[[147153]],194830:[[28153]],194831:[[28526]],194832:[[147294]],194833:[[147342]],194834:[[28614]],194835:[[28729]],194836:[[28702]],194837:[[28699]],194838:[[15766]],194839:[[28746]],194840:[[28797]],194841:[[28791]],194842:[[28845]],194843:[[132389]],194844:[[28997]],194845:[[148067]],194846:[[29084]],194847:[[148395]],194848:[[29224]],194849:[[29237]],194850:[[29264]],194851:[[149000]],194852:[[29312]],194853:[[29333]],194854:[[149301]],194855:[[149524]],194856:[[29562]],194857:[[29579]],194858:[[16044]],194859:[[29605]],194860:[[16056]],194861:[[16056]],194862:[[29767]],194863:[[29788]],194864:[[29809]],194865:[[29829]],194866:[[29898]],194867:[[16155]],194868:[[29988]],194869:[[150582]],194870:[[30014]],194871:[[150674]],194872:[[30064]],194873:[[139679]],194874:[[30224]],194875:[[151457]],194876:[[151480]],194877:[[151620]],194878:[[16380]],194879:[[16392]],194880:[[30452]],194881:[[151795]],194882:[[151794]],194883:[[151833]],194884:[[151859]],194885:[[30494]],194886:[[30495]],194887:[[30495]],194888:[[30538]],194889:[[16441]],194890:[[30603]],194891:[[16454]],194892:[[16534]],194893:[[152605]],194894:[[30798]],194895:[[30860]],194896:[[30924]],194897:[[16611]],194898:[[153126]],194899:[[31062]],194900:[[153242]],194901:[[153285]],194902:[[31119]],194903:[[31211]],194904:[[16687]],194905:[[31296]],194906:[[31306]],194907:[[31311]],194908:[[153980]],194909:[[154279]],194910:[[154279]],194911:[[31470]],194912:[[16898]],194913:[[154539]],194914:[[31686]],194915:[[31689]],194916:[[16935]],194917:[[154752]],194918:[[31954]],194919:[[17056]],194920:[[31976]],194921:[[31971]],194922:[[32000]],194923:[[155526]],194924:[[32099]],194925:[[17153]],194926:[[32199]],194927:[[32258]],194928:[[32325]],194929:[[17204]],194930:[[156200]],194931:[[156231]],194932:[[17241]],194933:[[156377]],194934:[[32634]],194935:[[156478]],194936:[[32661]],194937:[[32762]],194938:[[32773]],194939:[[156890]],194940:[[156963]],194941:[[32864]],194942:[[157096]],194943:[[32880]],194944:[[144223]],194945:[[17365]],194946:[[32946]],194947:[[33027]],194948:[[17419]],194949:[[33086]],194950:[[23221]],194951:[[157607]],194952:[[157621]],194953:[[144275]],194954:[[144284]],194955:[[33281]],194956:[[33284]],194957:[[36766]],194958:[[17515]],194959:[[33425]],194960:[[33419]],194961:[[33437]],194962:[[21171]],194963:[[33457]],194964:[[33459]],194965:[[33469]],194966:[[33510]],194967:[[158524]],194968:[[33509]],194969:[[33565]],194970:[[33635]],194971:[[33709]],194972:[[33571]],194973:[[33725]],194974:[[33767]],194975:[[33879]],194976:[[33619]],194977:[[33738]],194978:[[33740]],194979:[[33756]],194980:[[158774]],194981:[[159083]],194982:[[158933]],194983:[[17707]],194984:[[34033]],194985:[[34035]],194986:[[34070]],194987:[[160714]],194988:[[34148]],194989:[[159532]],194990:[[17757]],194991:[[17761]],194992:[[159665]],194993:[[159954]],194994:[[17771]],194995:[[34384]],194996:[[34396]],194997:[[34407]],194998:[[34409]],194999:[[34473]],195000:[[34440]],195001:[[34574]],195002:[[34530]],195003:[[34681]],195004:[[34600]],195005:[[34667]],195006:[[34694]],195007:[[17879]],195008:[[34785]],195009:[[34817]],195010:[[17913]],195011:[[34912]],195012:[[34915]],195013:[[161383]],195014:[[35031]],195015:[[35038]],195016:[[17973]],195017:[[35066]],195018:[[13499]],195019:[[161966]],195020:[[162150]],195021:[[18110]],195022:[[18119]],195023:[[35488]],195024:[[35565]],195025:[[35722]],195026:[[35925]],195027:[[162984]],195028:[[36011]],195029:[[36033]],195030:[[36123]],195031:[[36215]],195032:[[163631]],195033:[[133124]],195034:[[36299]],195035:[[36284]],195036:[[36336]],195037:[[133342]],195038:[[36564]],195039:[[36664]],195040:[[165330]],195041:[[165357]],195042:[[37012]],195043:[[37105]],195044:[[37137]],195045:[[165678]],195046:[[37147]],195047:[[37432]],195048:[[37591]],195049:[[37592]],195050:[[37500]],195051:[[37881]],195052:[[37909]],195053:[[166906]],195054:[[38283]],195055:[[18837]],195056:[[38327]],195057:[[167287]],195058:[[18918]],195059:[[38595]],195060:[[23986]],195061:[[38691]],195062:[[168261]],195063:[[168474]],195064:[[19054]],195065:[[19062]],195066:[[38880]],195067:[[168970]],195068:[[19122]],195069:[[169110]],195070:[[38923]],195071:[[38923]]},
                64000:{64000:[[20999]],64001:[[24230]],64002:[[25299]],64003:[[31958]],64004:[[23429]],64005:[[27934]],64006:[[26292]],64007:[[36667]],64008:[[34892]],64009:[[38477]],64010:[[35211]],64011:[[24275]],64012:[[20800]],64013:[[21952]],64016:[[22618]],64018:[[26228]],64021:[[20958]],64022:[[29482]],64023:[[30410]],64024:[[31036]],64025:[[31070]],64026:[[31077]],64027:[[31119]],64028:[[38742]],64029:[[31934]],64030:[[32701]],64032:[[34322]],64034:[[35576]],64037:[[36920]],64038:[[37117]],64042:[[39151]],64043:[[39164]],64044:[[39208]],64045:[[40372]],64046:[[37086]],64047:[[38583]],64048:[[20398]],64049:[[20711]],64050:[[20813]],64051:[[21193]],64052:[[21220]],64053:[[21329]],64054:[[21917]],64055:[[22022]],64056:[[22120]],64057:[[22592]],64058:[[22696]],64059:[[23652]],64060:[[23662]],64061:[[24724]],64062:[[24936]],64063:[[24974]],64064:[[25074]],64065:[[25935]],64066:[[26082]],64067:[[26257]],64068:[[26757]],64069:[[28023]],64070:[[28186]],64071:[[28450]],64072:[[29038]],64073:[[29227]],64074:[[29730]],64075:[[30865]],64076:[[31038]],64077:[[31049]],64078:[[31048]],64079:[[31056]],64080:[[31062]],64081:[[31069]],64082:[[31117]],64083:[[31118]],64084:[[31296]],64085:[[31361]],64086:[[31680]],64087:[[32244]],64088:[[32265]],64089:[[32321]],64090:[[32626]],64091:[[32773]],64092:[[33261]],64093:[[33401]],64094:[[33401]],64095:[[33879]],64096:[[35088]],64097:[[35222]],64098:[[35585]],64099:[[35641]],64100:[[36051]],64101:[[36104]],64102:[[36790]],64103:[[36920]],64104:[[38627]],64105:[[38911]],64106:[[38971]],64107:[[24693]],64108:[[148206]],64109:[[33304]],64112:[[20006]],64113:[[20917]],64114:[[20840]],64115:[[20352]],64116:[[20805]],64117:[[20864]],64118:[[21191]],64119:[[21242]],64120:[[21917]],64121:[[21845]],64122:[[21913]],64123:[[21986]],64124:[[22618]],64125:[[22707]],64126:[[22852]],64127:[[22868]],64128:[[23138]],64129:[[23336]],64130:[[24274]],64131:[[24281]],64132:[[24425]],64133:[[24493]],64134:[[24792]],64135:[[24910]],64136:[[24840]],64137:[[24974]],64138:[[24928]],64139:[[25074]],64140:[[25140]],64141:[[25540]],64142:[[25628]],64143:[[25682]],64144:[[25942]],64145:[[26228]],64146:[[26391]],64147:[[26395]],64148:[[26454]],64149:[[27513]],64150:[[27578]],64151:[[27969]],64152:[[28379]],64153:[[28363]],64154:[[28450]],64155:[[28702]],64156:[[29038]],64157:[[30631]],64158:[[29237]],64159:[[29359]],64160:[[29482]],64161:[[29809]],64162:[[29958]],64163:[[30011]],64164:[[30237]],64165:[[30239]],64166:[[30410]],64167:[[30427]],64168:[[30452]],64169:[[30538]],64170:[[30528]],64171:[[30924]],64172:[[31409]],64173:[[31680]],64174:[[31867]],64175:[[32091]],64176:[[32244]],64177:[[32574]],64178:[[32773]],64179:[[33618]],64180:[[33775]],64181:[[34681]],64182:[[35137]],64183:[[35206]],64184:[[35222]],64185:[[35519]],64186:[[35576]],64187:[[35531]],64188:[[35585]],64189:[[35582]],64190:[[35565]],64191:[[35641]],64192:[[35722]],64193:[[36104]],64194:[[36664]],64195:[[36978]],64196:[[37273]],64197:[[37494]],64198:[[38524]],64199:[[38627]],64200:[[38742]],64201:[[38875]],64202:[[38911]],64203:[[38923]],64204:[[38971]],64205:[[39698]],64206:[[40860]],64207:[[141386]],64208:[[141380]],64209:[[144341]],64210:[[15261]],64211:[[16408]],64212:[[16441]],64213:[[152137]],64214:[[154832]],64215:[[163539]],64216:[[40771]],64217:[[40846]],195072:[[38953]],195073:[[169398]],195074:[[39138]],195075:[[19251]],195076:[[39209]],195077:[[39335]],195078:[[39362]],195079:[[39422]],195080:[[19406]],195081:[[170800]],195082:[[39698]],195083:[[40000]],195084:[[40189]],195085:[[19662]],195086:[[19693]],195087:[[40295]],195088:[[172238]],195089:[[19704]],195090:[[172293]],195091:[[172558]],195092:[[172689]],195093:[[40635]],195094:[[19798]],195095:[[40697]],195096:[[40702]],195097:[[40709]],195098:[[40719]],195099:[[40726]],195100:[[40763]],195101:[[173568]]},
                64256:{64256:[[102,102],256],64257:[[102,105],256],64258:[[102,108],256],64259:[[102,102,105],256],64260:[[102,102,108],256],64261:[[383,116],256],64262:[[115,116],256],64275:[[1396,1398],256],64276:[[1396,1381],256],64277:[[1396,1387],256],64278:[[1406,1398],256],64279:[[1396,1389],256],64285:[[1497,1460],512],64286:[,26],64287:[[1522,1463],512],64288:[[1506],256],64289:[[1488],256],64290:[[1491],256],64291:[[1492],256],64292:[[1499],256],64293:[[1500],256],64294:[[1501],256],64295:[[1512],256],64296:[[1514],256],64297:[[43],256],64298:[[1513,1473],512],64299:[[1513,1474],512],64300:[[64329,1473],512],64301:[[64329,1474],512],64302:[[1488,1463],512],64303:[[1488,1464],512],64304:[[1488,1468],512],64305:[[1489,1468],512],64306:[[1490,1468],512],64307:[[1491,1468],512],64308:[[1492,1468],512],64309:[[1493,1468],512],64310:[[1494,1468],512],64312:[[1496,1468],512],64313:[[1497,1468],512],64314:[[1498,1468],512],64315:[[1499,1468],512],64316:[[1500,1468],512],64318:[[1502,1468],512],64320:[[1504,1468],512],64321:[[1505,1468],512],64323:[[1507,1468],512],64324:[[1508,1468],512],64326:[[1510,1468],512],64327:[[1511,1468],512],64328:[[1512,1468],512],64329:[[1513,1468],512],64330:[[1514,1468],512],64331:[[1493,1465],512],64332:[[1489,1471],512],64333:[[1499,1471],512],64334:[[1508,1471],512],64335:[[1488,1500],256],64336:[[1649],256],64337:[[1649],256],64338:[[1659],256],64339:[[1659],256],64340:[[1659],256],64341:[[1659],256],64342:[[1662],256],64343:[[1662],256],64344:[[1662],256],64345:[[1662],256],64346:[[1664],256],64347:[[1664],256],64348:[[1664],256],64349:[[1664],256],64350:[[1658],256],64351:[[1658],256],64352:[[1658],256],64353:[[1658],256],64354:[[1663],256],64355:[[1663],256],64356:[[1663],256],64357:[[1663],256],64358:[[1657],256],64359:[[1657],256],64360:[[1657],256],64361:[[1657],256],64362:[[1700],256],64363:[[1700],256],64364:[[1700],256],64365:[[1700],256],64366:[[1702],256],64367:[[1702],256],64368:[[1702],256],64369:[[1702],256],64370:[[1668],256],64371:[[1668],256],64372:[[1668],256],64373:[[1668],256],64374:[[1667],256],64375:[[1667],256],64376:[[1667],256],64377:[[1667],256],64378:[[1670],256],64379:[[1670],256],64380:[[1670],256],64381:[[1670],256],64382:[[1671],256],64383:[[1671],256],64384:[[1671],256],64385:[[1671],256],64386:[[1677],256],64387:[[1677],256],64388:[[1676],256],64389:[[1676],256],64390:[[1678],256],64391:[[1678],256],64392:[[1672],256],64393:[[1672],256],64394:[[1688],256],64395:[[1688],256],64396:[[1681],256],64397:[[1681],256],64398:[[1705],256],64399:[[1705],256],64400:[[1705],256],64401:[[1705],256],64402:[[1711],256],64403:[[1711],256],64404:[[1711],256],64405:[[1711],256],64406:[[1715],256],64407:[[1715],256],64408:[[1715],256],64409:[[1715],256],64410:[[1713],256],64411:[[1713],256],64412:[[1713],256],64413:[[1713],256],64414:[[1722],256],64415:[[1722],256],64416:[[1723],256],64417:[[1723],256],64418:[[1723],256],64419:[[1723],256],64420:[[1728],256],64421:[[1728],256],64422:[[1729],256],64423:[[1729],256],64424:[[1729],256],64425:[[1729],256],64426:[[1726],256],64427:[[1726],256],64428:[[1726],256],64429:[[1726],256],64430:[[1746],256],64431:[[1746],256],64432:[[1747],256],64433:[[1747],256],64467:[[1709],256],64468:[[1709],256],64469:[[1709],256],64470:[[1709],256],64471:[[1735],256],64472:[[1735],256],64473:[[1734],256],64474:[[1734],256],64475:[[1736],256],64476:[[1736],256],64477:[[1655],256],64478:[[1739],256],64479:[[1739],256],64480:[[1733],256],64481:[[1733],256],64482:[[1737],256],64483:[[1737],256],64484:[[1744],256],64485:[[1744],256],64486:[[1744],256],64487:[[1744],256],64488:[[1609],256],64489:[[1609],256],64490:[[1574,1575],256],64491:[[1574,1575],256],64492:[[1574,1749],256],64493:[[1574,1749],256],64494:[[1574,1608],256],64495:[[1574,1608],256],64496:[[1574,1735],256],64497:[[1574,1735],256],64498:[[1574,1734],256],64499:[[1574,1734],256],64500:[[1574,1736],256],64501:[[1574,1736],256],64502:[[1574,1744],256],64503:[[1574,1744],256],64504:[[1574,1744],256],64505:[[1574,1609],256],64506:[[1574,1609],256],64507:[[1574,1609],256],64508:[[1740],256],64509:[[1740],256],64510:[[1740],256],64511:[[1740],256]},
                64512:{64512:[[1574,1580],256],64513:[[1574,1581],256],64514:[[1574,1605],256],64515:[[1574,1609],256],64516:[[1574,1610],256],64517:[[1576,1580],256],64518:[[1576,1581],256],64519:[[1576,1582],256],64520:[[1576,1605],256],64521:[[1576,1609],256],64522:[[1576,1610],256],64523:[[1578,1580],256],64524:[[1578,1581],256],64525:[[1578,1582],256],64526:[[1578,1605],256],64527:[[1578,1609],256],64528:[[1578,1610],256],64529:[[1579,1580],256],64530:[[1579,1605],256],64531:[[1579,1609],256],64532:[[1579,1610],256],64533:[[1580,1581],256],64534:[[1580,1605],256],64535:[[1581,1580],256],64536:[[1581,1605],256],64537:[[1582,1580],256],64538:[[1582,1581],256],64539:[[1582,1605],256],64540:[[1587,1580],256],64541:[[1587,1581],256],64542:[[1587,1582],256],64543:[[1587,1605],256],64544:[[1589,1581],256],64545:[[1589,1605],256],64546:[[1590,1580],256],64547:[[1590,1581],256],64548:[[1590,1582],256],64549:[[1590,1605],256],64550:[[1591,1581],256],64551:[[1591,1605],256],64552:[[1592,1605],256],64553:[[1593,1580],256],64554:[[1593,1605],256],64555:[[1594,1580],256],64556:[[1594,1605],256],64557:[[1601,1580],256],64558:[[1601,1581],256],64559:[[1601,1582],256],64560:[[1601,1605],256],64561:[[1601,1609],256],64562:[[1601,1610],256],64563:[[1602,1581],256],64564:[[1602,1605],256],64565:[[1602,1609],256],64566:[[1602,1610],256],64567:[[1603,1575],256],64568:[[1603,1580],256],64569:[[1603,1581],256],64570:[[1603,1582],256],64571:[[1603,1604],256],64572:[[1603,1605],256],64573:[[1603,1609],256],64574:[[1603,1610],256],64575:[[1604,1580],256],64576:[[1604,1581],256],64577:[[1604,1582],256],64578:[[1604,1605],256],64579:[[1604,1609],256],64580:[[1604,1610],256],64581:[[1605,1580],256],64582:[[1605,1581],256],64583:[[1605,1582],256],64584:[[1605,1605],256],64585:[[1605,1609],256],64586:[[1605,1610],256],64587:[[1606,1580],256],64588:[[1606,1581],256],64589:[[1606,1582],256],64590:[[1606,1605],256],64591:[[1606,1609],256],64592:[[1606,1610],256],64593:[[1607,1580],256],64594:[[1607,1605],256],64595:[[1607,1609],256],64596:[[1607,1610],256],64597:[[1610,1580],256],64598:[[1610,1581],256],64599:[[1610,1582],256],64600:[[1610,1605],256],64601:[[1610,1609],256],64602:[[1610,1610],256],64603:[[1584,1648],256],64604:[[1585,1648],256],64605:[[1609,1648],256],64606:[[32,1612,1617],256],64607:[[32,1613,1617],256],64608:[[32,1614,1617],256],64609:[[32,1615,1617],256],64610:[[32,1616,1617],256],64611:[[32,1617,1648],256],64612:[[1574,1585],256],64613:[[1574,1586],256],64614:[[1574,1605],256],64615:[[1574,1606],256],64616:[[1574,1609],256],64617:[[1574,1610],256],64618:[[1576,1585],256],64619:[[1576,1586],256],64620:[[1576,1605],256],64621:[[1576,1606],256],64622:[[1576,1609],256],64623:[[1576,1610],256],64624:[[1578,1585],256],64625:[[1578,1586],256],64626:[[1578,1605],256],64627:[[1578,1606],256],64628:[[1578,1609],256],64629:[[1578,1610],256],64630:[[1579,1585],256],64631:[[1579,1586],256],64632:[[1579,1605],256],64633:[[1579,1606],256],64634:[[1579,1609],256],64635:[[1579,1610],256],64636:[[1601,1609],256],64637:[[1601,1610],256],64638:[[1602,1609],256],64639:[[1602,1610],256],64640:[[1603,1575],256],64641:[[1603,1604],256],64642:[[1603,1605],256],64643:[[1603,1609],256],64644:[[1603,1610],256],64645:[[1604,1605],256],64646:[[1604,1609],256],64647:[[1604,1610],256],64648:[[1605,1575],256],64649:[[1605,1605],256],64650:[[1606,1585],256],64651:[[1606,1586],256],64652:[[1606,1605],256],64653:[[1606,1606],256],64654:[[1606,1609],256],64655:[[1606,1610],256],64656:[[1609,1648],256],64657:[[1610,1585],256],64658:[[1610,1586],256],64659:[[1610,1605],256],64660:[[1610,1606],256],64661:[[1610,1609],256],64662:[[1610,1610],256],64663:[[1574,1580],256],64664:[[1574,1581],256],64665:[[1574,1582],256],64666:[[1574,1605],256],64667:[[1574,1607],256],64668:[[1576,1580],256],64669:[[1576,1581],256],64670:[[1576,1582],256],64671:[[1576,1605],256],64672:[[1576,1607],256],64673:[[1578,1580],256],64674:[[1578,1581],256],64675:[[1578,1582],256],64676:[[1578,1605],256],64677:[[1578,1607],256],64678:[[1579,1605],256],64679:[[1580,1581],256],64680:[[1580,1605],256],64681:[[1581,1580],256],64682:[[1581,1605],256],64683:[[1582,1580],256],64684:[[1582,1605],256],64685:[[1587,1580],256],64686:[[1587,1581],256],64687:[[1587,1582],256],64688:[[1587,1605],256],64689:[[1589,1581],256],64690:[[1589,1582],256],64691:[[1589,1605],256],64692:[[1590,1580],256],64693:[[1590,1581],256],64694:[[1590,1582],256],64695:[[1590,1605],256],64696:[[1591,1581],256],64697:[[1592,1605],256],64698:[[1593,1580],256],64699:[[1593,1605],256],64700:[[1594,1580],256],64701:[[1594,1605],256],64702:[[1601,1580],256],64703:[[1601,1581],256],64704:[[1601,1582],256],64705:[[1601,1605],256],64706:[[1602,1581],256],64707:[[1602,1605],256],64708:[[1603,1580],256],64709:[[1603,1581],256],64710:[[1603,1582],256],64711:[[1603,1604],256],64712:[[1603,1605],256],64713:[[1604,1580],256],64714:[[1604,1581],256],64715:[[1604,1582],256],64716:[[1604,1605],256],64717:[[1604,1607],256],64718:[[1605,1580],256],64719:[[1605,1581],256],64720:[[1605,1582],256],64721:[[1605,1605],256],64722:[[1606,1580],256],64723:[[1606,1581],256],64724:[[1606,1582],256],64725:[[1606,1605],256],64726:[[1606,1607],256],64727:[[1607,1580],256],64728:[[1607,1605],256],64729:[[1607,1648],256],64730:[[1610,1580],256],64731:[[1610,1581],256],64732:[[1610,1582],256],64733:[[1610,1605],256],64734:[[1610,1607],256],64735:[[1574,1605],256],64736:[[1574,1607],256],64737:[[1576,1605],256],64738:[[1576,1607],256],64739:[[1578,1605],256],64740:[[1578,1607],256],64741:[[1579,1605],256],64742:[[1579,1607],256],64743:[[1587,1605],256],64744:[[1587,1607],256],64745:[[1588,1605],256],64746:[[1588,1607],256],64747:[[1603,1604],256],64748:[[1603,1605],256],64749:[[1604,1605],256],64750:[[1606,1605],256],64751:[[1606,1607],256],64752:[[1610,1605],256],64753:[[1610,1607],256],64754:[[1600,1614,1617],256],64755:[[1600,1615,1617],256],64756:[[1600,1616,1617],256],64757:[[1591,1609],256],64758:[[1591,1610],256],64759:[[1593,1609],256],64760:[[1593,1610],256],64761:[[1594,1609],256],64762:[[1594,1610],256],64763:[[1587,1609],256],64764:[[1587,1610],256],64765:[[1588,1609],256],64766:[[1588,1610],256],64767:[[1581,1609],256]},
                64768:{64768:[[1581,1610],256],64769:[[1580,1609],256],64770:[[1580,1610],256],64771:[[1582,1609],256],64772:[[1582,1610],256],64773:[[1589,1609],256],64774:[[1589,1610],256],64775:[[1590,1609],256],64776:[[1590,1610],256],64777:[[1588,1580],256],64778:[[1588,1581],256],64779:[[1588,1582],256],64780:[[1588,1605],256],64781:[[1588,1585],256],64782:[[1587,1585],256],64783:[[1589,1585],256],64784:[[1590,1585],256],64785:[[1591,1609],256],64786:[[1591,1610],256],64787:[[1593,1609],256],64788:[[1593,1610],256],64789:[[1594,1609],256],64790:[[1594,1610],256],64791:[[1587,1609],256],64792:[[1587,1610],256],64793:[[1588,1609],256],64794:[[1588,1610],256],64795:[[1581,1609],256],64796:[[1581,1610],256],64797:[[1580,1609],256],64798:[[1580,1610],256],64799:[[1582,1609],256],64800:[[1582,1610],256],64801:[[1589,1609],256],64802:[[1589,1610],256],64803:[[1590,1609],256],64804:[[1590,1610],256],64805:[[1588,1580],256],64806:[[1588,1581],256],64807:[[1588,1582],256],64808:[[1588,1605],256],64809:[[1588,1585],256],64810:[[1587,1585],256],64811:[[1589,1585],256],64812:[[1590,1585],256],64813:[[1588,1580],256],64814:[[1588,1581],256],64815:[[1588,1582],256],64816:[[1588,1605],256],64817:[[1587,1607],256],64818:[[1588,1607],256],64819:[[1591,1605],256],64820:[[1587,1580],256],64821:[[1587,1581],256],64822:[[1587,1582],256],64823:[[1588,1580],256],64824:[[1588,1581],256],64825:[[1588,1582],256],64826:[[1591,1605],256],64827:[[1592,1605],256],64828:[[1575,1611],256],64829:[[1575,1611],256],64848:[[1578,1580,1605],256],64849:[[1578,1581,1580],256],64850:[[1578,1581,1580],256],64851:[[1578,1581,1605],256],64852:[[1578,1582,1605],256],64853:[[1578,1605,1580],256],64854:[[1578,1605,1581],256],64855:[[1578,1605,1582],256],64856:[[1580,1605,1581],256],64857:[[1580,1605,1581],256],64858:[[1581,1605,1610],256],64859:[[1581,1605,1609],256],64860:[[1587,1581,1580],256],64861:[[1587,1580,1581],256],64862:[[1587,1580,1609],256],64863:[[1587,1605,1581],256],64864:[[1587,1605,1581],256],64865:[[1587,1605,1580],256],64866:[[1587,1605,1605],256],64867:[[1587,1605,1605],256],64868:[[1589,1581,1581],256],64869:[[1589,1581,1581],256],64870:[[1589,1605,1605],256],64871:[[1588,1581,1605],256],64872:[[1588,1581,1605],256],64873:[[1588,1580,1610],256],64874:[[1588,1605,1582],256],64875:[[1588,1605,1582],256],64876:[[1588,1605,1605],256],64877:[[1588,1605,1605],256],64878:[[1590,1581,1609],256],64879:[[1590,1582,1605],256],64880:[[1590,1582,1605],256],64881:[[1591,1605,1581],256],64882:[[1591,1605,1581],256],64883:[[1591,1605,1605],256],64884:[[1591,1605,1610],256],64885:[[1593,1580,1605],256],64886:[[1593,1605,1605],256],64887:[[1593,1605,1605],256],64888:[[1593,1605,1609],256],64889:[[1594,1605,1605],256],64890:[[1594,1605,1610],256],64891:[[1594,1605,1609],256],64892:[[1601,1582,1605],256],64893:[[1601,1582,1605],256],64894:[[1602,1605,1581],256],64895:[[1602,1605,1605],256],64896:[[1604,1581,1605],256],64897:[[1604,1581,1610],256],64898:[[1604,1581,1609],256],64899:[[1604,1580,1580],256],64900:[[1604,1580,1580],256],64901:[[1604,1582,1605],256],64902:[[1604,1582,1605],256],64903:[[1604,1605,1581],256],64904:[[1604,1605,1581],256],64905:[[1605,1581,1580],256],64906:[[1605,1581,1605],256],64907:[[1605,1581,1610],256],64908:[[1605,1580,1581],256],64909:[[1605,1580,1605],256],64910:[[1605,1582,1580],256],64911:[[1605,1582,1605],256],64914:[[1605,1580,1582],256],64915:[[1607,1605,1580],256],64916:[[1607,1605,1605],256],64917:[[1606,1581,1605],256],64918:[[1606,1581,1609],256],64919:[[1606,1580,1605],256],64920:[[1606,1580,1605],256],64921:[[1606,1580,1609],256],64922:[[1606,1605,1610],256],64923:[[1606,1605,1609],256],64924:[[1610,1605,1605],256],64925:[[1610,1605,1605],256],64926:[[1576,1582,1610],256],64927:[[1578,1580,1610],256],64928:[[1578,1580,1609],256],64929:[[1578,1582,1610],256],64930:[[1578,1582,1609],256],64931:[[1578,1605,1610],256],64932:[[1578,1605,1609],256],64933:[[1580,1605,1610],256],64934:[[1580,1581,1609],256],64935:[[1580,1605,1609],256],64936:[[1587,1582,1609],256],64937:[[1589,1581,1610],256],64938:[[1588,1581,1610],256],64939:[[1590,1581,1610],256],64940:[[1604,1580,1610],256],64941:[[1604,1605,1610],256],64942:[[1610,1581,1610],256],64943:[[1610,1580,1610],256],64944:[[1610,1605,1610],256],64945:[[1605,1605,1610],256],64946:[[1602,1605,1610],256],64947:[[1606,1581,1610],256],64948:[[1602,1605,1581],256],64949:[[1604,1581,1605],256],64950:[[1593,1605,1610],256],64951:[[1603,1605,1610],256],64952:[[1606,1580,1581],256],64953:[[1605,1582,1610],256],64954:[[1604,1580,1605],256],64955:[[1603,1605,1605],256],64956:[[1604,1580,1605],256],64957:[[1606,1580,1581],256],64958:[[1580,1581,1610],256],64959:[[1581,1580,1610],256],64960:[[1605,1580,1610],256],64961:[[1601,1605,1610],256],64962:[[1576,1581,1610],256],64963:[[1603,1605,1605],256],64964:[[1593,1580,1605],256],64965:[[1589,1605,1605],256],64966:[[1587,1582,1610],256],64967:[[1606,1580,1610],256],65008:[[1589,1604,1746],256],65009:[[1602,1604,1746],256],65010:[[1575,1604,1604,1607],256],65011:[[1575,1603,1576,1585],256],65012:[[1605,1581,1605,1583],256],65013:[[1589,1604,1593,1605],256],65014:[[1585,1587,1608,1604],256],65015:[[1593,1604,1610,1607],256],65016:[[1608,1587,1604,1605],256],65017:[[1589,1604,1609],256],65018:[[1589,1604,1609,32,1575,1604,1604,1607,32,1593,1604,1610,1607,32,1608,1587,1604,1605],256],65019:[[1580,1604,32,1580,1604,1575,1604,1607],256],65020:[[1585,1740,1575,1604],256]},
                65024:{65040:[[44],256],65041:[[12289],256],65042:[[12290],256],65043:[[58],256],65044:[[59],256],65045:[[33],256],65046:[[63],256],65047:[[12310],256],65048:[[12311],256],65049:[[8230],256],65056:[,230],65057:[,230],65058:[,230],65059:[,230],65060:[,230],65061:[,230],65062:[,230],65063:[,220],65064:[,220],65065:[,220],65066:[,220],65067:[,220],65068:[,220],65069:[,220],65072:[[8229],256],65073:[[8212],256],65074:[[8211],256],65075:[[95],256],65076:[[95],256],65077:[[40],256],65078:[[41],256],65079:[[123],256],65080:[[125],256],65081:[[12308],256],65082:[[12309],256],65083:[[12304],256],65084:[[12305],256],65085:[[12298],256],65086:[[12299],256],65087:[[12296],256],65088:[[12297],256],65089:[[12300],256],65090:[[12301],256],65091:[[12302],256],65092:[[12303],256],65095:[[91],256],65096:[[93],256],65097:[[8254],256],65098:[[8254],256],65099:[[8254],256],65100:[[8254],256],65101:[[95],256],65102:[[95],256],65103:[[95],256],65104:[[44],256],65105:[[12289],256],65106:[[46],256],65108:[[59],256],65109:[[58],256],65110:[[63],256],65111:[[33],256],65112:[[8212],256],65113:[[40],256],65114:[[41],256],65115:[[123],256],65116:[[125],256],65117:[[12308],256],65118:[[12309],256],65119:[[35],256],65120:[[38],256],65121:[[42],256],65122:[[43],256],65123:[[45],256],65124:[[60],256],65125:[[62],256],65126:[[61],256],65128:[[92],256],65129:[[36],256],65130:[[37],256],65131:[[64],256],65136:[[32,1611],256],65137:[[1600,1611],256],65138:[[32,1612],256],65140:[[32,1613],256],65142:[[32,1614],256],65143:[[1600,1614],256],65144:[[32,1615],256],65145:[[1600,1615],256],65146:[[32,1616],256],65147:[[1600,1616],256],65148:[[32,1617],256],65149:[[1600,1617],256],65150:[[32,1618],256],65151:[[1600,1618],256],65152:[[1569],256],65153:[[1570],256],65154:[[1570],256],65155:[[1571],256],65156:[[1571],256],65157:[[1572],256],65158:[[1572],256],65159:[[1573],256],65160:[[1573],256],65161:[[1574],256],65162:[[1574],256],65163:[[1574],256],65164:[[1574],256],65165:[[1575],256],65166:[[1575],256],65167:[[1576],256],65168:[[1576],256],65169:[[1576],256],65170:[[1576],256],65171:[[1577],256],65172:[[1577],256],65173:[[1578],256],65174:[[1578],256],65175:[[1578],256],65176:[[1578],256],65177:[[1579],256],65178:[[1579],256],65179:[[1579],256],65180:[[1579],256],65181:[[1580],256],65182:[[1580],256],65183:[[1580],256],65184:[[1580],256],65185:[[1581],256],65186:[[1581],256],65187:[[1581],256],65188:[[1581],256],65189:[[1582],256],65190:[[1582],256],65191:[[1582],256],65192:[[1582],256],65193:[[1583],256],65194:[[1583],256],65195:[[1584],256],65196:[[1584],256],65197:[[1585],256],65198:[[1585],256],65199:[[1586],256],65200:[[1586],256],65201:[[1587],256],65202:[[1587],256],65203:[[1587],256],65204:[[1587],256],65205:[[1588],256],65206:[[1588],256],65207:[[1588],256],65208:[[1588],256],65209:[[1589],256],65210:[[1589],256],65211:[[1589],256],65212:[[1589],256],65213:[[1590],256],65214:[[1590],256],65215:[[1590],256],65216:[[1590],256],65217:[[1591],256],65218:[[1591],256],65219:[[1591],256],65220:[[1591],256],65221:[[1592],256],65222:[[1592],256],65223:[[1592],256],65224:[[1592],256],65225:[[1593],256],65226:[[1593],256],65227:[[1593],256],65228:[[1593],256],65229:[[1594],256],65230:[[1594],256],65231:[[1594],256],65232:[[1594],256],65233:[[1601],256],65234:[[1601],256],65235:[[1601],256],65236:[[1601],256],65237:[[1602],256],65238:[[1602],256],65239:[[1602],256],65240:[[1602],256],65241:[[1603],256],65242:[[1603],256],65243:[[1603],256],65244:[[1603],256],65245:[[1604],256],65246:[[1604],256],65247:[[1604],256],65248:[[1604],256],65249:[[1605],256],65250:[[1605],256],65251:[[1605],256],65252:[[1605],256],65253:[[1606],256],65254:[[1606],256],65255:[[1606],256],65256:[[1606],256],65257:[[1607],256],65258:[[1607],256],65259:[[1607],256],65260:[[1607],256],65261:[[1608],256],65262:[[1608],256],65263:[[1609],256],65264:[[1609],256],65265:[[1610],256],65266:[[1610],256],65267:[[1610],256],65268:[[1610],256],65269:[[1604,1570],256],65270:[[1604,1570],256],65271:[[1604,1571],256],65272:[[1604,1571],256],65273:[[1604,1573],256],65274:[[1604,1573],256],65275:[[1604,1575],256],65276:[[1604,1575],256]},
                65280:{65281:[[33],256],65282:[[34],256],65283:[[35],256],65284:[[36],256],65285:[[37],256],65286:[[38],256],65287:[[39],256],65288:[[40],256],65289:[[41],256],65290:[[42],256],65291:[[43],256],65292:[[44],256],65293:[[45],256],65294:[[46],256],65295:[[47],256],65296:[[48],256],65297:[[49],256],65298:[[50],256],65299:[[51],256],65300:[[52],256],65301:[[53],256],65302:[[54],256],65303:[[55],256],65304:[[56],256],65305:[[57],256],65306:[[58],256],65307:[[59],256],65308:[[60],256],65309:[[61],256],65310:[[62],256],65311:[[63],256],65312:[[64],256],65313:[[65],256],65314:[[66],256],65315:[[67],256],65316:[[68],256],65317:[[69],256],65318:[[70],256],65319:[[71],256],65320:[[72],256],65321:[[73],256],65322:[[74],256],65323:[[75],256],65324:[[76],256],65325:[[77],256],65326:[[78],256],65327:[[79],256],65328:[[80],256],65329:[[81],256],65330:[[82],256],65331:[[83],256],65332:[[84],256],65333:[[85],256],65334:[[86],256],65335:[[87],256],65336:[[88],256],65337:[[89],256],65338:[[90],256],65339:[[91],256],65340:[[92],256],65341:[[93],256],65342:[[94],256],65343:[[95],256],65344:[[96],256],65345:[[97],256],65346:[[98],256],65347:[[99],256],65348:[[100],256],65349:[[101],256],65350:[[102],256],65351:[[103],256],65352:[[104],256],65353:[[105],256],65354:[[106],256],65355:[[107],256],65356:[[108],256],65357:[[109],256],65358:[[110],256],65359:[[111],256],65360:[[112],256],65361:[[113],256],65362:[[114],256],65363:[[115],256],65364:[[116],256],65365:[[117],256],65366:[[118],256],65367:[[119],256],65368:[[120],256],65369:[[121],256],65370:[[122],256],65371:[[123],256],65372:[[124],256],65373:[[125],256],65374:[[126],256],65375:[[10629],256],65376:[[10630],256],65377:[[12290],256],65378:[[12300],256],65379:[[12301],256],65380:[[12289],256],65381:[[12539],256],65382:[[12530],256],65383:[[12449],256],65384:[[12451],256],65385:[[12453],256],65386:[[12455],256],65387:[[12457],256],65388:[[12515],256],65389:[[12517],256],65390:[[12519],256],65391:[[12483],256],65392:[[12540],256],65393:[[12450],256],65394:[[12452],256],65395:[[12454],256],65396:[[12456],256],65397:[[12458],256],65398:[[12459],256],65399:[[12461],256],65400:[[12463],256],65401:[[12465],256],65402:[[12467],256],65403:[[12469],256],65404:[[12471],256],65405:[[12473],256],65406:[[12475],256],65407:[[12477],256],65408:[[12479],256],65409:[[12481],256],65410:[[12484],256],65411:[[12486],256],65412:[[12488],256],65413:[[12490],256],65414:[[12491],256],65415:[[12492],256],65416:[[12493],256],65417:[[12494],256],65418:[[12495],256],65419:[[12498],256],65420:[[12501],256],65421:[[12504],256],65422:[[12507],256],65423:[[12510],256],65424:[[12511],256],65425:[[12512],256],65426:[[12513],256],65427:[[12514],256],65428:[[12516],256],65429:[[12518],256],65430:[[12520],256],65431:[[12521],256],65432:[[12522],256],65433:[[12523],256],65434:[[12524],256],65435:[[12525],256],65436:[[12527],256],65437:[[12531],256],65438:[[12441],256],65439:[[12442],256],65440:[[12644],256],65441:[[12593],256],65442:[[12594],256],65443:[[12595],256],65444:[[12596],256],65445:[[12597],256],65446:[[12598],256],65447:[[12599],256],65448:[[12600],256],65449:[[12601],256],65450:[[12602],256],65451:[[12603],256],65452:[[12604],256],65453:[[12605],256],65454:[[12606],256],65455:[[12607],256],65456:[[12608],256],65457:[[12609],256],65458:[[12610],256],65459:[[12611],256],65460:[[12612],256],65461:[[12613],256],65462:[[12614],256],65463:[[12615],256],65464:[[12616],256],65465:[[12617],256],65466:[[12618],256],65467:[[12619],256],65468:[[12620],256],65469:[[12621],256],65470:[[12622],256],65474:[[12623],256],65475:[[12624],256],65476:[[12625],256],65477:[[12626],256],65478:[[12627],256],65479:[[12628],256],65482:[[12629],256],65483:[[12630],256],65484:[[12631],256],65485:[[12632],256],65486:[[12633],256],65487:[[12634],256],65490:[[12635],256],65491:[[12636],256],65492:[[12637],256],65493:[[12638],256],65494:[[12639],256],65495:[[12640],256],65498:[[12641],256],65499:[[12642],256],65500:[[12643],256],65504:[[162],256],65505:[[163],256],65506:[[172],256],65507:[[175],256],65508:[[166],256],65509:[[165],256],65510:[[8361],256],65512:[[9474],256],65513:[[8592],256],65514:[[8593],256],65515:[[8594],256],65516:[[8595],256],65517:[[9632],256],65518:[[9675],256]}

            };

            /***** Module to export */
            var unorm = {
                nfc: nfc,
                nfd: nfd,
                nfkc: nfkc,
                nfkd: nfkd
            };

            /*globals module:true,define:true*/

            // CommonJS
            if (typeof module === "object") {
                module.exports = unorm;

                // AMD
            } else if (typeof define === "function" && define.amd) {
                define("unorm", function () {
                    return unorm;
                });

                // Global
            } else {
                root.unorm = unorm;
            }

            /***** Export as shim for String::normalize method *****/
            /*
      http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts#november_8_2013_draft_rev_21

      21.1.3.12 String.prototype.normalize(form="NFC")
      When the normalize method is called with one argument form, the following steps are taken:

      1. Let O be CheckObjectCoercible(this value).
      2. Let S be ToString(O).
      3. ReturnIfAbrupt(S).
      4. If form is not provided or undefined let form be "NFC".
      5. Let f be ToString(form).
      6. ReturnIfAbrupt(f).
      7. If f is not one of "NFC", "NFD", "NFKC", or "NFKD", then throw a RangeError Exception.
      8. Let ns be the String value is the result of normalizing S into the normalization form named by f as specified in Unicode Standard Annex #15, UnicodeNormalizatoin Forms.
      9. Return ns.

      The length property of the normalize method is 0.

      *NOTE* The normalize function is intentionally generic; it does not require that its this value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.
   */
            unorm.shimApplied = false;

            if (!String.prototype.normalize) {
                String.prototype.normalize = function(form) {
                    var str = "" + this;
                    form =  form === undefined ? "NFC" : form;

                    if (form === "NFC") {
                        return unorm.nfc(str);
                    } else if (form === "NFD") {
                        return unorm.nfd(str);
                    } else if (form === "NFKC") {
                        return unorm.nfkc(str);
                    } else if (form === "NFKD") {
                        return unorm.nfkd(str);
                    } else {
                        throw new RangeError("Invalid normalization form: " + form);
                    }
                };

                unorm.shimApplied = true;
            }
        }(this));

    },{}],"/bytetrade-js/node_modules/util-deprecate/browser.js":[function(require,module,exports){
        (function (global){

            /**
             * Module exports.
             */

            module.exports = deprecate;

            /**
             * Mark that a method should not be used.
             * Returns a modified function which warns once by default.
             *
             * If `localStorage.noDeprecation = true` is set, then it is a no-op.
             *
             * If `localStorage.throwDeprecation = true` is set, then deprecated functions
             * will throw an Error when invoked.
             *
             * If `localStorage.traceDeprecation = true` is set, then deprecated functions
             * will invoke `console.trace()` instead of `console.error()`.
             *
             * @param {Function} fn - the function to deprecate
             * @param {String} msg - the string to print to the console when `fn` is invoked
             * @returns {Function} a new "deprecated" version of `fn`
             * @api public
             */

            function deprecate (fn, msg) {
                if (config('noDeprecation')) {
                    return fn;
                }

                var warned = false;
                function deprecated() {
                    if (!warned) {
                        if (config('throwDeprecation')) {
                            throw new Error(msg);
                        } else if (config('traceDeprecation')) {
                            console.trace(msg);
                        } else {
                            console.warn(msg);
                        }
                        warned = true;
                    }
                    return fn.apply(this, arguments);
                }

                return deprecated;
            }

            /**
             * Checks `localStorage` for boolean values for the given `name`.
             *
             * @param {String} name
             * @returns {Boolean}
             * @api private
             */

            function config (name) {
                // accessing global.localStorage can trigger a DOMException in sandboxed iframes
                try {
                    if (!global.localStorage) return false;
                } catch (_) {
                    return false;
                }
                var val = global.localStorage[name];
                if (null == val) return false;
                return String(val).toLowerCase() === 'true';
            }

        }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

    },{}],"/bytetrade-js/node_modules/util/node_modules/inherits/inherits_browser.js":[function(require,module,exports){
        arguments[4]["/bytetrade-js/node_modules/inherits/inherits_browser.js"][0].apply(exports,arguments)
    },{}],"/bytetrade-js/node_modules/util/support/isBufferBrowser.js":[function(require,module,exports){
        module.exports = function isBuffer(arg) {
            return arg && typeof arg === 'object'
                && typeof arg.copy === 'function'
                && typeof arg.fill === 'function'
                && typeof arg.readUInt8 === 'function';
        }
    },{}],"/bytetrade-js/node_modules/util/util.js":[function(require,module,exports){
        (function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

            var formatRegExp = /%[sdj%]/g;
            exports.format = function(f) {
                if (!isString(f)) {
                    var objects = [];
                    for (var i = 0; i < arguments.length; i++) {
                        objects.push(inspect(arguments[i]));
                    }
                    return objects.join(' ');
                }

                var i = 1;
                var args = arguments;
                var len = args.length;
                var str = String(f).replace(formatRegExp, function(x) {
                    if (x === '%%') return '%';
                    if (i >= len) return x;
                    switch (x) {
                        case '%s': return String(args[i++]);
                        case '%d': return Number(args[i++]);
                        case '%j':
                            try {
                                return JSON.stringify(args[i++]);
                            } catch (_) {
                                return '[Circular]';
                            }
                        default:
                            return x;
                    }
                });
                for (var x = args[i]; i < len; x = args[++i]) {
                    if (isNull(x) || !isObject(x)) {
                        str += ' ' + x;
                    } else {
                        str += ' ' + inspect(x);
                    }
                }
                return str;
            };


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
            exports.deprecate = function(fn, msg) {
                // Allow for deprecating things in the process of starting up.
                if (isUndefined(global.process)) {
                    return function() {
                        return exports.deprecate(fn, msg).apply(this, arguments);
                    };
                }

                if (process.noDeprecation === true) {
                    return fn;
                }

                var warned = false;
                function deprecated() {
                    if (!warned) {
                        if (process.throwDeprecation) {
                            throw new Error(msg);
                        } else if (process.traceDeprecation) {
                            console.trace(msg);
                        } else {
                            console.error(msg);
                        }
                        warned = true;
                    }
                    return fn.apply(this, arguments);
                }

                return deprecated;
            };


            var debugs = {};
            var debugEnviron;
            exports.debuglog = function(set) {
                if (isUndefined(debugEnviron))
                    debugEnviron = process.env.NODE_DEBUG || '';
                set = set.toUpperCase();
                if (!debugs[set]) {
                    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
                        var pid = process.pid;
                        debugs[set] = function() {
                            var msg = exports.format.apply(exports, arguments);
                            console.error('%s %d: %s', set, pid, msg);
                        };
                    } else {
                        debugs[set] = function() {};
                    }
                }
                return debugs[set];
            };


            /**
             * Echos the value of a value. Trys to print the value out
             * in the best way possible given the different types.
             *
             * @param {Object} obj The object to print out.
             * @param {Object} opts Optional options object that alters the output.
             */
            /* legacy: obj, showHidden, depth, colors*/
            function inspect(obj, opts) {
                // default options
                var ctx = {
                    seen: [],
                    stylize: stylizeNoColor
                };
                // legacy...
                if (arguments.length >= 3) ctx.depth = arguments[2];
                if (arguments.length >= 4) ctx.colors = arguments[3];
                if (isBoolean(opts)) {
                    // legacy...
                    ctx.showHidden = opts;
                } else if (opts) {
                    // got an "options" object
                    exports._extend(ctx, opts);
                }
                // set default options
                if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
                if (isUndefined(ctx.depth)) ctx.depth = 2;
                if (isUndefined(ctx.colors)) ctx.colors = false;
                if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
                if (ctx.colors) ctx.stylize = stylizeWithColor;
                return formatValue(ctx, obj, ctx.depth);
            }
            exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
            inspect.colors = {
                'bold' : [1, 22],
                'italic' : [3, 23],
                'underline' : [4, 24],
                'inverse' : [7, 27],
                'white' : [37, 39],
                'grey' : [90, 39],
                'black' : [30, 39],
                'blue' : [34, 39],
                'cyan' : [36, 39],
                'green' : [32, 39],
                'magenta' : [35, 39],
                'red' : [31, 39],
                'yellow' : [33, 39]
            };

// Don't use 'blue' not visible on cmd.exe
            inspect.styles = {
                'special': 'cyan',
                'number': 'yellow',
                'boolean': 'yellow',
                'undefined': 'grey',
                'null': 'bold',
                'string': 'green',
                'date': 'magenta',
                // "name": intentionally not styling
                'regexp': 'red'
            };


            function stylizeWithColor(str, styleType) {
                var style = inspect.styles[styleType];

                if (style) {
                    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
                        '\u001b[' + inspect.colors[style][1] + 'm';
                } else {
                    return str;
                }
            }


            function stylizeNoColor(str, styleType) {
                return str;
            }


            function arrayToHash(array) {
                var hash = {};

                array.forEach(function(val, idx) {
                    hash[val] = true;
                });

                return hash;
            }


            function formatValue(ctx, value, recurseTimes) {
                // Provide a hook for user-specified inspect functions.
                // Check that value is an object with an inspect function on it
                if (ctx.customInspect &&
                    value &&
                    isFunction(value.inspect) &&
                    // Filter out the util module, it's inspect function is special
                    value.inspect !== exports.inspect &&
                    // Also filter out any prototype objects using the circular check.
                    !(value.constructor && value.constructor.prototype === value)) {
                    var ret = value.inspect(recurseTimes, ctx);
                    if (!isString(ret)) {
                        ret = formatValue(ctx, ret, recurseTimes);
                    }
                    return ret;
                }

                // Primitive types cannot have properties
                var primitive = formatPrimitive(ctx, value);
                if (primitive) {
                    return primitive;
                }

                // Look up the keys of the object.
                var keys = Object.keys(value);
                var visibleKeys = arrayToHash(keys);

                if (ctx.showHidden) {
                    keys = Object.getOwnPropertyNames(value);
                }

                // IE doesn't make error fields non-enumerable
                // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
                if (isError(value)
                    && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
                    return formatError(value);
                }

                // Some type of object without properties can be shortcutted.
                if (keys.length === 0) {
                    if (isFunction(value)) {
                        var name = value.name ? ': ' + value.name : '';
                        return ctx.stylize('[Function' + name + ']', 'special');
                    }
                    if (isRegExp(value)) {
                        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                    }
                    if (isDate(value)) {
                        return ctx.stylize(Date.prototype.toString.call(value), 'date');
                    }
                    if (isError(value)) {
                        return formatError(value);
                    }
                }

                var base = '', array = false, braces = ['{', '}'];

                // Make Array say that they are Array
                if (isArray(value)) {
                    array = true;
                    braces = ['[', ']'];
                }

                // Make functions say that they are functions
                if (isFunction(value)) {
                    var n = value.name ? ': ' + value.name : '';
                    base = ' [Function' + n + ']';
                }

                // Make RegExps say that they are RegExps
                if (isRegExp(value)) {
                    base = ' ' + RegExp.prototype.toString.call(value);
                }

                // Make dates with properties first say the date
                if (isDate(value)) {
                    base = ' ' + Date.prototype.toUTCString.call(value);
                }

                // Make error with message first say the error
                if (isError(value)) {
                    base = ' ' + formatError(value);
                }

                if (keys.length === 0 && (!array || value.length == 0)) {
                    return braces[0] + base + braces[1];
                }

                if (recurseTimes < 0) {
                    if (isRegExp(value)) {
                        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                    } else {
                        return ctx.stylize('[Object]', 'special');
                    }
                }

                ctx.seen.push(value);

                var output;
                if (array) {
                    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
                } else {
                    output = keys.map(function(key) {
                        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
                    });
                }

                ctx.seen.pop();

                return reduceToSingleString(output, base, braces);
            }


            function formatPrimitive(ctx, value) {
                if (isUndefined(value))
                    return ctx.stylize('undefined', 'undefined');
                if (isString(value)) {
                    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                        .replace(/'/g, "\\'")
                        .replace(/\\"/g, '"') + '\'';
                    return ctx.stylize(simple, 'string');
                }
                if (isNumber(value))
                    return ctx.stylize('' + value, 'number');
                if (isBoolean(value))
                    return ctx.stylize('' + value, 'boolean');
                // For some reason typeof null is "object", so special case here.
                if (isNull(value))
                    return ctx.stylize('null', 'null');
            }


            function formatError(value) {
                return '[' + Error.prototype.toString.call(value) + ']';
            }


            function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
                var output = [];
                for (var i = 0, l = value.length; i < l; ++i) {
                    if (hasOwnProperty(value, String(i))) {
                        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
                            String(i), true));
                    } else {
                        output.push('');
                    }
                }
                keys.forEach(function(key) {
                    if (!key.match(/^\d+$/)) {
                        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
                            key, true));
                    }
                });
                return output;
            }


            function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
                var name, str, desc;
                desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
                if (desc.get) {
                    if (desc.set) {
                        str = ctx.stylize('[Getter/Setter]', 'special');
                    } else {
                        str = ctx.stylize('[Getter]', 'special');
                    }
                } else {
                    if (desc.set) {
                        str = ctx.stylize('[Setter]', 'special');
                    }
                }
                if (!hasOwnProperty(visibleKeys, key)) {
                    name = '[' + key + ']';
                }
                if (!str) {
                    if (ctx.seen.indexOf(desc.value) < 0) {
                        if (isNull(recurseTimes)) {
                            str = formatValue(ctx, desc.value, null);
                        } else {
                            str = formatValue(ctx, desc.value, recurseTimes - 1);
                        }
                        if (str.indexOf('\n') > -1) {
                            if (array) {
                                str = str.split('\n').map(function(line) {
                                    return '  ' + line;
                                }).join('\n').substr(2);
                            } else {
                                str = '\n' + str.split('\n').map(function(line) {
                                    return '   ' + line;
                                }).join('\n');
                            }
                        }
                    } else {
                        str = ctx.stylize('[Circular]', 'special');
                    }
                }
                if (isUndefined(name)) {
                    if (array && key.match(/^\d+$/)) {
                        return str;
                    }
                    name = JSON.stringify('' + key);
                    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                        name = name.substr(1, name.length - 2);
                        name = ctx.stylize(name, 'name');
                    } else {
                        name = name.replace(/'/g, "\\'")
                            .replace(/\\"/g, '"')
                            .replace(/(^"|"$)/g, "'");
                        name = ctx.stylize(name, 'string');
                    }
                }

                return name + ': ' + str;
            }


            function reduceToSingleString(output, base, braces) {
                var numLinesEst = 0;
                var length = output.reduce(function(prev, cur) {
                    numLinesEst++;
                    if (cur.indexOf('\n') >= 0) numLinesEst++;
                    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
                }, 0);

                if (length > 60) {
                    return braces[0] +
                        (base === '' ? '' : base + '\n ') +
                        ' ' +
                        output.join(',\n  ') +
                        ' ' +
                        braces[1];
                }

                return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
            }


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
            function isArray(ar) {
                return Array.isArray(ar);
            }
            exports.isArray = isArray;

            function isBoolean(arg) {
                return typeof arg === 'boolean';
            }
            exports.isBoolean = isBoolean;

            function isNull(arg) {
                return arg === null;
            }
            exports.isNull = isNull;

            function isNullOrUndefined(arg) {
                return arg == null;
            }
            exports.isNullOrUndefined = isNullOrUndefined;

            function isNumber(arg) {
                return typeof arg === 'number';
            }
            exports.isNumber = isNumber;

            function isString(arg) {
                return typeof arg === 'string';
            }
            exports.isString = isString;

            function isSymbol(arg) {
                return typeof arg === 'symbol';
            }
            exports.isSymbol = isSymbol;

            function isUndefined(arg) {
                return arg === void 0;
            }
            exports.isUndefined = isUndefined;

            function isRegExp(re) {
                return isObject(re) && objectToString(re) === '[object RegExp]';
            }
            exports.isRegExp = isRegExp;

            function isObject(arg) {
                return typeof arg === 'object' && arg !== null;
            }
            exports.isObject = isObject;

            function isDate(d) {
                return isObject(d) && objectToString(d) === '[object Date]';
            }
            exports.isDate = isDate;

            function isError(e) {
                return isObject(e) &&
                    (objectToString(e) === '[object Error]' || e instanceof Error);
            }
            exports.isError = isError;

            function isFunction(arg) {
                return typeof arg === 'function';
            }
            exports.isFunction = isFunction;

            function isPrimitive(arg) {
                return arg === null ||
                    typeof arg === 'boolean' ||
                    typeof arg === 'number' ||
                    typeof arg === 'string' ||
                    typeof arg === 'symbol' ||  // ES6 symbol
                    typeof arg === 'undefined';
            }
            exports.isPrimitive = isPrimitive;

            exports.isBuffer = require('./support/isBuffer');

            function objectToString(o) {
                return Object.prototype.toString.call(o);
            }


            function pad(n) {
                return n < 10 ? '0' + n.toString(10) : n.toString(10);
            }


            var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
            function timestamp() {
                var d = new Date();
                var time = [pad(d.getHours()),
                    pad(d.getMinutes()),
                    pad(d.getSeconds())].join(':');
                return [d.getDate(), months[d.getMonth()], time].join(' ');
            }


// log is just a thin wrapper to console.log that prepends a timestamp
            exports.log = function() {
                console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
            };


            /**
             * Inherit the prototype methods from one constructor into another.
             *
             * The Function.prototype.inherits from lang.js rewritten as a standalone
             * function (not on Function.prototype). NOTE: If this file is to be loaded
             * during bootstrapping this function needs to be rewritten using some native
             * functions as prototype setup using normal JavaScript does not work as
             * expected during bootstrapping (see mirror.js in r114903).
             *
             * @param {function} ctor Constructor function which needs to inherit the
             *     prototype.
             * @param {function} superCtor Constructor function to inherit prototype from.
             */
            exports.inherits = require('inherits');

            exports._extend = function(origin, add) {
                // Don't do anything if add isn't an object
                if (!add || !isObject(add)) return origin;

                var keys = Object.keys(add);
                var i = keys.length;
                while (i--) {
                    origin[keys[i]] = add[keys[i]];
                }
                return origin;
            };

            function hasOwnProperty(obj, prop) {
                return Object.prototype.hasOwnProperty.call(obj, prop);
            }

        }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

    },{"./support/isBuffer":"/bytetrade-js/node_modules/util/support/isBufferBrowser.js","_process":"/bytetrade-js/node_modules/process/browser.js","inherits":"/bytetrade-js/node_modules/util/node_modules/inherits/inherits_browser.js"}],"/bytetrade-js/node_modules/uuid/index.js":[function(require,module,exports){
        var v1 = require('./v1');
        var v4 = require('./v4');

        var uuid = v4;
        uuid.v1 = v1;
        uuid.v4 = v4;

        module.exports = uuid;

    },{"./v1":"/bytetrade-js/node_modules/uuid/v1.js","./v4":"/bytetrade-js/node_modules/uuid/v4.js"}],"/bytetrade-js/node_modules/uuid/lib/bytesToUuid.js":[function(require,module,exports){
        /**
         * Convert array of 16 byte values to UUID string format of the form:
         * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
         */
        var byteToHex = [];
        for (var i = 0; i < 256; ++i) {
            byteToHex[i] = (i + 0x100).toString(16).substr(1);
        }

        function bytesToUuid(buf, offset) {
            var i = offset || 0;
            var bth = byteToHex;
            // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
            return ([bth[buf[i++]], bth[buf[i++]],
                bth[buf[i++]], bth[buf[i++]], '-',
                bth[buf[i++]], bth[buf[i++]], '-',
                bth[buf[i++]], bth[buf[i++]], '-',
                bth[buf[i++]], bth[buf[i++]], '-',
                bth[buf[i++]], bth[buf[i++]],
                bth[buf[i++]], bth[buf[i++]],
                bth[buf[i++]], bth[buf[i++]]]).join('');
        }

        module.exports = bytesToUuid;

    },{}],"/bytetrade-js/node_modules/uuid/lib/rng-browser.js":[function(require,module,exports){
// Unique ID creation requires a high quality random # generator.  In the
// browser this is a little complicated due to unknown quality of Math.random()
// and inconsistent support for the `crypto` API.  We do the best we can via
// feature-detection

// getRandomValues needs to be invoked in a context where "this" is a Crypto
// implementation. Also, find the complete implementation of crypto on IE11.
        var getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||
            (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));

        if (getRandomValues) {
            // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
            var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

            module.exports = function whatwgRNG() {
                getRandomValues(rnds8);
                return rnds8;
            };
        } else {
            // Math.random()-based (RNG)
            //
            // If all else fails, use Math.random().  It's fast, but is of unspecified
            // quality.
            var rnds = new Array(16);

            module.exports = function mathRNG() {
                for (var i = 0, r; i < 16; i++) {
                    if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
                    rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
                }

                return rnds;
            };
        }

    },{}],"/bytetrade-js/node_modules/uuid/v1.js":[function(require,module,exports){
        var rng = require('./lib/rng');
        var bytesToUuid = require('./lib/bytesToUuid');

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

        var _nodeId;
        var _clockseq;

// Previous uuid creation time
        var _lastMSecs = 0;
        var _lastNSecs = 0;

// See https://github.com/broofa/node-uuid for API details
        function v1(options, buf, offset) {
            var i = buf && offset || 0;
            var b = buf || [];

            options = options || {};
            var node = options.node || _nodeId;
            var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

            // node and clockseq need to be initialized to random values if they're not
            // specified.  We do this lazily to minimize issues related to insufficient
            // system entropy.  See #189
            if (node == null || clockseq == null) {
                var seedBytes = rng();
                if (node == null) {
                    // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
                    node = _nodeId = [
                        seedBytes[0] | 0x01,
                        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]
                    ];
                }
                if (clockseq == null) {
                    // Per 4.2.2, randomize (14 bit) clockseq
                    clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
                }
            }

            // UUID timestamps are 100 nano-second units since the Gregorian epoch,
            // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
            // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
            // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
            var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

            // Per 4.2.1.2, use count of uuid's generated during the current clock
            // cycle to simulate higher resolution clock
            var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

            // Time since last uuid creation (in msecs)
            var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

            // Per 4.2.1.2, Bump clockseq on clock regression
            if (dt < 0 && options.clockseq === undefined) {
                clockseq = clockseq + 1 & 0x3fff;
            }

            // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
            // time interval
            if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
                nsecs = 0;
            }

            // Per 4.2.1.2 Throw error if too many uuids are requested
            if (nsecs >= 10000) {
                throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
            }

            _lastMSecs = msecs;
            _lastNSecs = nsecs;
            _clockseq = clockseq;

            // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
            msecs += 12219292800000;

            // `time_low`
            var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
            b[i++] = tl >>> 24 & 0xff;
            b[i++] = tl >>> 16 & 0xff;
            b[i++] = tl >>> 8 & 0xff;
            b[i++] = tl & 0xff;

            // `time_mid`
            var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
            b[i++] = tmh >>> 8 & 0xff;
            b[i++] = tmh & 0xff;

            // `time_high_and_version`
            b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
            b[i++] = tmh >>> 16 & 0xff;

            // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
            b[i++] = clockseq >>> 8 | 0x80;

            // `clock_seq_low`
            b[i++] = clockseq & 0xff;

            // `node`
            for (var n = 0; n < 6; ++n) {
                b[i + n] = node[n];
            }

            return buf ? buf : bytesToUuid(b);
        }

        module.exports = v1;

    },{"./lib/bytesToUuid":"/bytetrade-js/node_modules/uuid/lib/bytesToUuid.js","./lib/rng":"/bytetrade-js/node_modules/uuid/lib/rng-browser.js"}],"/bytetrade-js/node_modules/uuid/v4.js":[function(require,module,exports){
        var rng = require('./lib/rng');
        var bytesToUuid = require('./lib/bytesToUuid');

        function v4(options, buf, offset) {
            var i = buf && offset || 0;

            if (typeof(options) == 'string') {
                buf = options === 'binary' ? new Array(16) : null;
                options = null;
            }
            options = options || {};

            var rnds = options.random || (options.rng || rng)();

            // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
            rnds[6] = (rnds[6] & 0x0f) | 0x40;
            rnds[8] = (rnds[8] & 0x3f) | 0x80;

            // Copy bytes to buffer, if provided
            if (buf) {
                for (var ii = 0; ii < 16; ++ii) {
                    buf[i + ii] = rnds[ii];
                }
            }

            return buf || bytesToUuid(rnds);
        }

        module.exports = v4;

    },{"./lib/bytesToUuid":"/bytetrade-js/node_modules/uuid/lib/bytesToUuid.js","./lib/rng":"/bytetrade-js/node_modules/uuid/lib/rng-browser.js"}]},{},["/bytetrade-js/dist/browser.js"])("/bytetrade-js/dist/browser.js")
});
