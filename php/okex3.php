<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception as Exception; // a common import

class okex3 extends okex {

    public function describe () {
        return array_replace_recursive (parent::describe (), array (
            'id' => 'okex3',
            'name' => 'OKEX v3',
            'version' => 'v3',
            'has' => array (
                'CORS' => false,
                'futures' => true,
                'fetchTickers' => true,
            ),
            'requiredCredentials' => array (
                'apiKey' => true,
                'secret' => true,
                'password' => true,
            ),
            'urls' => array (
                'logo' => 'https://user-images.githubusercontent.com/1294454/32552768-0d6dd3c6-c4a6-11e7-90f8-c043b64756a7.jpg',
                'api' => array (
                    'public' => 'https://www.okex.com/api',
                    'private' => 'https://www.okex.com/api',
                ),
                'www' => 'https://www.okex.com',
                'doc' => 'https://www.okex.com/docs/',
                'fees' => 'https://www.okex.com/pages/products/fees.html',
            ),
            'api' => array (
                'public' => array (
                    'get' => array (
                        'spot/v3/instruments/{symbol}/book',    // instrument-id
                        'spot/v3/instruments/ticker',
                        'spot/v3/instruments/{symbol}/ticker',
                        'spot/v3/instruments/{symbol}/trades',
                        'spot/v3/instruments/{symbol}/candles',
                        'futures/v3/instruments/{symbol}/book',
                        'futures/v3/instruments/ticker',
                        'futures/v3/instruments/{symbol}/ticker',
                        'futures/v3/instruments/{symbol}/trades',
                        'futures/v3/instruments/{symbol}/candles',
                        'general/v3/time',
                    ),
                ),
                'private' => array (
                    'post' => array (
                        'account/v3/transfer',
                        'account/v3/withdrawal',
                    ),
                    'get' => array (
                        'account/v3/withdrawal/fee',
                    ),
                ),
            ),
        ));
    }

    public function sign ($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = '/';
        $url .= $this->implode_params($path, $params);
        $query = $this->omit ($params, $this->extract_params($path));
        if ($api === 'private') {
            $this->check_required_credentials();
            if ($method === 'GET') {
                if ($query)
                    $url .= '?' . $this->urlencode ($query);
            } else {
                $body = $this->json ($query);
            }
            $timestamp = '';
            $timeStampData = $this->fetch ($this->urls['api']['public'] . '/general/v3/time');
            $timestamp = $timeStampData['iso'];
            $payload = implode ('', array ($timestamp, $method, '/api' . $url));
            if ($body) {
                $payload .= $body;
            }
            $signature = $this->hmac ($payload, $this->secret, 'sha256', 'base64');
            $headers = array (
                'OK-ACCESS-KEY' => $this->apiKey,
                'OK-ACCESS-SIGN' => $this->decode ($signature),
                'OK-ACCESS-TIMESTAMP' => $timestamp,
                'OK-ACCESS-PASSPHRASE' => $this->password,
                'Content-Type' => 'application/json',
            );
        } else {
            if ($params) {
                $url .= '?' . $this->urlencode ($params);
            }
        }
        $url = $this->urls['api'][$api] . $url;
        return array ( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }
}
